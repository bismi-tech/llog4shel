Skip to main content
Logo
CS 6035 O01, OCY
‚Äì
Ed Discussion

2

New Thread
Courses
56
35
Categories
590 others online
Use left and right arrow keys to adjust the split region size

New Thread
Filter
Use left and right arrow keys to adjust the split region size
Project Log4Shell - Flag 6 Restful Data #697
Kevin Darlington
2 weeks ago in Projects ‚Äì Log4Shell

Pinned

Star

Watch

544
55
44
44
Views

1
This is the post for discussing this flag. If there's any update on the task, we'll post it here. Please, do not open new threads covering this task.

Anyone with questions about citations and plagiarism should consult the appropriate section of the course policy on misconduct.

Note: Do not share code, outside tools you used or any hints beyond the writeup or office hours to other students. We will delete threads and warn you if you overshare.

Comment

Sort by Newest 
Benjamin Harris White
3h

Resolved
What a ride. This was such a great flag.

I'll echo the advice to put distinctive data into all the fields/params and look at all the spots in the log where they appear and how they might be used to your advantage. What exactly is the server doing to those inputs?


Reply

Sukhman Kaur
3h
I am unable to ever hit the exploit whether thats in get or post :(


Reply

Benjamin Harris White
2h
How confident are you that the server's logging something that looks like the exploit string? Whether or not the exploit triggers in the POST, there is little need for obfuscation, so are you able to get it to log something that looks exactly right?

And are you able to issue a GET that once again causes it to log something that looks exactly right?


Reply

Sukhman Kaur
2h
 Replying to Benjamin Harris White
i was able to hit the ldap server with post but not using any obfuscation but now I guess need to look into how to do that with get as well


Reply

Benjamin Harris White
1h
 Replying to Sukhman Kaur
You're in the homestretch!

Make sure you're able to persist that exploit string to the database and then figure out which of the GET endpoints referenced in the documentation does the retrieval-and-logging that you need!


Reply

Anne Mary Shea
5h
Unresolved
I am to the point where I am past the teapot message, my LDAP and python servers are hitting, and in the console log it is showing the "Entering Exploit." message. I receive an error saying "Valid product.id not found inin config.properties."

I reset my exploit code to try nc to see if there was a value placed for product.id, but I do not receive the "connection received" message.

Did anyone else run into this/have troubleshooting advice?


Reply

Benjamin Harris White
1h
Are you getting the exploit to fire with a POST or with a subsequent GET? You'll need to do the latter since this is an "at rest" flag.

Also, the docs say:

You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated.
So as in some other flags, you'll need to edit the properties to add this new one. What should the value be? At what point can you know the answer to that question?


Reply

Keymer Botero
7h

Resolved

AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA I DID IT, AFTER A STRAIGHT WEEK, I GOT IT!!! 
I swear, there were teapot messages that were getting in my way before that SOMEHOW weren't present! It's as if the problem itself finally threw me a bone AND I DID IT!

Thank you everyone on this thread, it's been an emotional journey throughout this lab and I'm so happy to have finally made it. For those just making it here, definitely read this thread. At this point, there are some helpful pointers that can help point in the right direction


3
Reply

Keymer Botero
7h
OH AND BEFORE I FORGET, YES DERP REALLY SAVED THE DAY FOR ME.

DO NOT PILE ON MULTIPLE EMPTY ENTRIES, YOU WILL LEAVE YOURSELF TRAPPED FOR DAYS


Reply

David Jaffie
7h

Resolved
Has anyone figured out the "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it."

I thought we just had to set product.id? Why is it asking about customer.service.email?


Reply

Keymer Botero
7h
Oh don't worry, This was something that Kevin and Joel mentioned. They forgot to update, so our job is actually to append the product.id of the malicious product into the config.properties.


2
Reply

David Jaffie
7h
Hm okay. I believe I am appending product.id, but I still just get the same customer.service.email warning. May just be a red herring.


1
Reply

Anh T. Le
9h

Resolved
Definitely, not an easy one...
If i'm giving out too much please delete this message. 
Confirm that there is no need for obfuscating. Look at the Log for POST something is definite in there that you can use, but also check what GET gives using all the endpoints.  


1
Reply

Keymer Botero
7h
I agree, although I'm stuck. I won't pry for details as that would go against policies established by TAs but I am definitely curious as to how you get the teapot messages if you did not need obfuscation.  


Reply

Anh T. Le
7h
Look at log for POST as other mention.

Try something like silly sillier silliest outofspacesilly like the TA mentioned.

There is one spot will stand out in Post log. 

Dont move to get until you spot that Log.

Thinking about buying car to modify the post curl what do you need to know abt the car.


1
Reply

Keymer Botero
7h
 Replying to Anh T. Le
Anh, I swear it right now, this post really saved me. I thought was gonna be websec all over again where my exploit DID perform what was required, but the flag generator just did not want me to get the last bit of points. 

The moment I found that spot, I was like HUH??? The funny part is, I could have sworn there were teapot messages saying otherwise, but there was not! Thank you so much Anh.


1
Reply

Ramoya Grandison
3h
 Replying to Anh T. Le
I‚Äôve spotted this from the beginning but for whatever reason cannot figure out what to do with it. I‚Äôve tried multiple things with it and nothing works. Idk what I‚Äôm missing. Any tips would help


Reply

Anh T. Le
2h
 Replying to Ramoya Grandison
Focus on  what do you need to know abt the car when you think about buying car to modify POST...
Also then is there a pattern you can recognize so that you can take advantage to inject without obfuscating anything? If you recognize the SPOT, you are there, just focus on that more. 
I can't say a lot more i might get yelled at by TAs  ü§ê 


1
Reply

Ramoya Grandison
2h
 Replying to Anh T. Le
If I‚Äôm following what you‚Äôre saying I‚Äôve tried that, but i tried after a whole bunch of submissions so maybe I‚Äôll restart my container. Because I was getting both servers to fire. I figured i was close but the only thing i couldn‚Äôt get behind was the obfuscation. Thank you Anh T. 


Reply

Anh T. Le
2h
 Replying to Ramoya Grandison
There is a way to arrange that you dont need obfuscation.


Reply

Sukhman Kaur
2h
 Replying to Anh T. Le
after finding what. is needed for post and triggering the servers, how do i move onto get and see what i need there to trigger?


Reply

Anh T. Le
2h
 Replying to Sukhman Kaur
Use one of the endpoints that was provided.
If you cant make Flag appear. Stare at your post again because that is not correct.


1
Reply

Ramoya Grandison
2h
 Replying to Anh T. Le
If it‚Äôs too specific feel free to jump around it- but am i rearranging the things within the thing or the things that make up the thing? 


Reply

Anh T. Le
1h
 Replying to Ramoya Grandison
If you asked that question, then maybe you have not found the right spot to stare at in log for Post. 
Try it with simple string first 

Try something like silly sillier silliest outofspacesilly like the TA mentioned.


Reply

Joshua James Holder
11h

Resolved
Just a heads up, if you think you have everything right and it's still giving you the data at rest error, stop and start your container again. 

I had my payload good for two hours today and I was banging my head against the keyboard making slight tweaks. Then, I stopped/started the container, entered the same commands, and it gave me the flag. 


1
Reply

Sukhman Kaur
12h

Resolved
I am really struggling to get the exploit to even trigger. I used post and injected it somewhere there and can see it when calling another endpoint but it seems like its just as a string and never gets executed... does anyone have any helpful hints on what I could be doing wrong. Is the exploit supposed to trigger at post and get? mine is not triggering at either :(


Reply

Jason Clement Liu
12h
I found that the Office Hours #2 was very informative and would highly recommend you check it out. As others have stated before, this flag is about information at rest. Read the logs for each endpoint and understand where information is being stored.


1
Reply

Amrut Bhalchandra Kulkarni
11h
That's what I'm struggling with rn
I have a payload in POST that should work, but I'm trying to find a way to access it to run during GET


Reply

Jason Clement Liu
11h
 Replying to Amrut Bhalchandra Kulkarni
Make sure to check all the endpoints to see which would be the best method of exploiting your POST.


1
Reply

Amrut Bhalchandra Kulkarni
13h

Resolved
I think I know which GET it is, but there's a vector there that I'm not sure how to populate
My exploit is in the db because of POST, but I'm not sure how to access it in GET


Reply

Keymer Botero
12h
Hey Amrut! I believe I know which one you are referring to. Be sure to note where everything is being logged when you are using that endpoint and see what's getting returned to you.


Reply

Amrut Bhalchandra Kulkarni
12h
I can see where all my POST info was logged, but I'm trying to access it so I can use it in GET


Reply

Amrut Bhalchandra Kulkarni
13h

Resolved
Did anyone else's LDAP ping when they executed their POST?

Since the GET is what's supposed to trigger it, idk if that's a good thing or not


Reply

Jason Clement Liu
12h
My LDAP server triggered when running my POST. Others below have reported that theirs did not trigger. I'm not sure, but I suppose that means it can be done in multiple ways.


1
Reply

Amrut Bhalchandra Kulkarni
14h

Resolved
I think I found the pattern in POST some folks have mentioned, but when I'm testing that theory, I get an error saying "IP Address pattern detected in request body. Aborting."

Any tips to avoid this?

Edit: Figured it out... and it was easier than predicted

Edit2: Checking the logs, the syntax for the pattern is messing up my attempted fix

Edit3: Found another simple fix that works; at least the syntax is what I'm used to seeing from other flags


1
Reply

Amrut Bhalchandra Kulkarni
14h

Resolved
I'm honestly very lost

I know that the data-at-rest component of this means our exploit is sent to the db with our malicious product, and I found a variable in one of the other endpoints that looks like it can be used for the main attack once our malicious product is called via GET.
I'm not entirely sure what to add to the malicious product and how it should interact with the other endpoints or how it would grab the id of the malicious product and pass that onto the other endpoint when the exploit is called.

Do we need multiple calls to the ldap using obfuscated exploit strings?


Reply

Keymer Botero
15h

Resolved
Alright, I am here to report mixed news. After much review, I have tweaked my approach to use as minimal obfuscation techniques as possible. However despite this, the section where the flag SHOULD appear is not visible in any way. This happened twice yesterday on my VMware setup on my desktop and now again on my laptop. Despite restarting the container each time and restarting the VM itself as well, I am met with the same pitfalls. Is there any way anyone could offer there insight in this matter?


Reply

Anonymous Alligator
15h

Resolved
I'm still a bit stuck.


If i'm getting the issue telling me that I need to make sure that the data is at rest, how do I discern this from the data actually not being at rest, or an issue within my obfuscation?  I've seen other comments mentioning that over-obfuscation can also cause the same message.


Additionally, is it required to leverage any other endpoints other than the 4 presented in the write-up for flag 6?  Say an endpoint from another flag?


Reply

Matthew David Macioce
15h
You don't have to leverage any endpoints other than the ones given in the write-up. I would take a listen to the office hours recording. Joel had a great point about obfuscating around the 29 minute mark. That combined with really looking for patterns/something off in the logs - should lead you in the right direction (I know that's frustrating as I'm sure you've been looking at the logs) but to Kevin's point, put in silly strings and see where they all get logged. Combining all of the tips really helped me get this flag 


Reply

Aniketh Swain
1d

Resolved
So I have inspected the logs from the POST, I see the very cool pattern to exploit and so I built my curl accordingly. But when I call the relevant GET to see if I am even able to trigger the ldap request from the data fetched, I don't see any print statements that I have in the Exploit.java file. I am checking the console.log file. Any thoughts/suggestions? I am avoiding the teapot issues so that shouldn't be an issue

Edit: Got the flag!! Ended up having an incorrect endpoint usage


Reply

Fahim Sunka
1d
Nice work! Marking resolved.


Reply

Cliff Chao
1d

Resolved
I recommend you don't start exploiting until you fully understand how to utilize the POST method, as everyone has said, the logs are the key.  There is something suspicious in there, but once you find it, it should be a EUREKA moment.. Fairly straightforward once you understand the logs.


3
Reply

Fahim Sunka
1d
Good point, in general for the flags, carefully examining the logs for hints and entry points will help significantly.


2
Reply

Yau Ming Kwan
2d

Resolved
Finally made it till the end! It's been a really tough week spending hours to get flags 1,2 and 4 and got so stuck in flag 3. Finally got flags 3, 5 and 6 in one go, inspecting the logs carefully is really the way to go.

LIGHTWEIGHT BABY!


2
Reply

Yau Ming Kwan
2d
Link to the office hour video for those who are still struggling: https://gtvault.sharepoint.com/sites/Course_cs_6035_o01_ocy-K4AbX3NT4s6GC/_layouts/15/stream.aspx?id=%2Fsites%2FCourse%5Fcs%5F6035%5Fo01%5Focy%2DK4AbX3NT4s6GC%2FShared%20Documents%2FOffice%20Hours%2FRecordings%2FLog4Shell%20Office%20Hours%20%5F2%2D20250304%5F185651%2DMeeting%20Recording%2Emp4


Reply

Matthew David Macioce
1d
Watching the video - I have input some strings into my POST call, I see where they're being logged, I guess I am just struggling how to use it to input my jndi, really no matter which one I use I seem to either trigger the teapot error (with no obfuscation), and if I use some obfuscation to get passed it, nothing happens on the servers. I can't tell if I am just using the wrong vector or too much obfuscation - I am guessing based on the comments in office hours though, I won't need to obfuscate/encode?


Reply

Anonymous Badger
1d
 Replying to Matthew David Macioce
Same thing happening to me, <redacted> but now the ldap server is not firing even though i see the exact correct malicious trigger logged after the GET call


Reply

Matthew David Macioce
1d
 Replying to Anonymous Badger
Yeah, I wasn't sure about that variable (assuming I am thinking of the same variable you're thinking of lol), I was just trying to input the jndi in different places in the POST command 


Reply

Anonymous Badger
1d
 Replying to Matthew David Macioce
Im talking about <redacted> but my server is not firing even though i can see the same valid trigger i have always used being logged


Reply

Joel M Tucker
1d
 Replying to Anonymous Badger
Watch the oversharing 


1
Reply

Anonymous Badger
1d
 Replying to Joel M Tucker
Apologies, was trying to be vague while still distinguishing from other potential red herrings


Reply

Joel M Tucker
1d
 Replying to Anonymous Badger
Not vague enough, calling out specific strategies using specific attack vectors is a bit much


Reply

Anonymous Badger
1d
 Replying to Joel M Tucker
Noted. Sorry about that


Reply

Michael Ryan Boling
2d

Resolved
I have found a pattern in one of the logs of one of the endpoints where, if the POST payload is constructed correctly, this pattern can be used to form the same malicious trigger that has been working for previous flags. I successfully do this and see the same trigger printed, but now my ldap server isn't firing? I am almost certain I am using the right strategy here (based on this thread https://edstem.org/us/courses/69023/discussion/6222726?comment=14562148 and other hints) but this is stumping me. I have triple checked for syntax errors already and this exact same trigger has worked for me in every other flag.


Reply

Yau Ming Kwan
2d
It should fire when you POST and fire again when you GET, which gives you the flag. Try not to obfuscate if it is not firing.


1
Reply

Michael Ryan Boling
1d
How would it fire when we POST? Wouldn‚Äôt that require you to set an entire field of the POST to the trigger instead of forming it to format correctly when they log their internal variable in the GET?


Reply

David Robert Nygren
1d
This is the hint I needed. Thank you.


1
Reply

Anonymous Badger
1d
 Replying to David Robert Nygren
Which hint? I am still unable to figure out why it's not firing


Reply

David Robert Nygren
1d
 Replying to Anonymous Badger
That it should fire after POST. If it's not doing that then my curl is probably incorrect. (I'm sure there's a way to do it without POST firing but knowing that it will work also if it DOES is nice to know for testing purposes). Of course, none of that will get the flag until you send the get but


1
Reply

Rakshaa Ravishankar
1d
 Replying to David Robert Nygren
I'm able to fire the LDAP iwth my POST but not any GET. am i on the right track or did I obfuscate too much>


Reply

David Robert Nygren
1d
 Replying to Rakshaa Ravishankar
I haven't got that far yet so I'm not sure haha. Sorry


Reply

Yau Ming Kwan
1d
 Replying to Rakshaa Ravishankar
Be sure you are with the correct attack vector. It‚Äôs quite obvious when you find it, and then you construct the payload to post.


Reply

Rakshaa Ravishankar
1d
 Replying to Yau Ming Kwan
I thought I found it, because it sets another variable to the same lookup in the logs. but when i try any of the GETS I get the data at rest error


Reply

David Robert Nygren
1d
 Replying to Yau Ming Kwan
I know the attack vector and can send jndi payloads through, but none of them trigger the LDAP after POST (I'm not expecting the flag at this step ofc). I think I'll take another crack at this tomorrow. I've tried no obfuscation (gets blocked), encoding, etc and nothing worked yet so we trek on later...


Reply

Yau Ming Kwan
24h
 Replying to David Robert Nygren
If you tried no obfuscation and it didn‚Äôt work out, you are probably not with the correct attack vector. Think about what is being logged, not what is being stored in the database (which will not trigger the lookup anyways).


1
Reply

Meer Ushter
2d

Resolved
So I am stuck at pretty much how others have posted on the thread ,

I am able to send my jndi through the post request (It did execute on post )
and I was able to get the jndi trigger by one of the get endpoint I can see the product.id as i have added print statement and saw it was added ,

But I still get "WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest"

I think it is coming from the data considering its part of the payload (hopefully i not revealing too much)
but even with dialing down the obfuscation I am still getting that. 

please any help on what i could try would be great I know im super close (i think )


1
Reply

Joel M Tucker
2d
Not a whole lot more help that we can give that we already haven‚Äôt in this thread and the office hours. But you‚Äôre close, keep at it!


1
Reply

Michael Ryan Boling
2d
same here


Reply

Meer Ushter
2d
I do see one of the patterns on the binding i wonder if theres something i can do i tried adjusting the payload  to match that pattern so far same issue .


1
Reply

Anonymous Badger
2d
I also found the pattern and I have constructed the payload so that when i send it their internal value will print the malicious trigger (based on this hint https://edstem.org/us/courses/69023/discussion/6222726?comment=14562148) but now the ldap server isn't even firing even though their internal variable is printing my exact trigger I have been using to solve previous flags


Reply

Meer Ushter
1d
 Replying to Anonymous Badger
so far i am using that pattern but still stuck on the same stuff 


Reply

Meer Ushter
23h
NVM got the flag , 
i guess my issue is i needed to use all of the payload and make sure how the payload is set to match your stuff , tbh i didn't even need to obfuscate  at all maybe just encode, you will know what i mean once you create that payload , there was one of the comment below that hinted, Its going to be one hell of a crazy car !


Reply

Rakshaa Ravishankar
2d
Unresolved
Does the data at rest warning mean I have at least set the malicious field with the lookup correctly? I got to the teacup message then changed one thing and the post was successful.  I see the LDAP and python server being triggered successfully too. When I attempt the diff GET requests it looks like my lookup is being retrieved from data at rest but I am still not getting the flag. Is it possible my obfuscation was too much? not sure what I'm missing here.


2
Reply

Amrut Bhalchandra Kulkarni
10h
I'm currently seeing the same error, and I used printlns to confirm that product.id did exit and it was set to the id of the malicious product


Reply

Matthew David Macioce
2d

Resolved
Running into the issue of my servers not firing, I am getting passed the teapot error though, is it safe to assume my issue is over obfuscating? I can use the GET calls, but I don't see the servers firing 


1
Reply

Bryan Curl
2d
This is where I'm at as well.


1
Reply

Joel M Tucker
2d
Take a look through the thread, this is a common one. 


1
Reply

Matthew David Macioce
2d
 Replying to Joel M Tucker
Thanks, some of the comments confused me a bit, but looked it up and seem to have my answer, appreciate it!


1
Reply

Joel M Tucker
2d
 Replying to Matthew David Macioce
awesome!


Reply

Andrew Naughton
2d

Resolved
Just got this after struggling for a couple of days. The hints in this thread are great. I'll stress that you really need to investigate the responses you get. 


1
Reply

Gantabya Kadel
2d

Resolved
Got the flag. 
Advice for folks who are stuck: pay close attention to the logs, how you are passing in that payload and even closer to how you are performing that GET. I spent all of yesterday being confused by a red herring and that too because I didn't pay attention to how I was performing my GET and why the "search" didn't "find" what was obviously there. 


1
Reply

David Robert Nygren
2d

Resolved
On one of the endpoints, I notice a random variable that, using a query, I can print plaintext to (Like in a previous flag). Is this supposed to be a distraction? 


Reply

Gantabya Kadel
2d
As mentioned down in the threads, you have more that one attack vector here but the key point is that, as mentioned in office hours, you need to get the exploit from data at rest. If you look further down in the threads, they even tell you the right sequence of reqs to make.


Reply

David Robert Nygren
2d
I know I won't receive the flag when I send in the malicious POST (thats for later at rest ofc), but should it trigger my LDAP anyway?


1
Reply

Gantabya Kadel
2d
Endorsed
 Replying to David Robert Nygren
well think about it ... all of them will trigger it the point is to use the correct one. Joel mentioned this in office hour yesterday if you watch it.


1
Reply

Cliff Chao
1d
There are a couple of red herrings in this assignment.. Once you find the attack vector it should be fairly apparent.


Reply

Michael Ryan Boling
2d

Resolved
I have obfuscated only just enough to bypass the teapot (I know this because I did multiple iterations of barely adding to the obfuscation). Additionally, I am using data at rest to inject the trigger and see that the exploit has been triggered based on logs. I am following the directions of what to do within the exploit. However, I am still getting the error: "Flag not obtained due to failed attempt. JDNI malicious trigger must come from data at rest." I'm not sure what I'm missing here? I have followed the directions closely and I am certain the trigger is coming from data at rest 


Reply

Keymer Botero
2d
Hey Michael! On the same page with you. This part of the writeup might help clear some confusion:

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

I'd definitely recommend taking a look at what kind of call you are using.


1
Reply

Michael Ryan Boling
2d
Hey Keymer, thanks for the response! I have created the record with the POST endpoint and injected the malicious trigger to one of the fields. I then use the GET endpoint that gets products by that same field because when I do that it logs the contents of the product (meaning it logs the trigger I injected). I am now at the point where I no longer see the "must come from rest data" message, I just see the a log that the product was found, followed by its information (including the malicious trigger). However, no flag was printed. I'm a bit confused as to what's happening now because there's no more warnings but also no flag. All servers are firing, bypasses working, exploit being triggered, and I followed direction for what to do within the exploit, so really not sure what I'm missing at this point.


Reply

Sean Kenneth Weber
2d
 Replying to Michael Ryan Boling
I call the email endpoint, and the exploit is performed with data at rest. I have proven that the config.properties file is being updated as well. No clue what is going on...


1
Reply

Michael Ryan Boling
2d
 Replying to Sean Kenneth Weber
Same here, and I don't know how it could be over-obfuscation because I change one thing from when the teapot protected it to barely get it to bypass the teapot


1
Reply

Keymer Botero
19h
 Replying to Michael Ryan Boling
Wow, I‚Äôm literally doing the same thing too, but maybe there‚Äôs a way to even less obfuscation. I‚Äôll take a look later today because I‚Äôve followed through the same logic and still no flag.


Reply

Amrut Bhalchandra Kulkarni
10h
 Replying to Sean Kenneth Weber
I'm in the exact same situation rn
I passed my obfuscated payload into one of the fields in POST, and the email GET logs the payload, triggers the LDAP, but I get the "needs to be from data at rest" error

Other people have obtained the flag from the email endpoint, so I feel like I'm very close


Reply

Anonymous Llama
2d

Resolved
Well this was an annoying mistake, but reminder it's "jndi" not "jndp" :D


1
Reply

Kevin Darlington
2d
Ha! These errors are more common than you think! Nice work!


1
Reply

Keymer Botero
3d

Resolved
Just figured I‚Äôd repost my question here since my original post got buried I assume.

UPDATE: So close! Just got this message 

2025-03-05 03:42:44 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

I swear I feel like I'm so close but I can see why this would not be considered Data at rest since I'm TECHNICALLY using the GET to do something for me... 

The thing that confuses me is that I‚Äôm not the one technically putting it together (if TAs know what I mean), despite the warning message implying that it is.


Any advice or idea how close I actually am? Or maybe there‚Äôs something I‚Äôm perhaps overlooking. 


Reply

Keymer Botero
2d
Considering something that I'm going to test. Similar how we had to utilize the properties file before in a previous flag, I'm noticing that my product.id is not getting read when running the requests over and over. I only seeing the usual customer.service.email, topic.name, and rating. Is this related to how we should proceed?

NOTE: I am only aware that altering customer.service.email is not a requirement for this flag. 

Just noticed this part of the write-up that may have been mentioned previously but I feel its important to mention:

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

EDIT: New question among my other questions:
I'm noticing my product.id getting logged multiple times. As Kevin mentioned during Office Hours, I know we need to append it as the writeup was intended to have this detail but does not at the moment. Would that be a problem though if it were logged multiple times?


Reply

Keymer Botero
2d
Just as an update to where I'm at, I found out the pattern left behind in the logs when POSTing to the server and now I also noticed a parameter when trying to trigger the LDAP call with the malicious record. 

Just to make sure I'm narrowing down my options, is that something we can leverage? I feel like I used everything I can with and still nothing. Insight/Advice would be very much appreciated in the matter.


1
Reply

Anonymous Badger
2d
are we not supposed to put the trigger in one of the fields of the POST call and then use a GET call (by that same field) to get that record?


Reply

Keymer Botero
2d
 Replying to Anonymous Badger
That's what I'm trying to do and I've performed other variations and still no luck. I swear, I feel like I've tried everything BUT the one solution that works. There's probably way more I'm not seeing but man, this flag knows how to put up a good challenge.

Been using roughly the same java payload as flag 3 & 5 and made sure to compile each time before I fire it away. 

EDIT: Just going to tune off again for work tomorrow. If anyone has any nuggets of wisdom to share, it would be greatly appreciated. Here's what I know from the writeup, comments on this thread, and from Office Hours:

Data At Rest refers to the data being stored somewhere and not actively being used. In the context of this flag, we need to stash our ldap call inside the server somehow

There's a vulnerable pattern when posting. I won't say exactly what it is but you can use it to your advantage. Be as creative as you can with it but make sure not to overdo the obfuscation.

Recall that the writeup has yet to be updated. We need to find some way to append the malicious record as 'product.id=<MALICIOUS_RECORD>' and make sure that it persists.

The customer.service.email is not relevant to this flag. As Joel mentioned, it is a red herring.

As mentioned in the hint 
"Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag." If you use the wrong call, the flag will not generate.

I know I've mentioned this a ton, but I am sincere with it, any tips/advice are massively appreciated.


1
Reply

Anonymous Badger
2d
 Replying to Keymer Botero
is the whatDoIDo also a red herring?


Reply

Keymer Botero
2d
 Replying to Anonymous Badger
I'm trying to narrow that down, so I'm not sure to be honest..üòî


1
Reply

Claudia Araceli Garcia
2d
 Replying to Anonymous Badger
Also wondering the same 


3
Reply

Joel M Tucker
2d
 Replying to Keymer Botero
Between office hours and the thread, there isn't a whole lot left to give. You're close! Taking a break is a good idea when you get to stops like this


1
Reply

Matthew David Macioce
2d
 Replying to Joel M Tucker
My two cents (probably wrong) but my understanding is that it probably is a red herring because if we have to append a jndi to that variable that would not really be using data at rest, I think? I feel like we are simply (relative here lol) supposed to use one of the GETs supplied to us and that will trigger our jndi that we included in the POST when we created a new record

again, this could be off-base just my current thoughts while trying to work through this problem


Reply

Cosdyn Akers
2d
 Replying to Matthew David Macioce
I agree with this take on the parameter.  I spent a few hours playing around with it, there really isn't a good way to abuse it for our intents and purposes


1
Reply

Keymer Botero
1d
 Replying to Cosdyn Akers
Are you two sure? Because when retrieving values, it has to follow the concept of 'Data at rest'. Yes, the exploit has to come within the database, but also utilizing the suspicious parameter given and leveraging that with the pattern found when posting should theoretically perform the same Data At Rest exploit as it is something that is by the server, rather than us directly performing the needed ldap call. 

EDIT: I bring this point only because I've tried utilizing the given pattern from the POST, utilized the email endpoint described in the writeup, and the ID endpoint and still nothing. I've already posted about both errors and I can see the inner workings of both and why certain things are happening. Although the following hint mentions:

"Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag." If you use the wrong call, the flag will not generate.

Using this hint, we can narrow our search which is why I'm lead to believe this suspicious parameter is something of interest.


Reply

Rakshaa Ravishankar
1d
 Replying to Keymer Botero
I think I'm at the same place as you - my POST triggers the LDAP and I see a variable being populated with the lookup, but none of the GETS give the flag even though they spit back that value with the lookup. Isn't that what data at rest is supposed to mean, or am I wrong?


Reply

Rakshaa Ravishankar
1d
 Replying to Rakshaa Ravishankar
also, the office hour said for the data at rest error, potentially obfuscation causes an issue for it to be able to be triggered through the logs. But we do need some obfuscation in the first place for the POST to work, so that is why I am stuck.


Reply

Keymer Botero
1d
 Replying to Rakshaa Ravishankar
Noted. Perhaps there's even less obfuscation I can do. Or different way.


1
Reply

Rakshaa Ravishankar
1d
 Replying to Keymer Botero
that's what I'm looking into as well.


Reply

Matthew David Macioce
16h
 Replying to Keymer Botero
Sorry just saw this reply, Idk for certain if it's a red herring, but FWIW I was able to find the flag without using that variable 


Reply

Keymer Botero
16h
 Replying to Matthew David Macioce
Thank you so much Matthew, this is actually huge. Honestly, I feel like I understand the general concept Joel and Kevin are imparting on us regarding this flag. I think at this I need to somehow obfuscate even smaller parts of the exploit, even I'm using just enough to get past the teapot messages. I hope I can report back with something more positive but at very least, it's like the ol' saying 'It ain't over til its over.'


1
Reply

Keymer Botero
1d
I swear I'm on the edge of my seat here

2025-03-07 00:04:21 [ProductService.java:76] WARN Flag not obtained due to failed attempt. Valid product.id for product not found inin config.properties.

Just to make I'm on the same page, the product.id is just the actual ID of the product right? There's no required appended text or prefix that I am missing here? I can confirm that I am spelling 'product.id' correctly. When reversing shell connection to target, I can confirm that the format has been followed, no extra spaces and so far. Still testing but will report back when I finish checking through my results. 

EDIT: Back to the same error üòü:

2025-03-07 00:11:13 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


Reply

Keymer Botero
1d
Update: Tested what I could, nothing in my known bad actor list triggered that intriguing warning message.. I'm going to shutdown my VM client this time, rather than suspend and try again tomorrow. If anyone has something to offer with my previous questions, it would be greatly appreciated. I know I'm so close and I understand the proper assembly, but this flag man..  This post is getting really long-winded so will make a new one tomorrow if I have any more spoiler-free findings or questions.


Reply

Rakshaa Ravishankar
1d
I got the same error for valid product id not found, do you think that's further along or going backward?


Reply

Keymer Botero
17h
 Replying to Rakshaa Ravishankar
I think this error comes up when either the product.id is not appended into the config.properties file or if the product.id does not relate to a malicious record.

Just had an idea though, is the SQL behind the screens 'putting the pattern together'. The writeup mentioned using the appropriate GET endpoint but I'm trying to be as open as I can with other possibilities.


Reply

Cheng-Kai Zhang
3d

Resolved
I am kind of not sure it's me doing the wrong way or something else goes wrong...

i first use method 1 to exploit, and see the data at rest warning

Now I try to follow the author intention, fill in the way i think it want me to, through the screen I feel I do it right, but the server become extremely slow, GET and POST request need ~5 minutes to finish and my exploit didn't be triggered


Reply

Cheng-Kai Zhang
3d
interesting... finally got the flag and the frozen behavior seems due to the logic in server side. It turns out my input has minor error and once I change that it immediately run smoothly


Reply

Ashutosh Agarwal
3d
Nice work!


Reply

Shabiha Sultana Setu
3d

Resolved
I'm getting confused about the triggering process. If I send via email it says should be triggered via LADP but which parameter should I look for?


Reply

Joel M Tucker
3d
We covered Flag6 quite a bit in the office hours last night. Might help with this


1
Reply

Ramoya Grandison
3d
Has the link been posted? Not seeing it


Reply

Gantabya Kadel
3d

Resolved
I'm at a very confusing juncture. The emails I set look to be overwritten to default value when I get all the products. Then, if I try to get product by the email customerservice@gatech.edu 
the it just returns and empty []. I'm not sure what's happening here, could someone shed some light? Thanks.


Reply

Gantabya Kadel
3d
yup confirming, the email just auto changes to default regardless of what you place there.


Reply

Gantabya Kadel
3d
I have stopped and restarted the container several times but the email change doesn‚Äôt persist. I was actually able to query based on email prior to when I stopped the container first time around


Reply

Seth Hunter Hemphill
3d
 Replying to Gantabya Kadel
The email being changed might be a red herring. Post the example email they give you and see if you can query it regardless of if that example email appears different in the product list.


Reply

Joel M Tucker
3d
 Replying to Seth Hunter Hemphill
customerservice@gatech.edu is the default email that gets injected by the system. This doesn't live in the database, hence querying by it doesn't return results. 

It's a red herring for this flag


4
Reply

Gantabya Kadel
3d
 Replying to Joel M Tucker
I‚Äôm not querying by this email. 
What I‚Äôm saying is that for some reason after restarting the container my post request just does not store the email value in the db. 
And if I pull all of the records the email shown is that default email. 
I‚Äôm fairly certain that this is not expected behavior ? 


Reply

Gantabya Kadel
2d
 Replying to Gantabya Kadel
nvm I got the flag this whole question is moot. The query didn't give me anything because I forgot that email was being queried via query param and obviously encoded values change there .... üòî 


1
Reply

Gantabya Kadel
3d

Resolved
is it a good sign if I'm getting a tea pot error because the body for my post contains ip pattern ? 


Reply

Keymer Botero
3d
Keep charging forward! Use the techniques you've learned in other flags to bypass the set restrictions! (Vague due to policies!)


Reply

Maxim Olatoye
4d

Resolved
If you are stuck on 'Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest' the reason might not be obvious. I kept running into this message simply because my payload was over-obfuscated, even though it worked for previous flags. If you're facing the same problem, try using minimal obfuscation, just enough to bypass the teapot.


6
Reply

Joel M Tucker
4d
Yep. Good tip!


Reply

John Wyatt Gamble
4d
This is frustrating. I am definitely calling my exploit from data at rest but keep getting this error.


3
Reply

Sean Kenneth Weber
4d

Resolved
When fetching a single product by record ID, will leveraging query parameters work? I am leveraging query parameters, confirmed that the config file is being updated with the product ID that I am calling the GET method with, and confirmed that the config file is only being updated (not overwritten). Would the reason for this be because a query parameter does not count as "data at rest"?


Reply

Joel M Tucker
4d
You can trigger the call using several methods and strategies used in previous flags. 
But you won't get the flag unless you trigger the call from data that has been persisted (data at rest)


1
Reply

Tosin Ajayi
4d

Resolved
is this part of the log useful?

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.


Reply

Joel M Tucker
4d
yep, this is useful

See https://edstem.org/us/courses/69023/discussion/6222726?comment=14565084


Reply

Tosin Ajayi
4d
Thanks for your response. Just 3 follow up questions - I see a part in the task that says "You will have to inspect the logs of each of the endpoints to come up with a successful attack strategy." 
Q1: Are we to run all the 4 endpoints and inspect their logs or specific end points?
Q2: What parts of the logs should we focus on being that the logs are much?
Q3: My LDAP server is on this path /home/log4j/Desktop/log4shell/target. I wanted to be sure that it is in order?


Reply

Kevin Xia
3d
 Replying to Tosin Ajayi
1. Yes. It‚Äôs recommended to look at all of the requests and their logs.
2. Focus on the things that can be exploited; at this point on Flag6 you should be able to determine which log patterns are problematic.
3. this can be answered in the setup docs i think


Reply

Joel M Tucker
3d
 Replying to Kevin Xia
these tips ARE useful, thanks


1
Reply

Gantabya Kadel
3d
Joel, your response here is confusing. 

You had said we could ignore this warning perviously here ? 

https://edstem.org/us/courses/69023/discussion/6222726?comment=14565084

or am I just not reading this right ?


Reply

Joel M Tucker
3d
 Replying to Gantabya Kadel
hm, you're right Gantabya, my mistake. This error can be ignored.


Reply

Ramoya Grandison
5d

Resolved
Day 4 and counting‚Ä¶..so my Post server hits successfully, and then when i run the email endpoint the server hits, it says JNDI has to be done at data at rest. Then i go to the other get, and the server hits again but no flag - only the irrelevant error. 

What am i missing? Would the Post fire if my jndi was not done correctly?


Reply

Joel M Tucker
5d
Make sure the data at rest is correct and avoid overdoing the obfuscation.


Reply

Ramoya Grandison
5d
When you say make sure the data are rest is correct, do you mean am i getting the stored email value i set in the beginning? If so, the emails are the same


Reply

Joel M Tucker
5d
 Replying to Ramoya Grandison
I mean the call should be triggered by the data at rest, if it is not well formed it won't trigger the ldap call. Additionally, if there is too much obfuscation, it won't trigger the call


Reply

Minh Giang
4d
Think about it like this, there's something else that is presented in the logs that share something similar to your injection. Think about how you can manipulate your post data to match it.  


4
Reply

Denis Kasapovic
5d

Resolved
I just want to make sure I understand the order of things:

       1.Post to retrieve id and create payload.

       2.Then I compile the Java file? 

            a. I am testing with it compiled and I am seeing my payload

            b. I am testing not complied and getting a "foo" message.

Seems the 1st route the code runs, but there is no flag. I guess this makes sense since how would I know the product ID.  

2nd route I am unable to get to run since the code is not compiled until after I retrieve the product ID. I am leaning towards the 2nd route since the flag is supposed to be retrieved with a GET method. So, does that mean I can ignore the ‚Äúfoo message‚Äù and continue looking for the GET method?


Reply

Joel M Tucker
5d
I'm not completely getting the question here, but you'll need to trigger the flag with data at rest, meaning that data will need to be saved first. It will take a couple of curl calls (one POST and one GET) to get the flag


Reply

Denis Kasapovic
5d
Ok, I think I was wasting time trying to figure out why I was seeing the "reference class foo" error.  And that was due to not having the exploit compiled prior making the POST call. Seems like I can ignore and move on, and try finding the 2nd  GET call to return the flag.


Reply

Nicholas Angel Bear
5d

Resolved
Just got this flag, and it wasn't too bad! It builds on what we previously did for Flag 4 and Flag 5. I did not use obfuscation, but I did use encoding.

As many have mentioned, doing a single POST request and studying the log output helps a lot. See if there's anything that reminds you of the previous flags for constructing your payload.

Once that's done, finding the endpoint to grab your persisted data is relatively easy since we have a small set of APIs to use.


4
Reply

Ashutosh Agarwal
5d
Nice work!


Reply

Shimin Zhang
5d

Resolved
Finally solved it... If you‚Äôre stuck like I was, don‚Äôt make the same silly mistake: you need a GET request to retrieve the flag! Even if your POST triggers the exploit, the flag won‚Äôt appear until you fetch the data.


4
Reply

Kevin Darlington
5d
Nice work!


Reply

Ruangsak Patomwong
5d

Resolved
I can trigger the exploit from rest data but the flag is not generated.


Reply

Ruangsak Patomwong
5d
there is no flag generator for my expected GET endpoint but I think there is one endpoint that can trigger the data from REST


Reply

Ashutosh Agarwal
5d
You'd need to use the correct GET endpoint to generate the flag. 


1
Reply

Kevin Darlington
5d
You cannot get this flag the same way as the other flags (Using REST). You need to craft your attack in a way that when your data is retrieved from the backend it triggers the exploit. 


1
Reply

Ruangsak Patomwong
5d
Finally got the flag!!! If the script is execute when POST then don't worry, just figure how to. make it execute with the right GET endpoint.


Reply

Kevin Xia
5d

Resolved
is there a way to programmatically set the malignant product id or are we supposed to hardcode it in our java class?


Reply

Rahul Nair
5d
hardcoding will get the job done


2
Reply

Kevin Xia
5d
yup thanks, got the flag


Reply

Ramoya Grandison
5d

Resolved
I got my GET to run and trigger the server listening but it still doesn‚Äôt give the flag so I am assuming the issue is where I am injecting for post. Just to clarify, the post when successful should also trigger a 200 on the server? And outside of the Id, am I expected to include that other field in my curl? 


Reply

Kevin Darlington
5d
Yes that would be my guess. I would strongly recommend playing with the POST data with plain old strings and see how they map to the other endpoints. 


Reply

David Song Huang
5d

Resolved
I have an idea of which GET request to call to get the exploit to run, but am having trouble setting the field I need to query for this to happen. Is there any resource on how to accomplish this? The field I'm trying to set and query keeps getting reset to the default.


Reply

David Song Huang
5d
Nvm. I solved it. Hopefully this is vague enough but if you get to this step, understand how URL encoding works. 


Reply

Owen Duvall
6d

Resolved
I'm running into an issue where a certain POST request and certain GET requests are taking forever to run. Restarting the container doesn't seem to fix it, and neither does restarting the VM. I ran the top command to look at the metrics of the currently running processes, and it doesn't seem like anything is taking significant CPU or memory resources. Does anyone have any insight as to what could be going wrong here? I feel like I'm close to getting the flag, but this is making it difficult to tell.


1
Reply

Robert Morgan Gryder
6d
Are these requests running exploits? Maybe your Java code is running indefinitely/stuck in a loop and blocking the request from completing?


Reply

Owen Duvall
6d
That's the idea, but I'm not seeing any requests coming through on the LDAP server either, so I don't think the code is being run.


Reply

Joel M Tucker
6d
You can post privately with the screenshots of what you're doing. This is the second time we've heard this, could be an edge case.

The general advice, however, would be to restart the container. It could be that db connection pool is full and connection requests are timing out if you're hitting it too much


2
Reply

Owen Duvall
6d
Sounds good, thanks. I'll make a private post. 

I suspect that may not be what's happening here. Even if I restart the container, the requests I make still take a long time to execute.


Reply

Robert Perry
5d
I'm running into this issue as well.


Reply

Joel M Tucker
5d
 Replying to Robert Perry
make sure your value for price in the form data is an integer. Avoid using decimals here


3
Reply

Alexander Rodgers
4d
 Replying to Joel M Tucker
omg I was running into this issue for a while. Changing to an integer fixed it for me as well.


Reply

Le Tao
6d

Resolved
Both the POST endpoint and two of the GET endpoints (except for the sole one that throws the error: the customer.service.email property is not in config.properties or overwriting file instead of updating it) will reset config.properties file every time they are called, due to not inputing an exploit payload or doesn't match the keyword expected by the project . I verified that the file gets updated with the product.id and sets customer.service.email to example@example.com via the sole GET endpoint. I also checked in root mode with Flag2 to ensure the file isn‚Äôt reset. Then retrieved the result by email endpoint, but it only shows that the record was found.

I thought I share the same points with this useful comment:

https://edstem.org/us/courses/69023/discussion/6222726?comment=14468963

But since I didn‚Äôt capture the flag, I think I might be wrong and on the wrong track...


Reply

Joel M Tucker
6d
So this is a gap with our service. Thank you for bringing it up to our attention. 

Prior to this semester we used the /products endpoints for Flag3 but that has since moved to /cartoons endpoints. We missed removing this error logging flow. 

The error "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties or overwriting file instead of updating it" error isn't relevant for Flag 6. You can ignore this.



4
Reply

Le Tao
5d
Thank you for clarification! The product.id triggers the flag. If the email isn‚Äôt modified in config.properties, it resets to the default email with each request except the post one. How the new added email be retrieved? (Its id is exactly the written product.id)

I also saw your reply below this comment. Perhaps I missed something. I'll have a review.

-----------

Finally captured the flag. Just a heads-up: the email in API response is a "fake" one (default email). DO NOT try to make API return the correct inserted email.


3
Reply

Ashley Tanner
5d
I definitely feel like this comment should be pinned because this error threw me for a loop for 2 days.


1
Reply

Joel M Tucker
5d
 Replying to Ashley Tanner
I can't pin comments but feel free to link if you see anyone else asking about this


Reply

Ramoya Grandison
6d

Resolved
I just have one clarifying question, for my exploit file, is the only thing being added the product.id or do we also need to add something for the email?


Reply

Ashutosh Agarwal
6d
only the product.id property needs to be added in the config.properties file.


2
Reply

Swapnanil Ray
6d

Resolved
Here's my two cents after spending a day on this:

Make sure you do a post request just to test how is it working. Understand the logs very well. What is happening to the data, that you just posted? Is something happening to it? 

Once you identify a pattern, beautifully design the payload! So much so, that this would probably be the craziest car to exist üôè 



3
Reply

Van Hien Tran
5d
Hi, I think I got that POST part and design the payload to insert my LDAP. However, after that when I trigger with GET endpoints, nothing happened. I observed there is a GET endpoint with suspicious variable but I still don't know how it's related to the data at rest. Can you give any hint about the GET endpoint to trigger? or both will work fine if my POST payload correct?


Reply

Van Hien Tran
5d
I reached to the point when I curl the specific GET endpoint, it logged the LDAP server. However it seems not trigger it.  Any idea


Reply

Swapnanil Ray
5d
 Replying to Van Hien Tran
Your JNDI lookup worked, but the flag did not generate, is that what you mean? Are you sure, your exploit is doing what is expected from it?


Reply

Van Hien Tran
5d
 Replying to Swapnanil Ray
I mean I can see the LDAP server url got printed in the log. However, the server is not hit.

[UPDATE] i got it thanks


Reply

Amrut Bhalchandra Kulkarni
11h
This is where I'm at

Mind giving some vague sagely wisdom?


Reply

Keymer Botero
6d

Resolved
Okay, so not sure if I am missing anything but, aren't we addressing product.id? I'm receiving the following warning message:

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.

Last I checked according to the writeup, we were updating the product.id into there as an addition property.
Some comments are suggesting to another GET endpoint. Not sure which one yet but will report back if I find anything.
Could someone clarify this? I feel so close! 
It's really late, I'm going to hop off for now, but any intervention to clarify things would be much appreciated!


Reply

Thomas Leopold Kroll
6d
Endorsed
I wouldn't read too much into that error, I got it on a lot of my failed attempts. The endpoints they give you are all you need. 
Have you watched the office hours? It saved me from thinking too much into it


3
Reply

Keymer Botero
6d
I see, thank you for actually coming back to this thread and letting me know Thomas. I‚Äôll check out the office hours as soon as I can and update this post ASAP after that.


Reply

Joel M Tucker
6d
You can ignore this error for Flag 6. It doesn't mean anything


Reply

Keymer Botero
3d
Thank you Joel and Thomas. I'm noticing a couple things after rewatching Office Hours 1.

After carefully inspecting rather the log, I'm seeing a new variable that I believe Minh's comment was referring to. Tried messing with that and got nowhere as there is an extra colon that I can't seem to get rid of. 

Just as additional notes, I am using as minimal Obsfucation techniques as I can and I understand that the attack should be happening on the data at rest. I am going to re-read some other posts before Office Hours 2 but any other ideas?

EDIT: Just to make sure I am understanding the directions properly, we need to overwrite the existing product.id of our malicious 'vehicle' with any id that we set ourselves? Having trouble understanding this part.


Reply

Keymer Botero
3d
 Replying to Keymer Botero
UPDATE: So close! Just got this message 

2025-03-05 03:42:44 [ProductService.java:73] WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

I swear I feel like I'm so close but I can see why this would not be considered Data at rest since I'm TECHNICALLY using the GET to do something for me... 

The thing that confuses me is that I‚Äôm not the one technically putting it together (if TAs know what I mean).

Going to tune off for work tomorrow but any advice or idea how close I actually am? Or maybe there‚Äôs something I‚Äôm perhaps overlooking. 


Reply

David J Munoz Jr.
6d

Resolved
Just got the flag and wanted to summarize some hints that helped me to achieve this in case there are still others that are struggling.

1. Check the logs for your post request, this can provide super valuable information on proceeding with the exploit: https://edstem.org/us/courses/69023/discussion/6222726?comment=14478856

2. Construct the payload, (we've seen this in previous flags)

3. You can refer to this post for the java code: https://edstem.org/us/courses/69023/discussion/6222726?comment=14534876

4. There are many posts saying the same thing such as if you receive this email error, try the other GET endpoint. This post in particular helps when you do find the right endpoint: https://edstem.org/us/courses/69023/discussion/6222726?comment=14544550

Hope that helps without sharing too much (this post does some very vague as with most other posts providing hints) but if you stick to these points, you will be able to get the flag.


3
Reply

Anonymous Mouse
6d

Resolved
I read what other say about this property but I'm at a loss. "WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it."


Reply

Corey Cunningham
6d

Resolved
I am creating a product with an email, when I create that product the log value results in my exploit being run.

The same exploit should be run when I get the product by email due to the way things are being logged.

however when I call ?email=<the email I created> I just get an empty list, despite that the return value of when I create the product has the email I created.

I am encoding the email param query and it is showing in the logs to be what I think it should be


Reply

Corey Cunningham
6d
lol I'm so dumb, was missing a character on my email query param


Reply

Matthew Joseph Claar
6d

Resolved
Can someone add clarity as to why the LDAP call being made as soon as the initial record is created is not considered data at rest? Done with this flag, but not quite grasping why Create record --> record stored & processed --> LDAP call != restful, but record stored --> user makes query --> LDAP call IS restful. Thanks!


Reply

Jesse Lee Dotson
6d
This is just my impression from doing the assignment but I think it has to do with the fact that the exploit exists inside the system in an inactive state, ie it's "resting."

 A significant implication is that its activation can be disconnected in time from its insertion, and in our case the activation is a normal act. So if an update was made that made it impossible to successfully inject an LDAP call when creating a record, it might not prevent that exploit from executing. Or it could be laid as a trap, and execute when some specific victim does an innocuous task.


Reply

Joel M Tucker
6d
Yeah this is right. ‚ÄúData at rest‚Äù refers to data that has been persisted to some form of storage (in this case a database). This is opposed to ‚ÄúData in Transit‚Äù which would cover data being sent as an http request for example.

Triggering of the ldap call for most of the flags in this project would be ‚ÄúData in Transit‚Äù because you are introducing a malicious payload and triggering an exploit with data in motion from an http request.

This flag focuses on the scenario of what happens when your system is logging data, not from a request coming from the outside, but from a ‚Äútrusted‚Äù database? We often tend to guard the controllers and entry point layers very carefully, validating xss and http headers and params. But there can also be risk from malicious data that has already been introduced and is just sitting in storage ‚Äúat rest‚Äù.


1
Reply

Thomas Leopold Kroll
7d

Resolved
I'm curious what the clerk at DMV would say if I tried to register this car. 

I agree with the other poster that the method for this one was interesting!

I don't think I have anything to add for hints, but the office hours helped to keep me from going down a crazy path.


1
Reply

Robin J Hicks
7d

Resolved
Friendly reminder: if you're confident you have everything in the right place with the right values and you're still not getting the flag, restart your container. I spent hours debugging a working exploit just to learn it was something hosed up in the lab environment. 

Also, remember the IDs do not persist a restart so you will need to re-insert your record before re-running the exploit.

Other than that annoyance, very interesting take on the exploit!


1
Reply

Reese Michael Olsen
3d
I encountered something very similar that displayed an extensive String traceback. Restarting the container worked for me. 


Reply

Robert Birk Hughes
1w

Resolved
I am having a similar issue as someone below.  I keep getting:Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

However, this is coming from one of my curl commands at one of the GET endpoints, not the post.  The jndi lookup is correctly happening from the data that is at rest when I use the GET endpoint, and the config file properties are properly being updated.  Am I missing something here?  I don't understand the error message in my context.


Reply

Robert Birk Hughes
1w
I am 99.9% sure that I am using the correct vector and storing the exploit properly in the database.  I am getting numerous calls to my exploit script when I curl the GET endpoint and the properties is being properly updated.  Yet I still get the "must come form data at rest" error even though my exploit is coming from the data that is at rest in the database and nothing I put into the curl command


Reply

Robert Birk Hughes
1w
Finally figured it out.  <redacted> The fact my exploit was called from a GET method and did what it was supposed to do, yet not give me the flag, seems contrary to the instructions on the flag and was a massive headache, and clearly not just for me.


Reply

Joel M Tucker
1w
 Replying to Robert Birk Hughes
We'll take this feedback and see how we can make the logging more clear but still keep the spirit of the challenge. Part of the learning is understanding why obfuscation is what it is and when and how it is used.


1
Reply

Rex Kovara Belli
2d
 Replying to Joel M Tucker
Any tips here?  I'm at the same spot, and it's frustrating to be fighting the tooling and not the material.

Edit: Got it.  If you're stuck at the same spot, see comment here: https://edstem.org/us/courses/69023/discussion/6222726?comment=14472334


Reply

Brandon Shreve
1w

Resolved
The derp approach saved the day :) Thanks for the office hours!  


1
Reply

Kevin Darlington
1w
Nice work and no problem! :)


Reply

Harry Arther Staley
6d
DERP_x approach for the win.

Also logging "TOTAL PWNAGE, I LOVE IT!!!" helps me. 


1
Reply

Robert Maness
1w

Resolved
Just got this one. Personally, I think this is the coolest and most satisfying flag of the week. Thought I was insane when I noticed the attack vector, but HOLY SCHNIKES it worked. 

My tips: 

Don't worry if your email value keeps getting reset to the default - if you make the proper call searching for the one you originally set, it will still work. 

If it feels like your POST attempts are getting blocked by endless teapots, I suggest reassessing your approach. You're probably headed in the wrong direction like I was. 

Pay very close attention to the way that the logs handle your record's values as you play with each of the endpoints. There might just be a creative way you can sneak your exploit in there. 

If your code looked anything like mine for the previous flags, you should be able to get away with basically copying over your Flag 5 script and changing as little as one line. 


2
Reply

Anjali Chablani
1w
Many thanks Robert. Your tips made a difference. I got the flag. 


Reply

Ashutosh Agarwal
1w
Nice work! Thanks for sharing!


Reply

Andrew Naughton
2d
really got me over the finish line here. thanks Robert!


Reply

Jake Leggore
1w

Resolved
Hint: Find the least amount of obfuscation you can use to bypass the checkers. For some reason, too much obfuscation (even if it works) will prevent you from getting the flag.


3
Reply

J. Kendall Miller
1w

Resolved
I believe I am understanding data at rest. I have persisted the data and the trigger, and run the get request but still get. Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


Reply

Anonymous Barracuda
1w
I have been stuck at the same point for like 4 days.


Reply

J. Kendall Miller
1w
Yah. Some people say it isn't important if the POST data insert also triggers the exploit, as long as the GET triggers it. Don't know if that is a key or not, to get the POST to not trigger and only the GET, but I don't think that is possible..


Reply

Joel M Tucker
1w
 Replying to J. Kendall Miller
The POST should not be triggering the attack. The point is for the trigger to be coming from data that has been persisted


Reply

J. Kendall Miller
1w
 Replying to Joel M Tucker
Turning off the listener will resolve that for the POST, so it doesn't trigger, and will be at rest, but issuing the GET doesn't get the flag. Same error as above.


1
Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
I also see that some say that the exploit runs a bunch of times, but it shouldn't affect whether you get the flag, but others say that you need to keep it from running so many times. Confusing! My thought is that none of those things should be a factor in getting the flag.


Reply

J. Kendall Miller
1w
 Replying to J. Kendall Miller
Does anyone have a different process to getting the flag? Seems like I have tried everything.


Reply

Robert Birk Hughes
1w
 Replying to Joel M Tucker
My POST is not triggering the attack, only the GET, yet I am still getting the same error message as above


Reply

J. Kendall Miller
1w
 Replying to Robert Birk Hughes
So I was able to finally get the flag. This morning I spotted a pattern of where to inject my exploit. Take your time and get it right. The way I did it, my final POST request was not obfuscated, I just needed it to fit the pattern. My GET request needed URL encoding to not get an error. I hope I'm not sharing too much, but enough to help you and those that are struggling. I still think the POST request triggered the exploit, but the GET request finally gave the flag after a couple tries.


6
Reply

Linh-Dan Le
1w
 Replying to J. Kendall Miller
Second this! I didn't use any obfuscation for my post and figuring out the correct pattern was the gist of this flag. 


Reply

David Robert Nygren
1d
 Replying to Linh-Dan Le
Confused what you mean by pattern. I looked at how different things are stored and see no pattern.


Reply

Linh-Dan Le
1d
 Replying to David Robert Nygren
Maybe try looking at the server logs for one of the commands, and see if you can find a variable there that has some pattern (concat).


Reply

Anonymous Badger
2d
 Replying to J. Kendall Miller
I have done this exact thing and injected the same working malicious trigger but now my ldap server isn't firing? I am almost 100% certain I found the internal variable where we just need to use its pattern and make our POST req params fit the trigger but im not sure why the server wouldnt be firing now with the same trigger 


Reply

Linh-Dan Le
1d
 Replying to Anonymous Badger
My guess is you're not formatting the url correctly, you might need an extra "$"


Reply

Anjali Chablani
1w
I am really stuck for the last 4 days. Pretty much everything I have tried is also getting resolved in POST method. The JNDI command is getting resolved in POST. What am I missing here? Turning off the listener during POST makes it not trigger. However  executing GET command does not result in obtaining the flag. I am getting an message "Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest." Any pointers appreciated. 


Reply

Robert Maness
1w
I'd suggest going back through the endpoints and looking specifically at how the logs are handling/outputting the record values that you created. Is there something you notice? Maybe some way you could sneak your LDAP call in there?


Reply

Daniel Alexander Moreno
1w

Resolved
Don't do what I did as I apparently had the right answer two days ago. Here's my two hints

Just because a GET endpoint mentions the flag, doesn't mean that it is the right endpoint. Look through all of the logs for all of the endpoints the instructions mention.

Before you edit config.properties, make sure you print it out and replicate the formatting properly because that was my issue for a very long time.


1
Reply

Joel M Tucker
1w
Great tips


Reply

Anonymous Kudu
1w

Resolved
From the setup instructions I have ran this in the terminal:

cd ~/Desktop/log4shell/target

java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer "http://172.17.0.1:4242/#Exploit"
I see that its listening but I never seem to get any logs to come through? is this typically normal? I feel like I should be seeing logs come through here when commands get sent to the ldap server.. wondering if I'm on the wrong track with this one and will only see logs come through on tail -f cs6035.log


Reply

Kevin Darlington
1w
You will only see this server log when your jndi request fires. If your jndi request isn't correct, it won't log anything. 


Reply

Cooper Michael Simpson
1w

Resolved
I feel like I know what to do but I keep getting

`2025-02-27 07:47:16 [ProductService.java:41] WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.`

And cannot update my config.properties. How can i overcome this? Spent sooo many hours on this now T__T


Reply

Anonymous Barracuda
1w
Try using the other get endpoint instead.


Reply

Cooper Michael Simpson
1w
YES, got it. idk why the other didn't work though..


Reply

Linh-Dan Le
1w
Interesting that only one endpoint works but not the other. 


Reply

Benjamin Burrell Weaver
1w

Resolved
What issues can cause my LDAP server to be hit but not ping the http server on the same port?
I can get the LDAP server to be hit both in POST and in GET but neither on triggers the exploit.


Reply

Kevin Darlington
1w
My guess would be your payload isn't correct. 


1
Reply

Benjamin Burrell Weaver
1w
You would be correct, make sure to add /Exploit to the end of your payload ha


1
Reply

Kevin Darlington
1w
 Replying to Benjamin Burrell Weaver
Nice work! Yeah, that is very important as it is what you are requesting the ldap to get for you :)


Reply

Sean Chen
1w

Resolved
interesting one


2
Reply

Sean Chen
1w

Resolved
did anyone face the issue where the POST call freezes? It doesn't seem like entering in the info any other way triggers the exploit.


1
Reply

Sean Chen
1w
a slight update. Just waiting here thinking, the traces are slowly showing up. still odd that entering it this way spends so much more time than normal. my computer cpu and memory usage didn't spike


Reply

Anonymous Tapir
1w
The same thing happened to me. Some GET requests are just stalling with no responses as well.


Reply

Joel M Tucker
1w
There shouldn't be any intensive processes. It's a simple crud application. Try restarting the container


Reply

Matthew Ruiz
1w
Any updates on this? I'm running into the same issue


Reply

Anonymous Red panda
1w
I ran into this same issue as well. I'm not 100% sure this was the cause but I was playing around with how I was obfuscating things and one of my POSTs slowed down to a crawl and it never recovered after that. I ended up just rebooting the VM and restarting everything. 


Reply

Owen Duvall
6d
I'm running into the same issue. POST and certain GET requests are taking forever to run. Restarting the container didn't seem to fix it. From looking at the running processes, it doesn't seem like anything is taking significant CPU/memory resources. Did anyone have any luck with getting around this? 


Reply

Justin Cong
4d
Thanks for posting this, glad it wasn't just me. Still trying to get past it (restarted container as well), and I was trying to find other places for the exploit before I saw your post


Reply

Cheng-Kai Zhang
3d
did you finally pass it? tried restart container but it stays the same for me...


Reply

Michael Joseph Hearn
1w

Resolved
I spent all day on this flag...our hacks have looked like !((STUFF:STUFF2:STUFF3))  etc. If you don't have STUFF unmodified stored in the database it will fail. It's not possible to get this flag otherwise.  


1
Reply

Bari Belhadj
1w

Resolved
I got the flag but I honestly don't understand why the more obvious way doesn't work. It does the same exact thing that the intended method does, yet it won't work?

I think the message "must come from data at rest" and the emphasis on "data at rest" is just confusing and is throwing everyone off. If a new product is created with the payload, isn't that basically "data at rest" ? if not, what is the definition of "data at rest" exactly? 

To everyone stuck with this. I'd advice that you create a new product and watch the logs.  If you are updating a product instead, just make sure you change something in the body every time and watch the logs.


Reply

Bari Belhadj
1w
Of course after posting this I did some reading about "Data at rest" and, well, it makes sense now ü§£ .

I will just leave this here: https://en.wikipedia.org/wiki/Data_at_rest


1
Reply

Kevin Darlington
1w
Nice work and thanks for sharing!


1
Reply

Nicolas Bautista
1w
I still think your post is valid though Bari. There is a way to store the string payload at rest through the POST request that successfully exploits through a secondary GET call. However, it can still fail and you don't get the flag because it wasn't exactly how the author intended, even though it does technically meet all of the requirements for the flag as specified in the github page.


6
Reply

Alois Maier
1w

Resolved
pretty sure i'm on the final part but i want to make sure i didn't go down a bad path.

I can write a post that will trigger sending my payload. I was stuck for a while on how I can access my lookup via a GET because nothing in the GET's seemed to be able to call where my payload resides from the POST. That was until just recently I saw something in the logs that looks like it should be holding my payload so I just need to find how I can call it. But it looks like it's relating to something that we've had very little work on in this so far in this class so I'm not sure I should devote a lot of time to this method if it's incorrect.

Ultimately my question would be, is flag 7 relevant to this flag at all?


Reply

Ashutosh Agarwal
1w
No, flag 7 is not related to this flag.


Reply

Alois Maier
1w
so can i assume i'm on the wrong path of wanting to utilize sql in some way in this flag?


Reply

Ashutosh Agarwal
1w
 Replying to Alois Maier
yes, sql is not required for this flag.


Reply

Alois Maier
1w
 Replying to Ashutosh Agarwal
and do we have to find any hidden endpoints or the flag just uses the 4 provided in the writeup?


Reply

Ashutosh Agarwal
1w
Endorsed
 Replying to Alois Maier
No hidden endpoints, just the 4 mentioned in the write up are relevant for this flag. 


2
Reply

Ruangsak Patomwong
1w

Resolved
The email has been reset every time. Then I cannot GET the payload to execute script. is that normal?


Reply

Ashutosh Agarwal
1w
Yes, you need to figure out the correct GET endpoint to retrieve the malicious data from the database and trigger the exploit.


Reply

Hailey Robinson
1w

Resolved
Make sure you restart the container regularly if you make several products with the same email, it will avoid some unnecessary confusion :')


1
Reply

Ruangsak Patomwong
1w
Does the email has been reset every time? Should I worry about email reset?


Reply

Hailey Robinson
1w
No, I just mean I created several products with the same email during the trial and error phase and then used GET by email and didn't realize I was receiving at one of my older products without the updated exploit


1
Reply

Joel M Tucker
1w
that's a valid way to reset. The DB is in memory, good tip!


1
Reply

Alois Maier
1w

Resolved
anyone get "IP address pattern detected in request body" when making their POST?


2
Reply

John Michael McPhillips
1w
There are a few ways around this


1
Reply

Jordan Tannenbaum
4d
You mind sharing some? I tried converting to decimal, hex, etc which gets past this issue, but it isn't executing in the get request.

AFAIK, I am using the correct POST format and I am using the correct GET call since I can see my JNDI call in that GET's logs. 


Reply

John Michael McPhillips
4d
 Replying to Jordan Tannenbaum
In my solution I used DNS. This requires an additional exploit step prior to executing your GET to get the flag, because the server will need to have the record. It might be too much if you are unfamiliar with doing something like that.


Reply

Jordan Tannenbaum
4d
 Replying to John Michael McPhillips
Thanks! I ended up doing something a lot simpler, but I did get some extra reading on DNS out of this!


Reply

Ruangsak Patomwong
1w

Resolved
Does the default payload in POST request provide us enough key-value pairs to get this flag or we need to add more?


Reply

John Michael McPhillips
1w
I got the flag using the example key:value from the doc


2
Reply

Ruangsak Patomwong
1w
Do you have to change the value or you can leave them as it is?


Reply

John Michael McPhillips
1w
 Replying to Ruangsak Patomwong
This should be helpful. https://edstem.org/us/courses/69023/discussion/6222726?comment=14459922 

The goal is to have your exploit triggered by the data at rest.


Reply

Ruangsak Patomwong
1w
 Replying to John Michael McPhillips
I think I can picture the direction I should go. Next step is to ask question to myself what do I do.


Reply

Daniel Alexander Moreno
1w
 Replying to Ruangsak Patomwong
Wish I could help, but I have no idea. I figured out the id thing, but I can't figure out how to save data that will be printed by both GETs since only one GET logs the contents of the retrieved records.


1
Reply

Ruangsak Patomwong
1w
 Replying to Daniel Alexander Moreno
From my observation, there is only one GET that contains log about flag. It might be something to be done with that.


Reply

Daniel Alexander Moreno
1w
 Replying to Ruangsak Patomwong
Yeah, my only reason for thinking that it needs to work in both GETs are https://edstem.org/us/courses/69023/discussion/6222726?comment=14460225 and https://edstem.org/us/courses/69023/discussion/6222726?comment=14471965. There's also disagreement about whether it is a good thing if POST triggers the exploit (https://edstem.org/us/courses/69023/discussion/6222726?comment=14488466 and https://edstem.org/us/courses/69023/discussion/6222726?comment=14484570).


Reply

Ruangsak Patomwong
1w
 Replying to Daniel Alexander Moreno
I hit a wall here and no idea what to do next.


Reply

Joel M Tucker
1w
 Replying to Daniel Alexander Moreno
It doesnt need to work in both GETS. Pay attention to the logs. Pay attention to the logical steps of when the actual call is getting triggered. 


Reply

Daniel Alexander Moreno
1w
 Replying to Joel M Tucker
Yeah, I know that the exploit needs to execute after the reset and before the read. I just can't find a log I control which is printed between those two operations.


Reply

Himanshu Singh
2d
 Replying to Daniel Alexander Moreno
Did you find one?


Reply

Daniel Alexander Moreno
2d
 Replying to Himanshu Singh
Yes, I did. I recommend reading https://edstem.org/us/courses/69023/discussion/6222726?comment=14529309 as it turns out I was on the wrong track.


Reply

Daniel Alexander Moreno
1w

Resolved
Are there any hints on how to retrieve the id's value so that it can be inserted into the properties file per "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated"?


Reply

Ashutosh Agarwal
1w
Once you create a product using the POST endpoint, you will get the product id value in the api response. 


Reply

Daniel Alexander Moreno
1w
Well, I already knew that the GET requests would return the id so I suppose that means I need to focus on the update part of the instructions.


Reply

Xiaohua Cai
1w

Resolved
I have use post method to save data in the database, and use get method to fetch the data. It can hit the LDAP server and run the Exploit.class file. But the problem is it shows Flag not obtained due to failed attempt. JNDI malicious must come from data at rest. 

I inject the malicious payload on Post method, this will trigger hitting the LDAP server as well. I am not sure my error is related to this or not. The Get api I use also can hit the LDAP server but showing the flag error instead of showing me correct flag code. 


Reply

Ruangsak Patomwong
1w
I think I stuck at the same point.


Reply

Kevin Darlington
1w
This is a hint to let you know that you need to approach this flag differently. You need to think about data at rest and how you can leverage that. 


Reply

Xiaohua Cai
1w
But I already send a post and store the information in the database and then send a get method to fetch information from server. so this does not count as data at rest? 


10
Reply

Ruangsak Patomwong
1w

Resolved
How to craft the payload since GET endpoint do not process any value that we POST? and null value that we can modify we edit that from curl not from the rest data itself.


Reply

Ruangsak Patomwong
1w
Please give me some hint. I'm stuck on this for 3 days and go to nowhere.


Reply

Kevin Darlington
1w
Think about data at rest and how you can leverage that for this flag. This flag is very different than the rest for this reason. 


Reply

Ruangsak Patomwong
2w

Resolved
I think I can trigger the script when POST new data but not when I GET the data.


Reply

Kshitij Gupta
2w
Are you using the right endpoint? Did you try everything?


Reply

Ruangsak Patomwong
2w
I know that GET has a special value that can be modified to trigger the script but it is not the intension of this flag. It must be normal call. How can GET execute script if it not read any value but directly log them to sql data?


Reply

Ashutosh Agarwal
1w
The exploit must be triggered via data stored in the database (data at rest). If your POST request is triggering the LDAP server, it indicates that the payload is being executed too early. Ensure the POST request only persists the payload without executing it. Then use the correct GET endpoint to retrieve the malicious data from the database and trigger the exploit.


Reply

Omar Arin Solaiman
2w

Resolved
Running into issue where my exploit runs from... one part of the data as opposed to many?

But when I check the log syntax, the executable part looks exactly the same?


Reply

Omar Arin Solaiman
2w
I figured it out

Do not over-complicate your obfuscation. 


1
Reply

Caleb Ryan Massengill
1w
This was helpful, but don't read this as "You don't need to do any obfuscation to make this work."  I had to do some obfuscation, but significantly less than in previous flags.

Overall, I think this is the most satisfying/entertaining flag. Once you figure out the correct way of passing the data so that the exploit can execute from data at rest, it turns into a bit of a puzzle, which I loved. 

Another note here, my exploit still executed when I posted the data, so don't let that throw you off if it does. In my case, it still worked when I called the correct endpoint, even though it triggered the exploit when I did my POST as well.


1
Reply

Hailey Robinson
1w
 Replying to Caleb Ryan Massengill
I second this!! I spent far too long worrying about triggering the exploit in only one place when it did not seem to matter


Reply

Mason Lunsford
2w
Just got this flag as well - ended up spending waaay too much time on it. For anyone still stuck on it, I'll echo what @Omar said and go further and say that even if the lookup is being executed properly and from the right location, the way you obfuscated it may still be hindering you from getting the flag.


Reply

Yan Ting Liu
2w
I highly recommend this thread for people like me who have been stuck for a long time. I tried various approaches and even discovered a hidden variable in the POST request that could trigger the Log4j vulnerability, but it turned out there wasnt for any hidden point. Make sure to "double check your payload like they mentioned"‚Äîit's not a good one, to be honest, even if your payload successfully hitting correctly from data at rest.


1
Reply

Omar Arin Solaiman
2w

Resolved
I am definitely seeing it run from resting data via the get/query I'm utilizing...

But the flag isn't coming, even with the file being updated. Using the end result of Flag2, I am able to see that the config file has the relevant updated id after running. 


Does the get used HAVE to be the ONE specific one? Because the other is definitely doing it.

I will say I think my method has resulted in it running twice... I should fix that.


Reply

David Dexter
2w

Resolved
How can we update a product? Running curl -X POST 'http://localhost:8080/rest/products/product/a06524fb-....' gives me a 415 error


Reply

Anonymous Ibex
2w
Id should be part of request body


Reply

Kshitij Gupta
2w

Resolved
Is there any other endpoint we have to use other than the four we have been provided with? I assume no, but thought may check.


Reply

Ruangsak Patomwong
2w

Resolved
I can understand how this flag should work but I cannot get past the teapot when POST new record.


Reply

Anjali Chablani
2w
same.


Reply

Ruangsak Patomwong
2w
Find a way to put the data in but I cannot trigger the script with GET.


Reply

Ruangsak Patomwong
2w
And my email in the created data is keep changing to default when I use one of the GET method. 


Reply

Anonymous Ibex
2w

Resolved
Any guidance on "Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest"?

I have inserted a malicious record with an LDAP call using POST and I am also able to add product.id to config.properties with the GET call. I have followed the same steps as other tasks in the assignment.


Reply

Anonymous Penguin
2w
Pretty much in the same spot. I don't know why I would get that specific error when it is actually executing from data at rest.


Reply

Anonymous Crocodile
2w
In the same boat.


Reply

Anonymous Crocodile
2w
Just figured it out. In my case, my payload that I was storing in the database was being triggered way too many times when I called the "GET" method. My suggestion is to look at the body of the "POST" method and see how you can use those parameters to form your payload. Viewing the output from the logs also hints at this.


3
Reply

John Michael McPhillips
2w
 Replying to Anonymous Crocodile
Thanks, this helped for me too.


Reply

Omar Arin Solaiman
2w
 Replying to John Michael McPhillips
I figured out the location... but I can't get it to run it even when the string looks exactly the same. Fall into the same problem?


Reply

Anonymous Badger
2d
 Replying to Omar Arin Solaiman
I am at this point any tips?


Reply

Omar Arin Solaiman
2d
 Replying to Anonymous Badger
https://edstem.org/us/courses/69023/discussion/6222726?comment=14479901


Reply

Nicolas Bautista
1w
 Replying to Anonymous Crocodile
Yeah this helped a lot. Thank you.


Reply

Christopher Troupe
1w
 Replying to Anonymous Crocodile
Can you or someone elaborate on this? I see that I trigger the exploit and it happens a lot, but I'm not sure why it triggers multiple times or how to trigger it once. 

Edit: Triggering multiple times did affect me getting the flag at all, this was a time wasting red herring for me. 


Reply

Philipp Werner
2w

Resolved
I think I am close, but I'm not sure... I believe I have the correct statements to insert my payload into the database. However, when I make the GET request, neither of my servers is triggered. Do I need a different approach to execute the payload? I'm struggling with this...


1
Reply

Kshitij Gupta
2w
Same!


Reply

Philipp Werner
2w
I solved it. My fault was that I used the wrong endpoint...


2
Reply

Ruangsak Patomwong
2w
 Replying to Philipp Werner
How did you pass the teapot when you post new data?


Reply

Anonymous Eland
2w
 Replying to Ruangsak Patomwong
Some of the learning resources circulated have good info on evasion tactics.


Reply

Kavish Desai
2w
 Replying to Ruangsak Patomwong
I am not sure if I did it the way it was supposed to be meant but I didn't perform any evasion and it worked just fine


Reply

Kshitij Gupta
2w
 Replying to Kavish Desai
This is the hint that help me get on the right track and solve the flag. 

Definitely not an easy flag if you are on the wrong track. I followed all the hints of looking through the logs and tried several tactics but in the end the simplest way as mentioned above helped me get it. 


1
Reply

Joel M Tucker
2w
 Replying to Kshitij Gupta
nice job!


1
Reply

Michael Derryberry
2w
 Replying to Kshitij Gupta
Yes I am having a bad time with this one, It's been the hardest flag of the course so far for me. I feel that's because I am doing what you're describing: being on the wrong track. Unfortunately it's very hard to determine whether or not I'm on the wrong track. But are you saying removing evasion/obfuscation actually helped you here? As far as I can tell you need some form of obfuscation for the POST request.


Reply

Kavish Desai
2w
 Replying to Michael Derryberry
Think of different ways of how you can send your payload and I would suggest carefully looking at the Log when you send your post request to see whats happening in the application and how your POST request is processed. 


Reply

Kshitij Gupta
2w
 Replying to Michael Derryberry
There is a way. But keeping an eye on which tactic makes it hit the server helped me.


Reply

Lewis Won
1w
 Replying to Philipp Werner
This tip is super important!


1
Reply

Kshitij Gupta
2w

Resolved
I am able to leak out the java version but when I try to leakout the payload the attribute containing the payload does not get logged and there is no error message as well, so I am a bit confused as to what may be the error. Everything else other than the payload gets logged or has a geniune error message. I am a bit lost here if this is expected or I need to just reboot my machine. Thanks!


Reply

John Michael McPhillips
2w

Resolved
I don't understand the objective of this flag. We are creating a malicious product entry, which would trigger our exploit? In the example given that doesn't seem to be the case. The exploit would then inject the product.id of the product we already created, and the product we are calling? I've read this several times and none of makes sense to me. There is also a way to trigger the exploit that is identical to flag3, so why would we need to use malicious code within the product details to execute the exploit? Very confusing what is supposed to be done here.

Are we trying to redirect any product GET to the product values of the new product we created?  What is the goal?


Reply

Patrick Jacobs
2w
We are creating a malicious product entry, which would trigger our exploit? 
Yes, per:

Use the product POST endpoint to persist a record to the database that, when retrieved later, will trigger the LDAP call.
I agree that at first glance, the flag seems to get to the exploit in a roundabout way, but try to focus on one thing at a time:

Use the product POST endpoint to persist a record to the database ...
... update the ‚Äúconfig.properties‚Äù file saved in the root directory of the application ...
... upon calling the right GET endpoint, it will trigger the exploit and, if successful, will generate the Flag 6 message in the logs.
These are three distinct steps.

why would we need to use malicious code within the product details to execute the exploit?
You won't be able to get the flag using any other mechanism than using a record in the DB:

When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit and, if successful, will generate the Flag 6 message in the logs.

Note: You will have to trigger the LDAP call with the malicious record in order to generate the Flag.

6
Reply

Joel M Tucker
2w
Endorsed
nice, I really can't add anything else


2
Reply

Patrick Jacobs
2w
Endorsed
 Replying to Joel M Tucker


13
Reply

Kevin Darlington
1w
 Replying to Patrick Jacobs
LOL


1
Reply

Omar Arin Solaiman
2w

Resolved
Little confused between the errors and the flag description

Errors say I should worry about the customer.service.email property 

However the flag says "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."

I already know one vector, and I think I know the vector to uitilize the data at rest... But it's confusing what should be doing what?

Is the goal for us to have data at rest that we call that then triggers the exploit update? And that exploit updates the product.id, not the customer.service.email?


1
Reply

Ashutosh Agarwal
2w
Yes, the goal is to have data at rest (stored in the database) that, when retrieved via a GET request, triggers the exploit. The exploit should update the product.id property in the config.properties file with the malicious product's ID‚Äînot the customer.service.email.


Reply

Kshitij Gupta
2w

Resolved
When I create a new product via POST /rest/products/product, I include an email in the request.
 
When I retrieve the product using GET /rest/products/product?email=example@example.com, the email is correctly returned with the product attributes

 However, when I retrieve the same product using GET /rest/products/product/<id>, the email does not persist and appears to be missing or reset to a default value.

Before proceeding further with this flag, do I need to ensure the email persists correctly in GET by ID, or can I move forward despite this issue? A 


Reply

Abhishek Sathiabalan
2w
Move forward.


4
Reply

Gen Sheng Zhang
2w

Resolved
Great flag once it clicks. There should only be one GET that works, read the logs carefully about where you want the exploit to happen, which is the key thing for most of the flags tbh. 


1
Reply

Arianna Rachel Lanz
2w
Any other hints here? I'm pretty sure I see where the exploit is supposed to happen based on the logs from the POST request and the logs from one of the GET requests. Still, when I call the GET request, I see the HTTP server and my exploit file being hit multiple times...


1
Reply

Gen Sheng Zhang
2w
I think being hit multiple times is not a concern, as long as the exploit is called at a certain point in the log and subsequently does the properties change as required, you can still get the flag.


1
Reply

Abhishek Sathiabalan
2w
It can be a concern, if you modify the file multiple times


1
Reply

Yongmin Li
2w
 Replying to Abhishek Sathiabalan
I think this is one of the key concerns


Reply

Anonymous Eland
2w
Are you sure? I was able to get my exploit to work on multiple GET endpoints.


Reply

Gen Sheng Zhang
2w
A true genius in that case, would love to learn how someday :)


Reply

Yongmin Li
2w

Resolved
i keep the Reverse Shell open during this flag, after execute the request and payload, the config.properties was updated as below
cat config.properties
#Mon Feb 24 06:44:28 GMT 2025
customer.service.email=example@example.com
topic.name=user.info
rating=PG
product.id=5f84925f-32b5-4717-8017-2273ef550b77

but i am still getting below error


WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.


Reply

Abhishek Sathiabalan
2w
Are you hard coding the datetime?


Reply

Yongmin Li
2w
No.


Reply

Yongmin Li
2w
Finally get the flag, I think I was misleading by "the real world vulnerability" again. test is test, they are deliberately designed.

My hint is pay CLOSE attention to all the output logs, then think , what might be some technic they want us to learn.

The error messages are also kind of hint. think why those error message are in place?
by error messages,  i don't mean below

Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it

WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

1
Reply

Joel M Tucker
2w
Yes, while we try to make these projects as "real world" as possible, they are deliberately designed to work in certain ways that highlight different aspects of the vulnerabilities. And yes, error messages are also designed to be helpful 


1
Reply

Cooper Michael Simpson
1w
How did you overcome WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it. ??

I feel like I know what to do for the flag but I keep getting this


1
Reply

Michael Derryberry
2w

Resolved
I seem to be dancing between multiple errors while attempting different endpoints. 
It's either: WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

OR:
 the customer.service.email property is not in config.properties OR overwriting file instead of updating it

I've spent most of my day on this flag so I must be missing something or we are
not getting enough guidance on this task.


3
Reply

Anonymous Penguin
2w
Same.


Reply

Abdelrahman Ibrahem
2w
You‚Äôre just missing some glaring issue that‚Äôs staring you right in the face. I don‚Äôt think there is any missing guidance; the error messages could be improved a bit, though. I believe this task is what cemented my understanding of Log4j vulnerabilities.


1
Reply

Anonymous Penguin
2w

Resolved
I am saving the exploit on the database. I don't know if we are supposed to create the new property as the exploit from the data at rest or if we are supposed to make another exploit for the data at rest. I am asking because there are different ways to trigger log4shell on this flag. There is a out of place variable and there is data at rest. Are we supposed to use both? also it triggers the exploit when I create a product so that's another different way of exploit. I already receive the Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest when coming from data at rest. So please I would like to know what am I doing wrong :)

thanks


Reply

Ashutosh Agarwal
2w
Focus on the data-at-rest attack vector. The goal is to store a malicious payload in the database and retrieve it later to trigger the exploit. The "out-of-place variable" is not relevant for this flag.


1
Reply

Anuj Goel
1w
Can you help in informing if we need to use just one variable or more than one?

Also, I am seeing the code that generates the flag is only executed on one API that does not seem to process variables. What am I missing? 


Reply

Kevin Darlington
1w
 Replying to Anuj Goel
There will only be 1 attack vector per se, but you really need to think about your payload, how the app stores data, how it retrieves data etc. This is a completely different thought process than all the other flags. 


Reply

Anuj Goel
1w
 Replying to Kevin Darlington
I have the payload that is executing the exploit on both posts and get, but I still don't get the flagged. I am confused as to why. The instructions say we need to add a new product id to the config.properties file. However, the log message says's 

WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.

What is going on?

In previous flags, the error message and instruction were aligned. How can I be sure that my exploit code it making the correct changes that Flag is expecting?


Reply

Fatima Muhammad Barakzai
2w

Resolved
I am confused about what we're supposed to be doing for this flag. I added the product.id entry into the properties file, but i'm seeing this in the logs:


Flag not obtained due to failed attempt, 
the customer.service.email property is not 
in config.properties OR overwriting file instead of 
updating it

4
Reply

Fatima Muhammad Barakzai
2w
I can see the email tho, am I supposed to change it?


1
Reply

Daniel James Poulin
2w
Did you get anywhere with this one? I am able to update the product email with a query. I found another endpoint with something similar to Flag5 so I can trigger a call back and overwrite or append whatever I want to the filesystem. I added the product.id and updated the customer.service.email. I am not sure what else we are supposed to be doing.


1
Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
nope, I feel like the requirements are super unclear on this one. I'm also able to manipulate the file system but aside from product.id i'm not sure what else i'm supposed to be doing with it

were we supposed to update the product email? 


3
Reply

Daniel James Poulin
2w
 Replying to Fatima Muhammad Barakzai
I think the key part from the write up is:

"When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit"

So the you have the LDAP query in place before hand and you have to trigger this one via the GET request using the email property, no other way.

And the exploit being "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."


Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
I'm using a different way to trigger the LDAP query, but it does add the new product.id


Reply

Fatima Muhammad Barakzai
2w
 Replying to Daniel James Poulin
I feel like I understand all the concepts, just don't don't know what they want us to do 


1
Reply

Daniel James Poulin
2w
 Replying to Fatima Muhammad Barakzai
I am using a similar method as Flag5. I think that is the issue, it's not the email property triggering it.


1
Reply

Abdelrahman Ibrahem
2w
 Replying to Daniel James Poulin
I made a script that loops over everything I can set and monitored the log file for a leak.

I quickly found the set and get endpoints.

Another tip is to break it down into small steps. Make sure you‚Äôre hitting the correct endpoints by first trying to leak the Java version, then focusing on getting your exploit code running, and finally modifying what needs to be changed.


3
Reply

Daniel James Poulin
2w
 Replying to Abdelrahman Ibrahem
I think there is a specific way they want it triggered. I just got it to return my persisted email but I received this:

WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


6
Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I've found that after I make a POST with my exploit code when I call each of the GET endpoints: 
- one returns WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest
- another returns Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it
- and the third doesn't trigger the exploit at all

I'm not super stuck yet, but I just thought I'd share in case others are seeing the same thing!

ü§∑‚Äç‚ôÄÔ∏è 


6
Reply

Daniel James Poulin
2w
 Replying to Arianna Rachel Lanz
I am at the same point. I think it's something to do with timing or order of operations. Just need to figure it out.


Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I also just noticed something in the logs that may be useful.


Reply

Fatima Muhammad Barakzai
2w
 Replying to Arianna Rachel Lanz
any hints? Still stuck on this one


Reply

Abdelrahman Ibrahem
2w
 Replying to Daniel James Poulin
This message was a bit confusing for me too, I don‚Äôt think how it‚Äôs being triggered is the issue as much as it‚Äôs what is being triggered.


Reply

Fatima Muhammad Barakzai
2w
 Replying to Abdelrahman Ibrahem
Did you get the flag this way?


Reply

Abdelrahman Ibrahem
2w
 Replying to Fatima Muhammad Barakzai
Yes, but the key is step by step and really monitor how your payload impacts the logs.


1
Reply

Daniel James Poulin
2w
 Replying to Abdelrahman Ibrahem
Still stuck. I was using a method similar to Flag3 and modifying the URL to reach out to the LDAP server but I assumed that wasn't going anywhere since it says it needs to be triggered by data at rest.

I can do what the write up says and persist a record in the database and when I retrieve it using one of the GET methods, I see it query the LDAP server but I keep getting the "JNDI malicious trigger must come from data at rest" which.... it is. Not sure where to go from here.


2
Reply

Abhishek Sathiabalan
2w
 Replying to Daniel James Poulin
Have you verified your code isn't executing multiple times? Are you passing a JNDI in the parameters?


1
Reply

Fatima Muhammad Barakzai
2w
 Replying to Abhishek Sathiabalan
Do we pass it into the parameters or in the body?


Reply

William David Done
2w
 Replying to Daniel James Poulin
I'm stuck on this same step... even though the JNDI statement is coming from the database, it has the "JNDI malicious trigger must come from data at rest" error.


1
Reply

Daniel James Poulin
2w
 Replying to William David Done
Finally got it. All I will say is I didn't spend enough time looking at the POST logs.


4
Reply

William David Done
2w
 Replying to Daniel James Poulin
Thank you for the hint - that did it for me!


Reply

Kshitij Gupta
2w
 Replying to Daniel James Poulin
I understand the concept here, but I am still stuck at "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it." I am a bit confused as to how to persist the email. I have looked at flag 3 and I am trying to follow the same line of thought for config.props


Reply

Anonymous Eland
2w
 Replying to Kshitij Gupta
I would look at the output from your python HTTP server and confirm whether or not it's serving your exploit file. If it is, then that message is probably because you're overwriting that file improperly as the message suggests. If it's not, then obviously your code isn't triggering to begin with.


2
Reply

Anonymous Eland
2w
 Replying to Kshitij Gupta
As far as the payload goes, hopefully without giving away too much, look carefully at what's being written to the database and how it looks when it's read from it. See if there's anything you can take advantage of.


2
Reply

Robert Smithers III
2w
 Replying to Daniel James Poulin
I'm still stuck with the "JNDI malicious trigger must come from data at rest" warning, but I'm fairly confident that I crafted the payload correctly. I reviewed the post logs, but I assume that just clarifies how to build it. 

I am not passing anything to directly cause the JNDI callback other than the payload stored in the database... am I missing something more?


1
Reply

Rodrigo Alvarado Chacon
2w
 Replying to Robert Smithers III
I am in the same boat as you, I am definetly running the payload from the database calling the specific endpoint. I don't what else I should try


1
Reply

Arianna Rachel Lanz
2w
 Replying to Daniel James Poulin
I‚Äôm pretty sure I see how to construct the exploit in the POST payload from looking at the POST logs, and my exploit is definitely triggered this way when using one of the GETs that reads the key value, and yet I still see the above errors. :/ 


Reply

Anonymous Eland
2w
 Replying to Arianna Rachel Lanz
The payload you craft should work for both of the GETs, if only one of them is triggering, you should take a look at how you're crafting it to see if you can get it to trigger for the other one.

Another hint: look carefully at what's being written to and read from the database, especially as pertains to the logs (obviously, since this is log4j and all). See if there's anything you can leverage to help craft your payload.


Reply

This comment was deleted
Arianna Rachel Lanz
2w
 Replying to (Deleted)
I don't know  what exactly I did differently, but I got it! I think I was relying on some of the other evasion tactics we used earlier, but they weren't necessary/hindered this exploit. 


5
Reply

Joseph A Cannaday
2w
 Replying to Arianna Rachel Lanz
Thank God you said this. 11+ hours on one flag and it was something so trivial. I hate my life.


2
Reply

Michael Derryberry
2w
 Replying to Joseph A Cannaday
I've been at this flag for so long now and I'm just going in circles. Even after sleeping and coming back the next day I'm still against a wall. Do you have any tips or hints that might be able to help?


Reply

Joseph A Cannaday
2w
 Replying to Michael Derryberry
Look at the logs to see how a lookup might be constructed and see Arianna's comment about evasion tactics. That's all I can say.


2
Reply

Anonymous Penguin
2w
 Replying to Joseph A Cannaday
Thanks a lot! I would say that it really doesn't make sense if  you are doing it right cause it's really making the exploit :( lost hours on this when it was working correctly just because I sent a different jndi payload


Reply

Robert Smithers III
1w
 Replying to Arianna Rachel Lanz
This solved it for me too! Not sure why a valid payload fails with evasion... likely some grading regex. Cheers


1
Reply

Michael Joseph Hearn
1w
 Replying to Robert Smithers III
Ahh yes we love when the grader failing means hours of extra work. 


3
Reply

Robert Birk Hughes
1w
 Replying to Robert Smithers III
So you just had to change the method in which you evaded the lookup checks and it worked for you?


Reply

Christopher Troupe
1w
 Replying to Arianna Rachel Lanz
I can't believe I wasted 5+ hours on this and this was the issue. Thank you! For anyone else, please save yourself your sanity and look at Arianna's comment. 


Reply

Van Hien Tran
5d
 Replying to Arianna Rachel Lanz
Hi, I still don't get it. I think I know how the payload should be based on the POST log, just not sure if I need to make it like how we passed it to the header in Flag 2. Sorry, English is not my mother tongue so i might misinterpreted the evasion tatics ... could you point to which flag using it?


[UPDATE] i got it thanks


Reply

Himanshu Singh
2d
 Replying to Van Hien Tran
What did you do? I'm constructing the payload through the POST logs but I am not sure how to retrieve it..


Reply

Himanshu Singh
2d
 Replying to Himanshu Singh
I got it, nevermind.


Reply

Abhishek Sathiabalan
2w
 Replying to Abdelrahman Ibrahem
Thanks, that made it click.


Reply

Amr Khaled Hassan
7d
 Replying to Abhishek Sathiabalan
Wow! This really was the issue after all


Reply

John Wyatt Gamble
3d
 Replying to Amr Khaled Hassan
This flag got me like:



1
Reply

Amrut Bhalchandra Kulkarni
9h
 Replying to John Wyatt Gamble
Just got Flag 6 and... y'know... same

I was doing roughly the same thing for a few hours, and I apparently changed something correctly since the flag showed up

Also, Between POST and GET, the random change meant that instead of the exploit being called 8 times per endpoint call, it would only be called 2 ties per call

So... still not sure... the logs look the same, but how I formatted the payload changed


Reply

This comment was deleted
Keymer Botero
2d
If your servers aren't firing, it means that your exploit is not getting triggered. Look into different ways how you can make that bad boy fire!

This may sound obvious, but trust me, this hint was a lifesaver thoroughout the project timeline for me.


Reply

