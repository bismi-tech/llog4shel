Skip to main content
Logo
CS 6035 O01, OCY
‚Äì
Ed Discussion


New Thread
Courses
48
23
Categories
761 others online
Use left and right arrow keys to adjust the split region size

New Thread
Filter
Use left and right arrow keys to adjust the split region size
Project Log4Shell - Flag 6 Restful Data #697
Kevin Darlington
4 days ago in Projects ‚Äì Log4Shell

Pinned

Star

Watch

136
11
33
66
Views

This is the post for discussing this flag. If there's any update on the task, we'll post it here. Please, do not open new threads covering this task.

Anyone with questions about citations and plagiarism should consult the appropriate section of the course policy on misconduct.

Note: Do not share code, outside tools you used or any hints beyond the writeup or office hours to other students. We will delete threads and warn you if you overshare.

Comment

Sort by Newest 
John Michael McPhillips
29m
Unresolved
I don't understand the objective of this flag. We are creating a malicious product entry, which would trigger our exploit? In the example given that doesn't seem to be the case. The exploit would then inject the product.id of the product we already created, and the product we are calling? I've read this several times and none of makes sense to me. There is also a way to trigger the exploit that is identical to flag3, so why would we need to use malicious code within the product details to execute the exploit? Very confusing what is supposed to be done here.

Are we trying to redirect any product GET to the product values of the new product we created?  What is the goal?


Reply

Omar Arin Solaiman
5h

Resolved
Little confused between the errors and the flag description

Errors say I should worry about the customer.service.email property 

However the flag says "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."

I already know one vector, and I think I know the vector to uitilize the data at rest... But it's confusing what should be doing what?

Is the goal for us to have data at rest that we call that then triggers the exploit update? And that exploit updates the product.id, not the customer.service.email?


1
Reply

Ashutosh Agarwal
35m
Yes, the goal is to have data at rest (stored in the database) that, when retrieved via a GET request, triggers the exploit. The exploit should update the product.id property in the config.properties file with the malicious product's ID‚Äînot the customer.service.email.


Reply

Kshitij Gupta
7h

Resolved
When I create a new product via POST /rest/products/product, I include an email in the request.
 
When I retrieve the product using GET /rest/products/product?email=example@example.com, the email is correctly returned with the product attributes

 However, when I retrieve the same product using GET /rest/products/product/<id>, the email does not persist and appears to be missing or reset to a default value.

Before proceeding further with this flag, do I need to ensure the email persists correctly in GET by ID, or can I move forward despite this issue? A 


Reply

Abhishek Sathiabalan
6h
Move forward.


1
Reply

Gen Sheng Zhang
11h

Resolved
Great flag once it clicks. There should only be one GET that works, read the logs carefully about where you want the exploit to happen, which is the key thing for most of the flags tbh. 


Reply

Arianna Rachel Lanz
10h
Any other hints here? I'm pretty sure I see where the exploit is supposed to happen based on the logs from the POST request and the logs from one of the GET requests. Still, when I call the GET request, I see the HTTP server and my exploit file being hit multiple times...


1
Reply

Gen Sheng Zhang
10h
I think being hit multiple times is not a concern, as long as the exploit is called at a certain point in the log and subsequently does the properties change as required, you can still get the flag.


1
Reply

Abhishek Sathiabalan
6h
It can be a concern, if you modify the file multiple times


Reply

Yongmin Li
11h
Unresolved
i keep the Reverse Shell open during this flag, after execute the request and payload, the config.properties was updated as below
cat config.properties
#Mon Feb 24 06:44:28 GMT 2025
customer.service.email=example@example.com
topic.name=user.info
rating=PG
product.id=5f84925f-32b5-4717-8017-2273ef550b77

but i am still getting below error


WARN Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it.


Reply

Abhishek Sathiabalan
6h
Are you hard coding the datetime?


Reply

Yongmin Li
2h
No.


Reply

Michael Derryberry
13h

Resolved
I seem to be dancing between multiple errors while attempting different endpoints. 
It's either: WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest

OR:
 the customer.service.email property is not in config.properties OR overwriting file instead of updating it

I've spent most of my day on this flag so I must be missing something or we are
not getting enough guidance on this task.


3
Reply

Anonymous Penguin
12h
Same.


Reply

Abdelrahman Ibrahem
12h
You‚Äôre just missing some glaring issue that‚Äôs staring you right in the face. I don‚Äôt think there is any missing guidance; the error messages could be improved a bit, though. I believe this task is what cemented my understanding of Log4j vulnerabilities.


1
Reply

Anonymous Penguin
14h

Resolved
I am saving the exploit on the database. I don't know if we are supposed to create the new property as the exploit from the data at rest or if we are supposed to make another exploit for the data at rest. I am asking because there are different ways to trigger log4shell on this flag. There is a out of place variable and there is data at rest. Are we supposed to use both? also it triggers the exploit when I create a product so that's another different way of exploit. I already receive the Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest when coming from data at rest. So please I would like to know what am I doing wrong :)

thanks


Reply

Ashutosh Agarwal
46m
Focus on the data-at-rest attack vector. The goal is to store a malicious payload in the database and retrieve it later to trigger the exploit. The "out-of-place variable" is not relevant for this flag.


Reply

Fatima Muhammad Barakzai
1d

Resolved
I am confused about what we're supposed to be doing for this flag. I added the product.id entry into the properties file, but i'm seeing this in the logs:


Flag not obtained due to failed attempt, 
the customer.service.email property is not 
in config.properties OR overwriting file instead of 
updating it

3
Reply

Fatima Muhammad Barakzai
1d
I can see the email tho, am I supposed to change it?


1
Reply

Daniel James Poulin
22h
Did you get anywhere with this one? I am able to update the product email with a query. I found another endpoint with something similar to Flag5 so I can trigger a call back and overwrite or append whatever I want to the filesystem. I added the product.id and updated the customer.service.email. I am not sure what else we are supposed to be doing.


1
Reply

Fatima Muhammad Barakzai
22h
 Replying to Daniel James Poulin
nope, I feel like the requirements are super unclear on this one. I'm also able to manipulate the file system but aside from product.id i'm not sure what else i'm supposed to be doing with it

were we supposed to update the product email? 


1
Reply

Daniel James Poulin
22h
 Replying to Fatima Muhammad Barakzai
I think the key part from the write up is:

"When the application fetches the record upon calling the right GET endpoint, it will trigger the exploit"

So the you have the LDAP query in place before hand and you have to trigger this one via the GET request using the email property, no other way.

And the exploit being "You will write a new property product.id that should have the value set to the id of the malicious product record that you have created/updated."


Reply

Fatima Muhammad Barakzai
22h
 Replying to Daniel James Poulin
I'm using a different way to trigger the LDAP query, but it does add the new product.id


Reply

Fatima Muhammad Barakzai
22h
 Replying to Daniel James Poulin
I feel like I understand all the concepts, just don't don't know what they want us to do 


1
Reply

Daniel James Poulin
22h
 Replying to Fatima Muhammad Barakzai
I am using a similar method as Flag5. I think that is the issue, it's not the email property triggering it.


Reply

Abdelrahman Ibrahem
22h
 Replying to Daniel James Poulin
I made a script that loops over everything I can set and monitored the log file for a leak.

I quickly found the set and get endpoints.

Another tip is to break it down into small steps. Make sure you‚Äôre hitting the correct endpoints by first trying to leak the Java version, then focusing on getting your exploit code running, and finally modifying what needs to be changed.


2
Reply

Daniel James Poulin
21h
 Replying to Abdelrahman Ibrahem
I think there is a specific way they want it triggered. I just got it to return my persisted email but I received this:

WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest


4
Reply

Arianna Rachel Lanz
21h
 Replying to Daniel James Poulin
I've found that after I make a POST with my exploit code when I call each of the GET endpoints: 
- one returns WARN Flag not obtained due to failed attempt. JNDI malicious trigger must come from data at rest
- another returns Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it
- and the third doesn't trigger the exploit at all

I'm not super stuck yet, but I just thought I'd share in case others are seeing the same thing!

ü§∑‚Äç‚ôÄÔ∏è 


4
Reply

Daniel James Poulin
21h
 Replying to Arianna Rachel Lanz
I am at the same point. I think it's something to do with timing or order of operations. Just need to figure it out.


Reply

Arianna Rachel Lanz
21h
 Replying to Daniel James Poulin
I also just noticed something in the logs that may be useful.


Reply

Fatima Muhammad Barakzai
20h
 Replying to Arianna Rachel Lanz
any hints? Still stuck on this one


Reply

Abdelrahman Ibrahem
20h
 Replying to Daniel James Poulin
This message was a bit confusing for me too, I don‚Äôt think how it‚Äôs being triggered is the issue as much as it‚Äôs what is being triggered.


Reply

Fatima Muhammad Barakzai
21h
 Replying to Abdelrahman Ibrahem
Did you get the flag this way?


Reply

Abdelrahman Ibrahem
20h
 Replying to Fatima Muhammad Barakzai
Yes, but the key is step by step and really monitor how your payload impacts the logs.


1
Reply

Daniel James Poulin
19h
 Replying to Abdelrahman Ibrahem
Still stuck. I was using a method similar to Flag3 and modifying the URL to reach out to the LDAP server but I assumed that wasn't going anywhere since it says it needs to be triggered by data at rest.

I can do what the write up says and persist a record in the database and when I retrieve it using one of the GET methods, I see it query the LDAP server but I keep getting the "JNDI malicious trigger must come from data at rest" which.... it is. Not sure where to go from here.


2
Reply

Abhishek Sathiabalan
19h
 Replying to Daniel James Poulin
Have you verified your code isn't executing multiple times? Are you passing a JNDI in the parameters?


1
Reply

Fatima Muhammad Barakzai
19h
 Replying to Abhishek Sathiabalan
Do we pass it into the parameters or in the body?


Reply

William David Done
18h
 Replying to Daniel James Poulin
I'm stuck on this same step... even though the JNDI statement is coming from the database, it has the "JNDI malicious trigger must come from data at rest" error.


1
Reply

Daniel James Poulin
18h
 Replying to William David Done
Finally got it. All I will say is I didn't spend enough time looking at the POST logs.


2
Reply

William David Done
17h
 Replying to Daniel James Poulin
Thank you for the hint - that did it for me!


Reply

Kshitij Gupta
17h
 Replying to Daniel James Poulin
I understand the concept here, but I am still stuck at "Flag not obtained due to failed attempt, the customer.service.email property is not in config.properties OR overwriting file instead of updating it." I am a bit confused as to how to persist the email. I have looked at flag 3 and I am trying to follow the same line of thought for config.props


Reply

Anonymous Eland
15h
 Replying to Kshitij Gupta
I would look at the output from your python HTTP server and confirm whether or not it's serving your exploit file. If it is, then that message is probably because you're overwriting that file improperly as the message suggests. If it's not, then obviously your code isn't triggering to begin with.


2
Reply

Anonymous Eland
15h
 Replying to Kshitij Gupta
As far as the payload goes, hopefully without giving away too much, look carefully at what's being written to the database and how it looks when it's read from it. See if there's anything you can take advantage of.


2
Reply

Robert Smithers III
14h
 Replying to Daniel James Poulin
I'm still stuck with the "JNDI malicious trigger must come from data at rest" warning, but I'm fairly confident that I crafted the payload correctly. I reviewed the post logs, but I assume that just clarifies how to build it. 

I am not passing anything to directly cause the JNDI callback other than the payload stored in the database... am I missing something more?


Reply

Rodrigo Alvarado Chacon
14h
 Replying to Robert Smithers III
I am in the same boat as you, I am definetly running the payload from the database calling the specific endpoint. I don't what else I should try


1
Reply

Arianna Rachel Lanz
10h
 Replying to Daniel James Poulin
I‚Äôm pretty sure I see how to construct the exploit in the POST payload from looking at the POST logs, and my exploit is definitely triggered this way when using one of the GETs that reads the key value, and yet I still see the above errors. :/ 


Reply

Anonymous Eland
8h
 Replying to Arianna Rachel Lanz
The payload you craft should work for both of the GETs, if only one of them is triggering, you should take a look at how you're crafting it to see if you can get it to trigger for the other one.

Another hint: look carefully at what's being written to and read from the database, especially as pertains to the logs (obviously, since this is log4j and all). See if there's anything you can leverage to help craft your payload.


Reply

Arianna Rachel Lanz
7h
 Replying to Anonymous Eland
I think one thing that's throwing me off is that I get a ProductFound log in one of the GET endpoints, but not the other even though it is returning something... 


Reply

Arianna Rachel Lanz
7h
 Replying to Arianna Rachel Lanz
I don't know  what exactly I did differently, but I got it! I think I was relying on some of the other evasion tactics we used earlier, but they weren't necessary/hindered this exploit. 


Reply

Joseph A Cannaday
25m
 Replying to Arianna Rachel Lanz
Thank God you said this. 11+ hours on one flag and it was something so trivial. I hate my life.


Reply

Abhishek Sathiabalan
19h
 Replying to Abdelrahman Ibrahem
Thanks, that made it click.


Reply

